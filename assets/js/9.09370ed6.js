(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{381:function(e,a,t){"use strict";t.r(a);var n=t(42),i=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"responsability-view-not-allowed-to-step-inside-functions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#responsability-view-not-allowed-to-step-inside-functions"}},[e._v("#")]),e._v(" Responsability view (not allowed to step inside functions)")]),e._v(" "),t("h2",{attrs:{id:"vscode-extension"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vscode-extension"}},[e._v("#")]),e._v(" VSCode extension")]),e._v(" "),t("ul",[t("li",[e._v("Trigger server when workspace contains .Ⲙ files")]),e._v(" "),t("li",[e._v("Trigger server when a Ⲙ file is opened")]),e._v(" "),t("li",[e._v("Trigger server when restart command is called")]),e._v(" "),t("li",[e._v("Restart command stops current connection and starts a new one")])]),e._v(" "),t("h2",{attrs:{id:"main-package"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-package"}},[e._v("#")]),e._v(" Main package")]),e._v(" "),t("ul",[t("li",[e._v("Communicate with client using LSP4J")]),e._v(" "),t("li",[e._v("Keep projects in sync with file system")]),e._v(" "),t("li",[e._v("Incrementally validate projects when files modify")]),e._v(" "),t("li",[e._v("Trigger project generation when no errors found")])]),e._v(" "),t("h3",{attrs:{id:"main-java"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-java"}},[e._v("#")]),e._v(" Main.java")]),e._v(" "),t("ul",[t("li",[e._v("Create a language server")]),e._v(" "),t("li",[e._v("Connect it to language client using stdin stdio")]),e._v(" "),t("li",[e._v("Connect it to language client using socket 5007")])]),e._v(" "),t("h3",{attrs:{id:"server-java"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#server-java"}},[e._v("#")]),e._v(" Server.java")]),e._v(" "),t("ul",[t("li",[e._v("Start listening for language client notifications and requests")])]),e._v(" "),t("p",[e._v("Connection lifetime events")]),e._v(" "),t("ul",[t("li",[e._v("Initilize request: Send server capabilities + create a project foreach folder")]),e._v(" "),t("li",[e._v("Initialized: Initialize project and publish created diagnostics")]),e._v(" "),t("li",[e._v("Shutdown and Exit: Exit the program")])]),e._v(" "),t("p",[e._v("File and folder synchronization")]),e._v(" "),t("ul",[t("li",[e._v("Folder created: Create project and publish diagnostics")]),e._v(" "),t("li",[e._v("Folder removed: Remove project")]),e._v(" "),t("li",[e._v("File created: Signal all projects about file creation and publish diagnostics")]),e._v(" "),t("li",[e._v("File removed: Signal all projects about file removal and publish diagnostics")]),e._v(" "),t("li",[e._v("File modified:Signal all projects about file modification and publish diagnostics")])]),e._v(" "),t("p",[e._v("Language services")]),e._v(" "),t("ul",[t("li",[e._v("All: Unwrap lsp4j parameters into file and position + ask projects + wrap results for lsp4j")])]),e._v(" "),t("p",[e._v("Privately")]),e._v(" "),t("ul",[t("li",[e._v("Decode uris to file paths and encode them back")]),e._v(" "),t("li",[e._v("Read from uris to pass text")])]),e._v(" "),t("p",[e._v("Known issues")]),e._v(" "),t("ul",[t("li",[e._v("! Error if first project is removed ! Probably not in my code. If deleted first sends a shutdown request, if deleted second no shutdown request is sent.")]),e._v(" "),t("li",[e._v("! Sends modification messages to all projects but service messages to involved projects !")]),e._v(" "),t("li",[e._v("! Use uris directly instead of decoding them to file paths !")])]),e._v(" "),t("h3",{attrs:{id:"project-java"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#project-java"}},[e._v("#")]),e._v(" Project.java")]),e._v(" "),t("ul",[t("li",[e._v("When created: Detect all .Ⲙ files in root + trigger incremental build")])]),e._v(" "),t("h2",{attrs:{id:"validation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validation"}},[e._v("#")]),e._v(" Validation")]),e._v(" "),t("ul",[t("li",[e._v("! Get the nodes from expressionGraph or build the local data in expressionGraph !")])]),e._v(" "),t("h3",{attrs:{id:"global-validator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#global-validator"}},[e._v("#")]),e._v(" Global validator")]),e._v(" "),t("ul",[t("li",[e._v("On validation: validate locally")]),e._v(" "),t("li",[e._v("Save validation results in memory")]),e._v(" "),t("li",[e._v("Invalidate obsolete memory")]),e._v(" "),t("li",[e._v("Validate project globally")]),e._v(" "),t("li",[e._v("Add local problems")]),e._v(" "),t("li",[e._v("Add undecidable and incompatible type problems")]),e._v(" "),t("li",[e._v("Add all functions to game")]),e._v(" "),t("li",[e._v("Add all well typed components to game")]),e._v(" "),t("li",[e._v("Detect repeated functions and report error in each file")]),e._v(" "),t("li",[e._v("return game data")]),e._v(" "),t("li",[e._v("! Garbage is created when clusters are merged !")])]),e._v(" "),t("h3",{attrs:{id:"local-validator-parse-2-pass-validation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#local-validator-parse-2-pass-validation"}},[e._v("#")]),e._v(" Local validator Parse + 2 pass validation")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Parse text into model and syntax errors")])]),e._v(" "),t("li",[t("p",[e._v("Handle empty files")])]),e._v(" "),t("li",[t("p",[e._v("! Declare all functions and components beforehand !")])]),e._v(" "),t("li",[t("p",[e._v("Declare variables of assignments and bindingBlocks")])]),e._v(" "),t("li",[t("p",[e._v("Access values, components, functions and blocks.")])]),e._v(" "),t("li",[t("p",[e._v("! Assignments have special treatment as hardcoded functions !")])]),e._v(" "),t("li",[t("p",[e._v("Push and pop value stack")])]),e._v(" "),t("li",[t("p",[e._v("build resulting data in context -> expressionGraph")])]),e._v(" "),t("li",[t("p",[e._v("Add syntax errors from parsing and return")])])]),e._v(" "),t("h3",{attrs:{id:"context"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[e._v("#")]),e._v(" Context")]),e._v(" "),t("ul",[t("li",[e._v("Create redefined, undefined and unused problems")]),e._v(" "),t("li",[e._v("Bind expressions together for same variable, same component, same function, same type variable")]),e._v(" "),t("li",[e._v("Type expressions for standard variable, standard component, standard function, standard block")])]),e._v(" "),t("h3",{attrs:{id:"expressiongraph"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expressiongraph"}},[e._v("#")]),e._v(" ExpressionGraph")]),e._v(" "),t("ul",[t("li",[e._v("Maintain set of expression nodes. One per connected component.")]),e._v(" "),t("li",[e._v("Convert expressions to ExpressionNodes")]),e._v(" "),t("li",[e._v("Add bindings to each node of a binding")]),e._v(" "),t("li",[e._v("Add a typing to a node with a reason")]),e._v(" "),t("li",[e._v("! Add connected component when typed if it has no bindings !")]),e._v(" "),t("li",[e._v("! When binding two nodes, if both are root, remove one; if none are root add one as root !")])]),e._v(" "),t("h2",{attrs:{id:"model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#model"}},[e._v("#")]),e._v(" Model")]),e._v(" "),t("h3",{attrs:{id:"parser"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parser"}},[e._v("#")]),e._v(" Parser")]),e._v(" "),t("ul",[t("li",[e._v("Inject MParser generated by Xtext")]),e._v(" "),t("li",[e._v("Parse text and return results")])]),e._v(" "),t("h1",{attrs:{id:"flow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flow"}},[e._v("#")]),e._v(" Flow")]),e._v(" "),t("p",[e._v("Main: connect to client via socket 5007\nServer: start listening\nServer: set capabilities\nServer: Initialize projects\nProject: Find .Ⲙ files in root folder\nProject: Trigger incremental build for each")]),e._v(" "),t("p",[e._v("GlobalValidator: Validate new file content locally\nLocalValidator: Parse file text\nParser: Use injected generated MParser and parse\nLocalValidator: Declare all functions and components globally\nLocalValidator: Go through the AST model")]),e._v(" "),t("p",[e._v("LocalValidator and Context and ExpressionGraph: Interplay\nLocalValidator: Control context's defined variables stack by pushing and poping in blocks\nLocalValidator: Declare new variables if foreach expression or assignment to variable\nLocalValidator: Access variables, components, functions and blocks of context")]),e._v(" "),t("p",[e._v("3 reasons for redefined error:\nContext: Redefined error if variable is in the standard library or is a user function or component.\nContext: Redefined error if component is in the standard library or is a user function.\nContext: Redefined error if function is in the standard library or is a previous user function.")]),e._v(" "),t("p",[e._v("5 reasons for undefined errors:\nContext: Undefined error if variable is not standard nor in scope\nContext: ! Undefined error if block is not standard !\nContext: Undefined error if function parameter count does not match with standard or user function\nContext: Undefined error if function does not exist")]),e._v(" "),t("p",[e._v("Context: ! Unused value error if variable was in stack not anymore and has not been accessed !")]),e._v(" "),t("p",[e._v("ExpressionGraph: Convert expression to expressionNode")])])}),[],!1,null,null,null);a.default=i.exports}}]);