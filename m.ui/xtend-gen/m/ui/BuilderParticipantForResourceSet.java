/**
 * generated by Xtext
 */
package m.ui;

import com.google.inject.Inject;
import java.util.List;
import m.m.MFactory;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.builder.BuilderParticipant;
import org.eclipse.xtext.builder.IXtextBuilderParticipant;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.resource.IContainer;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.IResourceDescriptions;
import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;

@SuppressWarnings("all")
public class BuilderParticipantForResourceSet extends BuilderParticipant {
  @Inject
  private ResourceDescriptionsProvider resourceDescriptionsProvider;
  
  @Inject
  private IContainer.Manager containerManager;
  
  @Inject(optional = true)
  private IGenerator2 generator;
  
  protected ThreadLocal<Boolean> buildSemaphor = new ThreadLocal<Boolean>();
  
  @Override
  public void build(final IXtextBuilderParticipant.IBuildContext context, final IProgressMonitor monitor) throws CoreException {
    this.buildSemaphor.set(Boolean.valueOf(false));
    super.build(context, monitor);
  }
  
  @Override
  public void handleChangedContents(final IResourceDescription.Delta delta, final IXtextBuilderParticipant.IBuildContext context, final IFileSystemAccess fileSystemAccess) {
    if (((!(this.buildSemaphor.get()).booleanValue()) && (this.generator != null))) {
      this.invokeGenerator(delta, context, fileSystemAccess);
    }
  }
  
  private void invokeGenerator(final IResourceDescription.Delta delta, final IXtextBuilderParticipant.IBuildContext context, final IFileSystemAccess fileSystemAccess) {
    this.buildSemaphor.set(Boolean.valueOf(true));
    final Resource resource = context.getResourceSet().getResource(delta.getUri(), true);
    resource.getContents().add(MFactory.eINSTANCE.createGame());
    boolean _shouldGenerate = this.shouldGenerate(resource, context);
    if (_shouldGenerate) {
      final IResourceDescriptions index = this.resourceDescriptionsProvider.createResourceDescriptions();
      final IResourceDescription resDesc = index.getResourceDescription(resource.getURI());
      final List<IContainer> visibleContainers = this.containerManager.getVisibleContainers(resDesc, index);
      for (final IContainer c : visibleContainers) {
        Iterable<IResourceDescription> _resourceDescriptions = c.getResourceDescriptions();
        for (final IResourceDescription rd : _resourceDescriptions) {
          {
            URI uri = rd.getURI();
            boolean _endsWith = uri.toString().endsWith(".text");
            if (_endsWith) {
              context.getResourceSet().getResource(uri, true);
            }
          }
        }
      }
      this.generator.doGenerate(resource, ((IFileSystemAccess2) fileSystemAccess), null);
    }
  }
}
