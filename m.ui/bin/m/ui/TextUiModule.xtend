/*
 * generated by Xtext
 */
package m.ui

import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor
import org.eclipse.xtext.builder.BuilderParticipant
import org.eclipse.xtext.builder.IXtextBuilderParticipant
import org.eclipse.xtext.builder.IXtextBuilderParticipant.IBuildContext
import org.eclipse.core.runtime.IProgressMonitor
import org.eclipse.core.runtime.CoreException
import java.nio.file.Paths
import java.net.URI
import java.io.File
import com.google.inject.Inject
import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider
import org.eclipse.xtext.resource.IContainer
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.resource.IResourceDescription.Delta
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.resource.IResourceDescriptions
import org.eclipse.xtext.resource.IResourceDescription
import java.util.List
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecore.EOperation
import org.eclipse.emf.common.util.EList
import java.lang.reflect.InvocationTargetException
import org.eclipse.emf.common.notify.Notification
import org.eclipse.emf.ecore.InternalEObject
import org.eclipse.emf.common.notify.NotificationChain
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.resource.Resource.Internal
import org.eclipse.emf.ecore.InternalEObject.EStore
import m.m.MFactory

/**
 * Use this class to register components to be used within the Eclipse IDE.
 */
@FinalFieldsConstructor
class TextUiModule extends AbstractTextUiModule 
{
	
	override bindIXtextBuilderParticipant() 
	{
		return BuilderParticipantForResourceSet;
	}
}

class BuilderParticipantForResourceSet extends BuilderParticipant {
  @Inject
  ResourceDescriptionsProvider resourceDescriptionsProvider;
 
  @Inject
  IContainer.Manager containerManager;
 
  @Inject (optional=true)
  IGenerator2 generator;
 
  protected ThreadLocal<Boolean> buildSemaphor = new ThreadLocal<Boolean>();
 
  override void build(IBuildContext context, IProgressMonitor monitor) throws CoreException {
    buildSemaphor.set(false);
    super.build(context, monitor);
  }
 
  override void handleChangedContents(Delta delta, IBuildContext context, IFileSystemAccess fileSystemAccess) {
    //super.handleChangedContents(delta, context, fileSystemAccess);
    if (!buildSemaphor.get() && generator !== null) {
      invokeGenerator(delta, context, fileSystemAccess);
    }
  }
 
	private def void invokeGenerator (Delta delta, IBuildContext context, IFileSystemAccess fileSystemAccess) 
	{
    	buildSemaphor.set(true);
       	val Resource resource = context.getResourceSet().getResource(delta.getUri(), true);
    	resource.contents.add(MFactory.eINSTANCE.createGame)
    	if (shouldGenerate(resource, context)) 
    	{
    		val IResourceDescriptions index = resourceDescriptionsProvider.createResourceDescriptions();
      		val IResourceDescription resDesc = index.getResourceDescription(resource.getURI());
      		val List<IContainer> visibleContainers = containerManager.getVisibleContainers(resDesc, index);
      		for (IContainer c : visibleContainers) 
      		{
          		for (IResourceDescription rd : c.getResourceDescriptions()) 
          		{
          			var uri = rd.getURI()
          			if ((uri.toString.endsWith('.text')))
          	  		{
          	  			context.getResourceSet().getResource(uri, true);
          	  		}
        		}
    		}
 			generator.doGenerate(resource, fileSystemAccess as IFileSystemAccess2, null);
    	}
  	}	
}
