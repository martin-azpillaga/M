on: push
jobs:
  format:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Check file extensions
        run: |
          find . -type f \
          -not -wholename "*.git*" -and \
          -not -name "*.md" -and \
          -not -name "*.yaml" -and \
          -not -name "*.gradle" -and \
          -not -name "*.java" -and \
          -not -name "*.json" -and \
          -not -name "*.js" -and \
          -not -name "*.xtext" -and \
          -not -name "*.mwe2" \
          -not -name "*.lock" \
          | grep "." && exit 1 || exit 0
      - name: Install node 12
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            checkstyle-8.34-all.jar
          key: format
      - name: Install linters
        run: |
          npm install markdownlint-cli
          npm install npm-groovy-lint
          npm install jsonlint
          npm install js-beautify
          npm install yaml-lint
          [ -f checkstyle-8.34-all.jar ] || wget https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.34/checkstyle-8.34-all.jar
      - name: Lint Markdown
        run: |
          npx markdownlint-cli -i LICENSE.md \
          -i node_modules \
          -i Documentation/index.md \
          -i Documentation/video.md \
          "**/*.md"
      - name: Lint Yaml
        run: |
          find . -not -wholename "*node_modules*" -name "*.yaml" -exec sh -c 'npx yamllint {}' \;
      - name: Lint Groovy
        run: |
          npx npm-groovy-lint -i "**/node_modules/**/*"
      - name: Lint Json
        run: |
          find . -not -wholename "*node_modules*" -name "*.json" -not -name "*local-storage.json" -exec sh -c 'npx jsonlint {} > current && cmp current {}' \; | grep differ && exit 1 || exit 0
      - name: Lint Javascript
        run: |
          find . -not -wholename "*node_modules*" -name "*.js" -exec sh -c 'npx js-beautify {} > current && cmp current {}' \; | grep differ && exit 1 || exit 0
      - name: Lint java
        run: |
          java -jar checkstyle-8.34-all.jar -c /sun_checks.xml Code/Language/m/src || exit 0
  structure:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Download repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle
            node_modules
          key: structure
      - name: Install java 13
        uses: actions/setup-java@v1
        with:
          java-version: '13'
      - name: Build language server
        working-directory: Code/Language
        run: |
          gradle shadowJar
          cd ~
          cd .gradle
          cd caches
          cd modules-2
          ls
      - name: Check Java and Javascript
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export SONAR_SCANNER_VERSION=4.2.0.1873
          export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
          curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          export PATH=$SONAR_SCANNER_HOME/bin:$PATH
          export SONAR_SCANNER_OPTS="-server"
          sonar-scanner \
          -Dsonar.organization=martin-azpillaga \
          -Dsonar.projectKey=martin-azpillaga_M \
          -Dsonar.sources=Tests,Code/Language/m/src,Code/Extension \
          -Dsonar.java.libraries=$HOME/.gradle/caches/modules-2/files-2.1 \
          -Dsonar.java.binaries=Code/Language/build/classes \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=c1285d7b6c459b50e7eee08102a94f4b68bd70f9
      - name: Upload language server to github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ls
          path: Code/Language/build/libs/M.jar
  content:
    runs-on: ubuntu-latest
    needs: structure
    timeout-minutes: 15
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Build documentation
        run: |
          sudo npm install -g vuepress
          sudo npm install -g reveal-md
          cp -r Documentation ../Documentation
          git fetch
          git checkout gh-pages
          cp -r ../Documentation Documentation
          cd Documentation
          for f in **/*.md **/**/*.md
          do
              g=$(echo $f | tr '[:upper:]' '[:lower:]')
              g=$(echo $g | sed -e 's/[0-9]*\. //g' -e 's/ /-/g')
              echo $g
              mkdir -p ${g%/*}
              mv "$f" $g
          done
          sudo yarn add vuepress-theme-yuu
          sudo vuepress build
          cd ..
          cp -r Documentation/.vuepress/dist/* .
          reveal-md Documentation/slides.md --separator "\n\n" --static presentation
          sudo rm -rf Documentation/
          git config --global user.name "Github actions"
          git config --global user.email "media@azpillaga.world"  
          git add .
          git commit -m "Deploy vuepress site using Github actions"
          git push
          git reset --hard
          git checkout -
  reliability:
    needs: content
    runs-on: ubuntu-latest
    timeout-minutes: 100
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Download language server
        uses: actions/download-artifact@v2
        with:
          name: ls
      - name: Install node 10
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Install pandoc
        run: |
          sudo apt-get remove pandoc
          [ -f pandoc-2.9.1-1-amd64.deb ] || wget https://github.com/jgm/pandoc/releases/download/2.9.1/pandoc-2.9.1-1-amd64.deb
          sudo dpkg -i pandoc-2.9.1-1-amd64.deb
      - name: Install yarn and libx11
        run: |
          npm install -g yarn
          sudo apt-get install libx11-dev libxkbfile-dev
      - name: Build tests
        run: |
          pandoc README.md -t json | node Tests/reader.js > Tests/test.js
      - name: Build ide for browser
        working-directory: Tests
        run: |
          cp ../M.jar ls.jar
          yarn
          yarn theia build
      - name: Run tests
        working-directory: Tests
        run: |
          mkdir workspace
          yarn theia start --app-target browser workspace &
          Xvfb :3 &
          sleep 5 && xvfb-run yarn mocha test.js
  packaging:
    needs: reliability
    runs-on: ubuntu-latest
    timeout-minutes: 50
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Download language server
        uses: actions/download-artifact@v2
        with:
          name: ls
      - name: Move language server
        run: |
          mv M.jar Code/Extension/ls.jar
      - name: Install vsce
        run: |
          sudo npm install -g vsce
      - name: Package VSCode extension
        working-directory: Code/Extension
        run: |
          curl -o logo.png https://avatars2.githubusercontent.com/u/6147446?s=60&v=4
          cp ../../README.md README.md
          sudo npm install
          vsce package -o m.vsix
      - name: Upload VSCode extension to github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: m.vsix
          path: Code/Extension/m.vsix
  release:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: packaging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Download Extension
        uses: actions/download-artifact@v2
        with:
          name: m.vsix
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Tag ${{ github.ref }}
          release_name: Prerelease ${{ github.ref }}
          draft: true
          prerelease: true
      - name: Upload VSCode to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./m.vsix
          asset_name: m.vsix
          asset_content_type: text/text
