on: push
jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Lint Markdown
        run: npx markdownlint-cli -i LICENSE.md "**/*.md"
      - name: Lint Yaml
        run: |
          sudo apt-get install yamllint
          yamllint -d relaxed .
      - name: Install node 12
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Lint Groovy
        run: |
          npx npm-groovy-lint .
      - name: Lint Json
        run: |
          find . -name "*.json" -and -not -name "*local-storage.json" -exec sh -c 'npx jsonlint {} > current && cmp current {}' \; | grep differ && exit 1 || exit 0
      - name: Lint Javascript
        run: |
          find . -name "*.js" -exec sh -c 'npx js-beautify {} > current && cmp current {}' \; | grep differ && exit 1 || exit 0
      - name: Checkstyle
        run: |
          wget https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.34/checkstyle-8.34-all.jar
          java -jar checkstyle-8.34-all.jar -c /sun_checks.xml Code/Language/m/src
      - name: Check other files
        run: |
          find . -type f \
          -not -name "*.md" -and \
          -not -name "*.yaml" -and \
          -not -name "*.java" -and \
          -not -name "*.json" -and \
          -not -name "*.js" -and \
          -not -name "*.xtext" -and \
          -not -name "*.mwe2" \
          | grep "." && exit 1 || exit 0
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Install java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build language server
        working-directory: Code/Language
        run: |
          mkdir m.ide m.ui
          gradle shadowJar
          cp build/libs/Language-ls-ls.jar ../Editor/ls.jar
      - name: Lint Java
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export SONAR_SCANNER_VERSION=4.2.0.1873
          export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
          curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          export PATH=$SONAR_SCANNER_HOME/bin:$PATH
          export SONAR_SCANNER_OPTS="-server"
          sonar-scanner \
          -Dsonar.organization=martin-azpillaga \
          -Dsonar.projectKey=martin-azpillaga_M \
          -Dsonar.sources=Code/Editor,Code/Language/m/src \
          -Dsonar.java.binaries=Code/Language/build/classes \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=c1285d7b6c459b50e7eee08102a94f4b68bd70f9 \
          -Dsonar.branch.name=feature
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Install java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build language server
        working-directory: Code/Language
        run: |
          mkdir m.ide m.ui
          gradle shadowJar
          cp build/libs/Language-ls-ls.jar ../Editor/ls.jar
      - name: Install python 2.7
        run: |
          sudo apt-get install python2.7
      - name: Install pandoc
        run: |
          sudo apt-get remove pandoc
          wget https://github.com/jgm/pandoc/releases/download/2.9.1/pandoc-2.9.1-1-amd64.deb
          sudo dpkg -i pandoc-2.9.1-1-amd64.deb
      - name: Build documentation
        run: |
          find . -name "*.md" | sort | xargs -d "\n" pandoc > Code/Editor/Documentation.html
      - name: Upload Code/Editor folder to github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: editor
          path: Code/Editor
  test:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 100
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Download Editor folder
        uses: actions/download-artifact@v2
        with:
          name: editor
      - name: Download IDE folder
        uses: actions/download-artifact@v2
        with:
          name: editor
      - name: Install node 10
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Install yarn and libx11
        run: |
          npm install -g yarn
          sudo apt-get install libx11-dev libxkbfile-dev
      - name: Build ide for browser
        run: |
          yarn buildBrowser
      - name: Install python 2.7
        run: |
          sudo apt-get install python2.7
      - name: Install pandoc
        run: |
          sudo apt-get remove pandoc
          wget https://github.com/jgm/pandoc/releases/download/2.9.1/pandoc-2.9.1-1-amd64.deb
          sudo dpkg -i pandoc-2.9.1-1-amd64.deb
      - name: Build tests
        run: |
          pandoc README.md -t json | node Quality/reader.js > Code/Editor/test.js
      - name: Run tests
        working-directory: Code/Editor
        run: |
          cp ../../Quality/mobot.js mobot.js
          mkdir workspace
          yarn startBrowser workspace &> serverLog &
          Xvfb :3 &
          sleep 5 && xvfb-run yarn test
  packageWindows:
    needs: test
    runs-on: windows-latest
    timeout-minutes: 100
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '2.x'
      - name: Download Editor folder
        uses: actions/download-artifact@v2
        with:
          name: editor
      - name: Install node 10
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.0
      - name: Build Editor for electron
        run: |
          npm config set python python2.7
          npm install -g yarn
          yarn buildElectron
      - name: Package application
        run: |
          npm install -g electron-builder
          electron-builder .
      - name: Upload Exe
        if: ${{ matrix.os }} == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: "dist/m 0.0.0.exe"
  packageUbuntu:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 100
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '2.x'
      - name: Download the editor folder
        uses: actions/download-artifact@v2
        with:
          name: editor
      - name: Install node 10
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Build Editor for electron
        run: |
          npm config set python python2.7
          npm install -g yarn
          yarn buildElectron
      - name: Package application
        run: |
          npm install -g electron-builder
          electron-builder .
      - name: Upload AppImage
        if: ${{ matrix.os }} == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: dist/m-0.0.0.AppImage
  release:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [packageUbuntu, packageWindows]
    runs-on: ubuntu-latest
    timeout-minutes: 50
    steps:
      - name: Download AppImage
        uses: actions/download-artifact@v2
        with:
          name: linux
      - name: Download Exe
        uses: actions/download-artifact@v2
        with:
          name: windows
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Tag ${{ github.ref }}
          release_name: Prerelease ${{ github.ref }}
          draft: true
          prerelease: true
      - name: Upload appimage to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./m-0.0.0.AppImage
          asset_name: m.AppImage
          asset_content_type: text/text
      - name: Upload exe to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./m 0.0.0.exe
          asset_name: m.exe
          asset_content_type: text/text
