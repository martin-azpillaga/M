on: push
jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Lint Markdown
        run: npx markdownlint-cli -i LICENSE.md "**/*.md"
      - name: Lint Yaml
        run: |
          sudo apt install yamllint
          yamllint -d relaxed .
      - name: Install node 12
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Lint Groovy
        run: |
          npx npm-groovy-lint .
      - name: Lint Json
        run: |
          find . -name "*.json" -exec npx jsonlint {} \;
      - name: Install java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build language server
        working-directory: Code/Language
        run: |
          mkdir m.ide m.ui
          gradle shadowJar
          cp build/libs/Language-ls-ls.jar ../IDE/ls.jar
      - name: Lint Java
        run: |
          cat >sonar-project.properties <<EOL
          sonar.organization=martin-azpillaga
          sonar.projectKey=martin-azpillaga_M
          sonar.sources=.
          sonar.language=java
          sonar.java.binaries=Code/Language/build/classes
          EOL
      - name: Trigger sonarcloud inspection
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Lint Javascript
        run: |
          npx eslint -c .github/workflows/.eslintrc.json .
      - name: Check other files
        run: |
          find . -name -type f -not -name "*.md" -and \
          -not -name "*.yaml" -and \
          -not -name "*.java" -and \
          -not -name "*.json" -and \
          -not -name "*.js" -and \
          -not -name "*.xtext" -and \
          -not -name "*.mwe2"
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Install python 2.7
        run: |
          python --version
          sudo apt install python2.7
          python --version
      - name: Install java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build language server
        working-directory: Code/Language
        run: |
          mkdir m.ide m.ui
          gradle shadowJar
          cp build/libs/Language-ls-ls.jar ../IDE/ls.jar
      - name: Install pandoc 2.9
        run: |
          sudo apt remove pandoc
          wget https://github.com/jgm/pandoc/releases/download/2.9.1/pandoc-2.9.1-1-amd64.deb
          sudo dpkg -i pandoc-2.9.1-1-amd64.deb
      - name: Build documentation
        run: |
          find . -name "*.md" | sort | xargs -d "\n" pandoc > Code/IDE/Documentation.html
      - name: Upload Code/Editor folder to github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: editor
          path: Code/Editor
  test:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 100
    steps:
      - name: Download IDE folder
        uses: actions/download-artifact@v2
        with:
          name: editor
      - name: Install node 10
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Install yarn and libx11
        run: |
          npm install -g yarn
          sudo apt install libx11-dev libxkbfile-dev
      - name: Build ide for browser
        working-directory: Code/IDE
        run: |
          yarn buildBrowser
      - name: Build tests
        run: |
          pandoc README.md -t json | node Automation/reader.js > Code/IDE/test.js
      - name: Run tests
        working-directory: Code/IDE
        run: |
          cp ../Language/build/libs/Language-ls-ls.jar ../../ls.jar
          cp ../../Automation/mobot.js mobot.js
          mkdir workspace
          yarn startBrowser workspace &> serverLog &
          Xvfb :3 &
          sleep 5 && xvfb-run yarn test
  packageWindows:
    needs: test
    runs-on: windows-latest
    timeout-minutes: 100
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '2.x'
      - name: Download IDE folder
        uses: actions/download-artifact@v2
        with:
          name: editor
      - name: Install node 10
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.0
      - name: Build IDE for electron
        run: |
          npm config set python python2.7
          npm install -g yarn
          yarn buildElectron
      - name: Package application
        run: |
          npm install -g electron-builder
          electron-builder .
      - name: Upload Exe
        if: ${{ matrix.os }} == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: "dist/m 0.0.0.exe"
  packageUbuntu:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 100
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '2.x'
      - name: Download the editor folder
        uses: actions/download-artifact@v2
        with:
          name: editor
      - name: Install node 10
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Build IDE for electron
        run: |
          npm config set python python2.7
          npm install -g yarn
          yarn buildElectron
      - name: Package application
        run: |
          npm install -g electron-builder
          electron-builder .
      - name: Upload AppImage
        if: ${{ matrix.os }} == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: dist/m-0.0.0.AppImage
  release:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [packageUbuntu, packageWindows]
    runs-on: ubuntu-latest
    timeout-minutes: 50
    steps:
      - name: Download AppImage
        uses: actions/download-artifact@v2
        with:
          name: linux
      - name: Download Exe
        uses: actions/download-artifact@v2
        with:
          name: windows
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Tag ${{ github.ref }}
          release_name: Prerelease ${{ github.ref }}
          draft: true
          prerelease: true
      - name: Upload appimage to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./m-0.0.0.AppImage
          asset_name: m.AppImage
          asset_content_type: text/text
      - name: Upload exe to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./m 0.0.0.exe
          asset_name: m.exe
          asset_content_type: text/text
