on: push
jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Lint Markdown
        run: npx markdownlint-cli -i LICENSE.md "**/*.md"
      - name: Lint Yaml
        run: |
          sudo apt install yamllint
          yamllint -d relaxed .
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Download repository
        uses: actions/checkout@v2
      - name: Install java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build language server
        working-directory: Code/Language
        run: |
          mkdir m.ide m.ui
          gradle shadowJar
      - name: Install pandoc 2.9
        run: |
          sudo apt remove pandoc
          wget https://github.com/jgm/pandoc/releases/download/2.9.1/pandoc-2.9.1-1-amd64.deb
          sudo dpkg -i pandoc-2.9.1-1-amd64.deb
      - name: Build Markdown
        run: |
          find . -name "*.md" | sort | xargs -d "\n" pandoc > Code/IDE/Documentation.html
      - name: Upload IDE folder as github artifact
        uses: actions/upload-artifact@v2
        with:
          name: ide
          path: Code/IDE
      - name: Install node 10
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Install yarn and libx11
        run: |
          npm install -g yarn
          sudo apt install libx11-dev libxkbfile-dev
      - name: Build theia for browser
        working-directory: Code/IDE
        run: |
          yarn buildBrowser
      - name: Build tests inferred from documentation
        run: |
          pandoc README.md -t json | node Automation/reader.js > Code/IDE/test.js
      - name: Move language server to root folder for testing with browser
        run: cp Code/Language/build/libs/Code-ls-ls.jar ls.jar
      - name: Run tests
        working-directory: Code/IDE
        run: |
          mkdir workspace
          yarn startBrowser workspace &> serverLog &
          Xvfb :3 &
          sleep 5 && xvfb-run yarn test
  package:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    timeout-minutes: 100
    steps:
      - name: Download theia folder
        uses: actions/download-artifact@v2
        with:
          name: ide
      - name: Unzip theia
        run: |
          unzip ide.zip
      - name: Install node 10
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Build theia for electron
        run: |
          npm install -g yarn
          yarn
          yarn update-m-extension
          yarn buildElectron
      - name: Package application
        run: |
          npm install -g electron-builder
          electron-builder .
      - name: Upload AppImage
        if: ${{ matrix.os }} == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: dist/m-0.0.0.AppImage
      - name: Upload Exe
        if: ${{ matrix.os }} == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: "dist/m 0.0.0.exe"
  release:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: package
    runs-on: ubuntu-latest
    timeout-minutes: 50
    steps:
      - name: Download AppImage
        uses: actions/download-artifact@v2
        with:
          name: linux
      - name: Download Exe
        uses: actions/download-artifact@v2
        with:
          name: windows
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Tag ${{ github.ref }}
          release_name: Prerelease ${{ github.ref }}
          draft: true
          prerelease: true
      - name: Upload appimage to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./m-0.0.0.AppImage
          asset_name: m.AppImage
          asset_content_type: text/text
      - name: Upload exe to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./m 0.0.0.exe
          asset_name: m.exe
          asset_content_type: text/text
