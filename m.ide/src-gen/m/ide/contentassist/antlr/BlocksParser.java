/*
 * generated by Xtext
 */
package m.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import m.ide.contentassist.antlr.internal.InternalBlocksParser;
import m.services.BlocksGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BlocksParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BlocksGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BlocksGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives_3(), "rule__Element__Alternatives_3");
			builder.put(grammarAccess.getElementAccess().getAlternatives_3_1_1(), "rule__Element__Alternatives_3_1_1");
			builder.put(grammarAccess.getTextAccess().getAlternatives(), "rule__Text__Alternatives");
			builder.put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
			builder.put(grammarAccess.getElementAccess().getGroup_3_1(), "rule__Element__Group_3_1__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getFileAccess().getElementsAssignment(), "rule__File__ElementsAssignment");
			builder.put(grammarAccess.getElementAccess().getOpenAssignment_1(), "rule__Element__OpenAssignment_1");
			builder.put(grammarAccess.getElementAccess().getAttributesAssignment_2(), "rule__Element__AttributesAssignment_2");
			builder.put(grammarAccess.getElementAccess().getElementsAssignment_3_1_1_0(), "rule__Element__ElementsAssignment_3_1_1_0");
			builder.put(grammarAccess.getElementAccess().getTextAssignment_3_1_1_1(), "rule__Element__TextAssignment_3_1_1_1");
			builder.put(grammarAccess.getElementAccess().getCloseAssignment_3_1_3(), "rule__Element__CloseAssignment_3_1_3");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getValueAssignment_2(), "rule__Attribute__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BlocksGrammarAccess grammarAccess;

	@Override
	protected InternalBlocksParser createParser() {
		InternalBlocksParser result = new InternalBlocksParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WHITE_SPACE" };
	}

	public BlocksGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BlocksGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
