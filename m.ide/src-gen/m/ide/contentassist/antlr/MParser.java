/*
 * generated by Xtext
 */
package m.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import m.ide.contentassist.antlr.internal.InternalMParser;
import m.services.MGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGameAccess().getAlternatives(), "rule__Game__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getPrimaryBAccess().getAlternatives(), "rule__PrimaryB__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getAlternatives_1_0(), "rule__Addition__Alternatives_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0(), "rule__Multiplication__Alternatives_1_0");
			builder.put(grammarAccess.getBitwiseAccess().getOpAlternatives_1_1_0(), "rule__Bitwise__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getUnaryAccess().getAlternatives(), "rule__Unary__Alternatives");
			builder.put(grammarAccess.getUnaryAccess().getAlternatives_1_1(), "rule__Unary__Alternatives_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getRelationTypeAccess().getAlternatives(), "rule__RelationType__Alternatives");
			builder.put(grammarAccess.getAssignmentTypeAccess().getAlternatives(), "rule__AssignmentType__Alternatives");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_1(), "rule__Entity__Group_1__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_3(), "rule__Entity__Group_3__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_3_1(), "rule__Entity__Group_3_1__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_5(), "rule__Entity__Group_5__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup_1(), "rule__Loop__Group_1__0");
			builder.put(grammarAccess.getBranchAccess().getGroup(), "rule__Branch__Group__0");
			builder.put(grammarAccess.getBranchAccess().getGroup_2(), "rule__Branch__Group_2__0");
			builder.put(grammarAccess.getBranchAccess().getGroup_3(), "rule__Branch__Group_3__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
			builder.put(grammarAccess.getCallAccess().getGroup_3(), "rule__Call__Group_3__0");
			builder.put(grammarAccess.getAccessAccess().getGroup(), "rule__Access__Group__0");
			builder.put(grammarAccess.getAccessAccess().getGroup_1(), "rule__Access__Group_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getExpression1Access().getGroup(), "rule__Expression1__Group__0");
			builder.put(grammarAccess.getExpression1Access().getGroup_1(), "rule__Expression1__Group_1__0");
			builder.put(grammarAccess.getPrimaryBAccess().getGroup_1(), "rule__PrimaryB__Group_1__0");
			builder.put(grammarAccess.getAtomicBAccess().getGroup(), "rule__AtomicB__Group__0");
			builder.put(grammarAccess.getAtomicBAccess().getGroup_1(), "rule__AtomicB__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1_0_0(), "rule__Addition__Group_1_0_0__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1_0_1(), "rule__Addition__Group_1_0_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1_0_0(), "rule__Multiplication__Group_1_0_0__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1_0_1(), "rule__Multiplication__Group_1_0_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1_0_2(), "rule__Multiplication__Group_1_0_2__0");
			builder.put(grammarAccess.getBitwiseAccess().getGroup(), "rule__Bitwise__Group__0");
			builder.put(grammarAccess.getBitwiseAccess().getGroup_1(), "rule__Bitwise__Group_1__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup_0(), "rule__Unary__Group_0__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup_1(), "rule__Unary__Group_1__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup_1_1_0(), "rule__Unary__Group_1_1_0__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup_1_1_1(), "rule__Unary__Group_1_1_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
			builder.put(grammarAccess.getGameAccess().getEntitiesAssignment_0(), "rule__Game__EntitiesAssignment_0");
			builder.put(grammarAccess.getGameAccess().getSystemsAssignment_1(), "rule__Game__SystemsAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_0(), "rule__Entity__NameAssignment_0");
			builder.put(grammarAccess.getEntityAccess().getBaseAssignment_1_1(), "rule__Entity__BaseAssignment_1_1");
			builder.put(grammarAccess.getEntityAccess().getComponentsAssignment_3_0(), "rule__Entity__ComponentsAssignment_3_0");
			builder.put(grammarAccess.getEntityAccess().getComponentsAssignment_3_1_1(), "rule__Entity__ComponentsAssignment_3_1_1");
			builder.put(grammarAccess.getEntityAccess().getEntitiesAssignment_5_1(), "rule__Entity__EntitiesAssignment_5_1");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_0(), "rule__Component__NameAssignment_0");
			builder.put(grammarAccess.getComponentAccess().getValueAssignment_1(), "rule__Component__ValueAssignment_1");
			builder.put(grammarAccess.getVectorAccess().getNumbersAssignment(), "rule__Vector__NumbersAssignment");
			builder.put(grammarAccess.getWordAccess().getValuesAssignment(), "rule__Word__ValuesAssignment");
			builder.put(grammarAccess.getSystemAccess().getNameAssignment_0(), "rule__System__NameAssignment_0");
			builder.put(grammarAccess.getSystemAccess().getCommandsAssignment_2(), "rule__System__CommandsAssignment_2");
			builder.put(grammarAccess.getLoopAccess().getEntityAssignment_0(), "rule__Loop__EntityAssignment_0");
			builder.put(grammarAccess.getLoopAccess().getConstraintsAssignment_1_1(), "rule__Loop__ConstraintsAssignment_1_1");
			builder.put(grammarAccess.getLoopAccess().getCommandsAssignment_3(), "rule__Loop__CommandsAssignment_3");
			builder.put(grammarAccess.getBranchAccess().getIfAssignment_1(), "rule__Branch__IfAssignment_1");
			builder.put(grammarAccess.getBranchAccess().getElseIfsAssignment_2_1(), "rule__Branch__ElseIfsAssignment_2_1");
			builder.put(grammarAccess.getBranchAccess().getCommandsAssignment_3_1(), "rule__Branch__CommandsAssignment_3_1");
			builder.put(grammarAccess.getConditionAccess().getConditionAssignment_0(), "rule__Condition__ConditionAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getCommandsAssignment_2(), "rule__Condition__CommandsAssignment_2");
			builder.put(grammarAccess.getAssignmentAccess().getAccessAssignment_0(), "rule__Assignment__AccessAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getTypeAssignment_1(), "rule__Assignment__TypeAssignment_1");
			builder.put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
			builder.put(grammarAccess.getCallAccess().getNameAssignment_0(), "rule__Call__NameAssignment_0");
			builder.put(grammarAccess.getCallAccess().getParametersAssignment_2(), "rule__Call__ParametersAssignment_2");
			builder.put(grammarAccess.getCallAccess().getParametersAssignment_3_1(), "rule__Call__ParametersAssignment_3_1");
			builder.put(grammarAccess.getAccessAccess().getNamesAssignment_0(), "rule__Access__NamesAssignment_0");
			builder.put(grammarAccess.getAccessAccess().getNamesAssignment_1_1(), "rule__Access__NamesAssignment_1_1");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
			builder.put(grammarAccess.getExpression1Access().getRightAssignment_1_2(), "rule__Expression1__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryBAccess().getExpressionAssignment_1_2(), "rule__PrimaryB__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getAtomicBAccess().getTypeAssignment_1_1(), "rule__AtomicB__TypeAssignment_1_1");
			builder.put(grammarAccess.getAtomicBAccess().getRightAssignment_1_2(), "rule__AtomicB__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
			builder.put(grammarAccess.getBitwiseAccess().getOpAssignment_1_1(), "rule__Bitwise__OpAssignment_1_1");
			builder.put(grammarAccess.getBitwiseAccess().getRightAssignment_1_2(), "rule__Bitwise__RightAssignment_1_2");
			builder.put(grammarAccess.getUnaryAccess().getExpressionAssignment_0_2(), "rule__Unary__ExpressionAssignment_0_2");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_2_2(), "rule__Primary__ExpressionAssignment_2_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MGrammarAccess grammarAccess;

	@Override
	protected InternalMParser createParser() {
		InternalMParser result = new InternalMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WHITE_SPACE" };
	}

	public MGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
