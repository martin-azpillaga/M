/*
 * generated by Xtext
 */
package m.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import m.ide.contentassist.antlr.internal.InternalJsonParser;
import m.services.JsonGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class JsonParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JsonGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JsonGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
			builder.put(grammarAccess.getObjectAccess().getGroup_2(), "rule__Object__Group_2__0");
			builder.put(grammarAccess.getObjectAccess().getGroup_2_1(), "rule__Object__Group_2_1__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
			builder.put(grammarAccess.getArrayAccess().getGroup_2(), "rule__Array__Group_2__0");
			builder.put(grammarAccess.getArrayAccess().getGroup_2_1(), "rule__Array__Group_2_1__0");
			builder.put(grammarAccess.getObjectAccess().getFieldsAssignment_2_0(), "rule__Object__FieldsAssignment_2_0");
			builder.put(grammarAccess.getObjectAccess().getFieldsAssignment_2_1_1(), "rule__Object__FieldsAssignment_2_1_1");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
			builder.put(grammarAccess.getFieldAccess().getValueAssignment_2(), "rule__Field__ValueAssignment_2");
			builder.put(grammarAccess.getArrayAccess().getElementsAssignment_2_0(), "rule__Array__ElementsAssignment_2_0");
			builder.put(grammarAccess.getArrayAccess().getElementsAssignment_2_1_1(), "rule__Array__ElementsAssignment_2_1_1");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
			builder.put(grammarAccess.getFloatValueAccess().getValueAssignment(), "rule__FloatValue__ValueAssignment");
			builder.put(grammarAccess.getLongValueAccess().getValueAssignment(), "rule__LongValue__ValueAssignment");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JsonGrammarAccess grammarAccess;

	@Override
	protected InternalJsonParser createParser() {
		InternalJsonParser result = new InternalJsonParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WHITE_SPACE" };
	}

	public JsonGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JsonGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
