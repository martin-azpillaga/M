/*
 * generated by Xtext
 */
package m.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import m.ide.contentassist.antlr.internal.InternalCSParser;
import m.services.CSGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CSParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CSGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CSGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMemberAccess().getValueAlternatives_3_0(), "rule__Member__ValueAlternatives_3_0");
			builder.put(grammarAccess.getMethodAccess().getAlternatives_2(), "rule__Method__Alternatives_2");
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getAssignmentAccess().getAlternatives_0(), "rule__Assignment__Alternatives_0");
			builder.put(grammarAccess.getAssignmentAccess().getAlternatives_2(), "rule__Assignment__Alternatives_2");
			builder.put(grammarAccess.getPortionAccess().getAlternatives(), "rule__Portion__Alternatives");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getBoolean2Access().getAlternatives(), "rule__Boolean2__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getAlternatives_1_0(), "rule__Addition__Alternatives_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0(), "rule__Multiplication__Alternatives_1_0");
			builder.put(grammarAccess.getBitwiseAccess().getOpAlternatives_1_1_0(), "rule__Bitwise__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getUnaryAccess().getAlternatives_1(), "rule__Unary__Alternatives_1");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getTypeEnumAccess().getAlternatives(), "rule__TypeEnum__Alternatives");
			builder.put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
			builder.put(grammarAccess.getRelationTypeAccess().getAlternatives(), "rule__RelationType__Alternatives");
			builder.put(grammarAccess.getAssignmentTypeAccess().getAlternatives(), "rule__AssignmentType__Alternatives");
			builder.put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
			builder.put(grammarAccess.getUsingAccess().getGroup(), "rule__Using__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_3(), "rule__Type__Group_3__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_3_2(), "rule__Type__Group_3_2__0");
			builder.put(grammarAccess.getMemberAccess().getGroup(), "rule__Member__Group__0");
			builder.put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
			builder.put(grammarAccess.getAnnotationAccess().getGroup_2(), "rule__Annotation__Group_2__0");
			builder.put(grammarAccess.getAnnotationAccess().getGroup_2_2(), "rule__Annotation__Group_2_2__0");
			builder.put(grammarAccess.getTypeNameAccess().getGroup(), "rule__TypeName__Group__0");
			builder.put(grammarAccess.getTypeNameAccess().getGroup_1(), "rule__TypeName__Group_1__0");
			builder.put(grammarAccess.getTypeNameAccess().getGroup_1_2(), "rule__TypeName__Group_1_2__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
			builder.put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_2_1(), "rule__Method__Group_2_1__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_4(), "rule__Method__Group_4__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_4_2(), "rule__Method__Group_4_2__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_6(), "rule__Method__Group_6__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_6_1(), "rule__Method__Group_6_1__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_3(), "rule__Command__Group_3__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_4(), "rule__Command__Group_4__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup_2_0(), "rule__Assignment__Group_2_0__0");
			builder.put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
			builder.put(grammarAccess.getAccessAccess().getGroup(), "rule__Access__Group__0");
			builder.put(grammarAccess.getAccessAccess().getGroup_3(), "rule__Access__Group_3__0");
			builder.put(grammarAccess.getPortionAccess().getGroup_0(), "rule__Portion__Group_0__0");
			builder.put(grammarAccess.getPortionAccess().getGroup_1(), "rule__Portion__Group_1__0");
			builder.put(grammarAccess.getPortionAccess().getGroup_1_2(), "rule__Portion__Group_1_2__0");
			builder.put(grammarAccess.getPortionAccess().getGroup_1_4(), "rule__Portion__Group_1_4__0");
			builder.put(grammarAccess.getPortionAccess().getGroup_1_4_1(), "rule__Portion__Group_1_4_1__0");
			builder.put(grammarAccess.getPortionAccess().getGroup_2(), "rule__Portion__Group_2__0");
			builder.put(grammarAccess.getPortionAccess().getGroup_2_3(), "rule__Portion__Group_2_3__0");
			builder.put(grammarAccess.getPortionAccess().getGroup_2_3_1(), "rule__Portion__Group_2_3_1__0");
			builder.put(grammarAccess.getPortionAccess().getGroup_3(), "rule__Portion__Group_3__0");
			builder.put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getElseIfAccess().getGroup(), "rule__ElseIf__Group__0");
			builder.put(grammarAccess.getElseAccess().getGroup(), "rule__Else__Group__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
			builder.put(grammarAccess.getInitializeVariableAccess().getGroup(), "rule__InitializeVariable__Group__0");
			builder.put(grammarAccess.getLambdaAccess().getGroup(), "rule__Lambda__Group__0");
			builder.put(grammarAccess.getLambdaAccess().getGroup_3(), "rule__Lambda__Group_3__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_0_0(), "rule__Expression__Group_0_0__0");
			builder.put(grammarAccess.getBoolean0Access().getGroup(), "rule__Boolean0__Group__0");
			builder.put(grammarAccess.getBoolean0Access().getGroup_1(), "rule__Boolean0__Group_1__0");
			builder.put(grammarAccess.getBoolean1Access().getGroup(), "rule__Boolean1__Group__0");
			builder.put(grammarAccess.getBoolean1Access().getGroup_1(), "rule__Boolean1__Group_1__0");
			builder.put(grammarAccess.getBoolean2Access().getGroup_1(), "rule__Boolean2__Group_1__0");
			builder.put(grammarAccess.getBoolean4Access().getGroup(), "rule__Boolean4__Group__0");
			builder.put(grammarAccess.getBoolean4Access().getGroup_1(), "rule__Boolean4__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1_0_0(), "rule__Addition__Group_1_0_0__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1_0_1(), "rule__Addition__Group_1_0_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1_0_0(), "rule__Multiplication__Group_1_0_0__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1_0_1(), "rule__Multiplication__Group_1_0_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1_0_2(), "rule__Multiplication__Group_1_0_2__0");
			builder.put(grammarAccess.getBitwiseAccess().getGroup(), "rule__Bitwise__Group__0");
			builder.put(grammarAccess.getBitwiseAccess().getGroup_1(), "rule__Bitwise__Group_1__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup(), "rule__Unary__Group__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup_1_0(), "rule__Unary__Group_1_0__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup_1_1(), "rule__Unary__Group_1_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getFileAccess().getUsingsAssignment_0(), "rule__File__UsingsAssignment_0");
			builder.put(grammarAccess.getFileAccess().getTypesAssignment_1(), "rule__File__TypesAssignment_1");
			builder.put(grammarAccess.getUsingAccess().getNameAssignment_1(), "rule__Using__NameAssignment_1");
			builder.put(grammarAccess.getQualifiedNameAccess().getNamesAssignment_0(), "rule__QualifiedName__NamesAssignment_0");
			builder.put(grammarAccess.getQualifiedNameAccess().getNamesAssignment_1_1(), "rule__QualifiedName__NamesAssignment_1_1");
			builder.put(grammarAccess.getTypeAccess().getSealedAssignment_0(), "rule__Type__SealedAssignment_0");
			builder.put(grammarAccess.getTypeAccess().getTypeAssignment_1(), "rule__Type__TypeAssignment_1");
			builder.put(grammarAccess.getTypeAccess().getNameAssignment_2(), "rule__Type__NameAssignment_2");
			builder.put(grammarAccess.getTypeAccess().getSuperTypesAssignment_3_1(), "rule__Type__SuperTypesAssignment_3_1");
			builder.put(grammarAccess.getTypeAccess().getSuperTypesAssignment_3_2_1(), "rule__Type__SuperTypesAssignment_3_2_1");
			builder.put(grammarAccess.getTypeAccess().getMembersAssignment_5(), "rule__Type__MembersAssignment_5");
			builder.put(grammarAccess.getMemberAccess().getAnnotationsAssignment_0(), "rule__Member__AnnotationsAssignment_0");
			builder.put(grammarAccess.getMemberAccess().getVisibilityAssignment_1(), "rule__Member__VisibilityAssignment_1");
			builder.put(grammarAccess.getMemberAccess().getStaticAssignment_2(), "rule__Member__StaticAssignment_2");
			builder.put(grammarAccess.getMemberAccess().getValueAssignment_3(), "rule__Member__ValueAssignment_3");
			builder.put(grammarAccess.getAnnotationAccess().getFunctionAssignment_1(), "rule__Annotation__FunctionAssignment_1");
			builder.put(grammarAccess.getAnnotationAccess().getParametersAssignment_2_1(), "rule__Annotation__ParametersAssignment_2_1");
			builder.put(grammarAccess.getAnnotationAccess().getParametersAssignment_2_2_1(), "rule__Annotation__ParametersAssignment_2_2_1");
			builder.put(grammarAccess.getTypeNameAccess().getNameAssignment_0(), "rule__TypeName__NameAssignment_0");
			builder.put(grammarAccess.getTypeNameAccess().getGenericsAssignment_1_1(), "rule__TypeName__GenericsAssignment_1_1");
			builder.put(grammarAccess.getTypeNameAccess().getGenericsAssignment_1_2_1(), "rule__TypeName__GenericsAssignment_1_2_1");
			builder.put(grammarAccess.getFieldAccess().getTypeAssignment_0(), "rule__Field__TypeAssignment_0");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
			builder.put(grammarAccess.getArgumentAccess().getAnnotationsAssignment_0(), "rule__Argument__AnnotationsAssignment_0");
			builder.put(grammarAccess.getArgumentAccess().getRefAssignment_1(), "rule__Argument__RefAssignment_1");
			builder.put(grammarAccess.getArgumentAccess().getTypeAssignment_2(), "rule__Argument__TypeAssignment_2");
			builder.put(grammarAccess.getArgumentAccess().getNameAssignment_3(), "rule__Argument__NameAssignment_3");
			builder.put(grammarAccess.getMethodAccess().getOverrideAssignment_1(), "rule__Method__OverrideAssignment_1");
			builder.put(grammarAccess.getMethodAccess().getTypeAssignment_2_0(), "rule__Method__TypeAssignment_2_0");
			builder.put(grammarAccess.getMethodAccess().getImplicitAssignment_2_1_0(), "rule__Method__ImplicitAssignment_2_1_0");
			builder.put(grammarAccess.getMethodAccess().getOperatorAssignment_2_1_1(), "rule__Method__OperatorAssignment_2_1_1");
			builder.put(grammarAccess.getMethodAccess().getNameAssignment_3(), "rule__Method__NameAssignment_3");
			builder.put(grammarAccess.getMethodAccess().getGenericsAssignment_4_1(), "rule__Method__GenericsAssignment_4_1");
			builder.put(grammarAccess.getMethodAccess().getGenericsAssignment_4_2_1(), "rule__Method__GenericsAssignment_4_2_1");
			builder.put(grammarAccess.getMethodAccess().getArgumentsAssignment_6_0(), "rule__Method__ArgumentsAssignment_6_0");
			builder.put(grammarAccess.getMethodAccess().getArgumentsAssignment_6_1_1(), "rule__Method__ArgumentsAssignment_6_1_1");
			builder.put(grammarAccess.getMethodAccess().getCommandsAssignment_9(), "rule__Method__CommandsAssignment_9");
			builder.put(grammarAccess.getAssignmentAccess().getVarAssignment_0_0(), "rule__Assignment__VarAssignment_0_0");
			builder.put(grammarAccess.getAssignmentAccess().getTypeAssignment_0_1(), "rule__Assignment__TypeAssignment_0_1");
			builder.put(grammarAccess.getAssignmentAccess().getAccessAssignment_1(), "rule__Assignment__AccessAssignment_1");
			builder.put(grammarAccess.getAssignmentAccess().getAssignmentTypeAssignment_2_0_0(), "rule__Assignment__AssignmentTypeAssignment_2_0_0");
			builder.put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2_0_1(), "rule__Assignment__ExpressionAssignment_2_0_1");
			builder.put(grammarAccess.getAssignmentAccess().getIncrementAssignment_2_1(), "rule__Assignment__IncrementAssignment_2_1");
			builder.put(grammarAccess.getAssignmentAccess().getDecrementAssignment_2_2(), "rule__Assignment__DecrementAssignment_2_2");
			builder.put(grammarAccess.getReturnAccess().getExpressionAssignment_1(), "rule__Return__ExpressionAssignment_1");
			builder.put(grammarAccess.getAccessAccess().getNewAssignment_0(), "rule__Access__NewAssignment_0");
			builder.put(grammarAccess.getAccessAccess().getRefAssignment_1(), "rule__Access__RefAssignment_1");
			builder.put(grammarAccess.getAccessAccess().getPortionsAssignment_2(), "rule__Access__PortionsAssignment_2");
			builder.put(grammarAccess.getAccessAccess().getPortionsAssignment_3_1(), "rule__Access__PortionsAssignment_3_1");
			builder.put(grammarAccess.getPortionAccess().getNameAssignment_0_1(), "rule__Portion__NameAssignment_0_1");
			builder.put(grammarAccess.getPortionAccess().getNameAssignment_1_1(), "rule__Portion__NameAssignment_1_1");
			builder.put(grammarAccess.getPortionAccess().getGenericsAssignment_1_2_1(), "rule__Portion__GenericsAssignment_1_2_1");
			builder.put(grammarAccess.getPortionAccess().getExpressionsAssignment_1_4_0(), "rule__Portion__ExpressionsAssignment_1_4_0");
			builder.put(grammarAccess.getPortionAccess().getExpressionsAssignment_1_4_1_1(), "rule__Portion__ExpressionsAssignment_1_4_1_1");
			builder.put(grammarAccess.getPortionAccess().getNameAssignment_2_1(), "rule__Portion__NameAssignment_2_1");
			builder.put(grammarAccess.getPortionAccess().getInitializationsAssignment_2_3_0(), "rule__Portion__InitializationsAssignment_2_3_0");
			builder.put(grammarAccess.getPortionAccess().getInitializationsAssignment_2_3_1_1(), "rule__Portion__InitializationsAssignment_2_3_1_1");
			builder.put(grammarAccess.getPortionAccess().getNameAssignment_3_1(), "rule__Portion__NameAssignment_3_1");
			builder.put(grammarAccess.getPortionAccess().getIndexAssignment_3_3(), "rule__Portion__IndexAssignment_3_3");
			builder.put(grammarAccess.getForAccess().getInitializationAssignment_3(), "rule__For__InitializationAssignment_3");
			builder.put(grammarAccess.getForAccess().getConditionAssignment_5(), "rule__For__ConditionAssignment_5");
			builder.put(grammarAccess.getForAccess().getIncrementAssignment_7(), "rule__For__IncrementAssignment_7");
			builder.put(grammarAccess.getForAccess().getCommandsAssignment_10(), "rule__For__CommandsAssignment_10");
			builder.put(grammarAccess.getIfAccess().getExpressionAssignment_3(), "rule__If__ExpressionAssignment_3");
			builder.put(grammarAccess.getIfAccess().getCommandsAssignment_6(), "rule__If__CommandsAssignment_6");
			builder.put(grammarAccess.getIfAccess().getElseIfsAssignment_8(), "rule__If__ElseIfsAssignment_8");
			builder.put(grammarAccess.getIfAccess().getElseAssignment_9(), "rule__If__ElseAssignment_9");
			builder.put(grammarAccess.getElseIfAccess().getExpressionAssignment_4(), "rule__ElseIf__ExpressionAssignment_4");
			builder.put(grammarAccess.getElseIfAccess().getCommandsAssignment_7(), "rule__ElseIf__CommandsAssignment_7");
			builder.put(grammarAccess.getElseAccess().getCommandsAssignment_3(), "rule__Else__CommandsAssignment_3");
			builder.put(grammarAccess.getWhileAccess().getExpressionAssignment_2(), "rule__While__ExpressionAssignment_2");
			builder.put(grammarAccess.getWhileAccess().getCommandsAssignment_5(), "rule__While__CommandsAssignment_5");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_3_1(), "rule__Atomic__ValueAssignment_3_1");
			builder.put(grammarAccess.getInitializeVariableAccess().getNameAssignment_0(), "rule__InitializeVariable__NameAssignment_0");
			builder.put(grammarAccess.getInitializeVariableAccess().getExpressionAssignment_2(), "rule__InitializeVariable__ExpressionAssignment_2");
			builder.put(grammarAccess.getLambdaAccess().getArgumentsAssignment_2(), "rule__Lambda__ArgumentsAssignment_2");
			builder.put(grammarAccess.getLambdaAccess().getArgumentsAssignment_3_1(), "rule__Lambda__ArgumentsAssignment_3_1");
			builder.put(grammarAccess.getLambdaAccess().getCommandsAssignment_7(), "rule__Lambda__CommandsAssignment_7");
			builder.put(grammarAccess.getExpressionAccess().getTypeAssignment_0_0_2(), "rule__Expression__TypeAssignment_0_0_2");
			builder.put(grammarAccess.getExpressionAccess().getExpressionAssignment_0_0_4(), "rule__Expression__ExpressionAssignment_0_0_4");
			builder.put(grammarAccess.getBoolean0Access().getRightAssignment_1_2(), "rule__Boolean0__RightAssignment_1_2");
			builder.put(grammarAccess.getBoolean1Access().getRightAssignment_1_2(), "rule__Boolean1__RightAssignment_1_2");
			builder.put(grammarAccess.getBoolean2Access().getExpressionAssignment_1_2(), "rule__Boolean2__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getBoolean4Access().getTypeAssignment_1_1(), "rule__Boolean4__TypeAssignment_1_1");
			builder.put(grammarAccess.getBoolean4Access().getRightAssignment_1_2(), "rule__Boolean4__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
			builder.put(grammarAccess.getBitwiseAccess().getOpAssignment_1_1(), "rule__Bitwise__OpAssignment_1_1");
			builder.put(grammarAccess.getBitwiseAccess().getRightAssignment_1_2(), "rule__Bitwise__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CSGrammarAccess grammarAccess;

	@Override
	protected InternalCSParser createParser() {
		InternalCSParser result = new InternalCSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CSGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
