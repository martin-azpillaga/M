/*
 * generated by Xtext
 */
package m.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import m.ide.contentassist.antlr.internal.InternalYAMLParser;
import m.services.YAMLGrammarAccess;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class YAMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(YAMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, YAMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getKeyValueListAccess().getValuesAlternatives_5_0(), "rule__KeyValueList__ValuesAlternatives_5_0");
			builder.put(grammarAccess.getKeyValueListAccess().getValuesAlternatives_6_3_0(), "rule__KeyValueList__ValuesAlternatives_6_3_0");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
			builder.put(grammarAccess.getFileAccess().getGroup_1(), "rule__File__Group_1__0");
			builder.put(grammarAccess.getFileAccess().getGroup_2(), "rule__File__Group_2__0");
			builder.put(grammarAccess.getDocumentAccess().getGroup(), "rule__Document__Group__0");
			builder.put(grammarAccess.getKeyValueAccess().getGroup(), "rule__KeyValue__Group__0");
			builder.put(grammarAccess.getMapAccess().getGroup(), "rule__Map__Group__0");
			builder.put(grammarAccess.getMapAccess().getGroup_5(), "rule__Map__Group_5__0");
			builder.put(grammarAccess.getKeyValueListAccess().getGroup(), "rule__KeyValueList__Group__0");
			builder.put(grammarAccess.getKeyValueListAccess().getGroup_6(), "rule__KeyValueList__Group_6__0");
			builder.put(grammarAccess.getElementAccess().getGroup_3(), "rule__Element__Group_3__0");
			builder.put(grammarAccess.getElementAccess().getGroup_4(), "rule__Element__Group_4__0");
			builder.put(grammarAccess.getElementAccess().getGroup_5(), "rule__Element__Group_5__0");
			builder.put(grammarAccess.getElementAccess().getGroup_6(), "rule__Element__Group_6__0");
			builder.put(grammarAccess.getInlineListAccess().getGroup(), "rule__InlineList__Group__0");
			builder.put(grammarAccess.getInlineListAccess().getGroup_2(), "rule__InlineList__Group_2__0");
			builder.put(grammarAccess.getInlineListAccess().getGroup_2_1(), "rule__InlineList__Group_2_1__0");
			builder.put(grammarAccess.getInlineMapAccess().getGroup(), "rule__InlineMap__Group__0");
			builder.put(grammarAccess.getInlineMapAccess().getGroup_2(), "rule__InlineMap__Group_2__0");
			builder.put(grammarAccess.getInlineMapAccess().getGroup_2_2(), "rule__InlineMap__Group_2_2__0");
			builder.put(grammarAccess.getInlineSemicolonListAccess().getGroup(), "rule__InlineSemicolonList__Group__0");
			builder.put(grammarAccess.getInlineSemicolonListAccess().getGroup_4(), "rule__InlineSemicolonList__Group_4__0");
			builder.put(grammarAccess.getFileAccess().getVersionAssignment_1_0(), "rule__File__VersionAssignment_1_0");
			builder.put(grammarAccess.getFileAccess().getTagsAssignment_1_2(), "rule__File__TagsAssignment_1_2");
			builder.put(grammarAccess.getFileAccess().getNodesAssignment_2_0(), "rule__File__NodesAssignment_2_0");
			builder.put(grammarAccess.getDocumentAccess().getTagAssignment_4(), "rule__Document__TagAssignment_4");
			builder.put(grammarAccess.getDocumentAccess().getIdAssignment_7(), "rule__Document__IdAssignment_7");
			builder.put(grammarAccess.getDocumentAccess().getValueAssignment_9(), "rule__Document__ValueAssignment_9");
			builder.put(grammarAccess.getKeyValueAccess().getKeyAssignment_0(), "rule__KeyValue__KeyAssignment_0");
			builder.put(grammarAccess.getKeyValueAccess().getValueAssignment_3(), "rule__KeyValue__ValueAssignment_3");
			builder.put(grammarAccess.getMapAccess().getKeyAssignment_0(), "rule__Map__KeyAssignment_0");
			builder.put(grammarAccess.getMapAccess().getBodyAssignment_4(), "rule__Map__BodyAssignment_4");
			builder.put(grammarAccess.getMapAccess().getBodyAssignment_5_1(), "rule__Map__BodyAssignment_5_1");
			builder.put(grammarAccess.getKeyValueListAccess().getNameAssignment_0(), "rule__KeyValueList__NameAssignment_0");
			builder.put(grammarAccess.getKeyValueListAccess().getValuesAssignment_5(), "rule__KeyValueList__ValuesAssignment_5");
			builder.put(grammarAccess.getKeyValueListAccess().getValuesAssignment_6_3(), "rule__KeyValueList__ValuesAssignment_6_3");
			builder.put(grammarAccess.getElementAccess().getValueAssignment_3_1(), "rule__Element__ValueAssignment_3_1");
			builder.put(grammarAccess.getElementAccess().getValueAssignment_4_1(), "rule__Element__ValueAssignment_4_1");
			builder.put(grammarAccess.getElementAccess().getValueAssignment_5_1(), "rule__Element__ValueAssignment_5_1");
			builder.put(grammarAccess.getElementAccess().getValueAssignment_6_1(), "rule__Element__ValueAssignment_6_1");
			builder.put(grammarAccess.getInlineListAccess().getElementsAssignment_2_0(), "rule__InlineList__ElementsAssignment_2_0");
			builder.put(grammarAccess.getInlineListAccess().getElementsAssignment_2_1_2(), "rule__InlineList__ElementsAssignment_2_1_2");
			builder.put(grammarAccess.getInlineMapAccess().getValuesAssignment_2_1(), "rule__InlineMap__ValuesAssignment_2_1");
			builder.put(grammarAccess.getInlineMapAccess().getValuesAssignment_2_2_2(), "rule__InlineMap__ValuesAssignment_2_2_2");
			builder.put(grammarAccess.getInlineSemicolonListAccess().getElementsAssignment_1(), "rule__InlineSemicolonList__ElementsAssignment_1");
			builder.put(grammarAccess.getInlineSemicolonListAccess().getElementsAssignment_3(), "rule__InlineSemicolonList__ElementsAssignment_3");
			builder.put(grammarAccess.getInlineSemicolonListAccess().getElementsAssignment_4_1(), "rule__InlineSemicolonList__ElementsAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private YAMLGrammarAccess grammarAccess;

	@Override
	protected InternalYAMLParser createParser() {
		InternalYAMLParser result = new InternalYAMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new YAMLTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public YAMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(YAMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
