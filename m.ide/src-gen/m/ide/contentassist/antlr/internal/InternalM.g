/*
 * generated by Xtext
 */
grammar InternalM;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package m.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package m.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import m.services.MGrammarAccess;

}
@parser::members {
	private MGrammarAccess grammarAccess;

	public void setGrammarAccess(MGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGame
entryRuleGame
:
{ before(grammarAccess.getGameRule()); }
	 ruleGame
{ after(grammarAccess.getGameRule()); } 
	 EOF 
;

// Rule Game
ruleGame 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameAccess().getAlternatives()); }
		(rule__Game__Alternatives)*
		{ after(grammarAccess.getGameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getGroup()); }
		(rule__Entity__Group__0)
		{ after(grammarAccess.getEntityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponent
entryRuleComponent
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentAccess().getGroup()); }
		(rule__Component__Group__0)
		{ after(grammarAccess.getComponentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVector
entryRuleVector
:
{ before(grammarAccess.getVectorRule()); }
	 ruleVector
{ after(grammarAccess.getVectorRule()); } 
	 EOF 
;

// Rule Vector
ruleVector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getVectorAccess().getNumbersAssignment()); }
			(rule__Vector__NumbersAssignment)
			{ after(grammarAccess.getVectorAccess().getNumbersAssignment()); }
		)
		(
			{ before(grammarAccess.getVectorAccess().getNumbersAssignment()); }
			(rule__Vector__NumbersAssignment)*
			{ after(grammarAccess.getVectorAccess().getNumbersAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWord
entryRuleWord
:
{ before(grammarAccess.getWordRule()); }
	 ruleWord
{ after(grammarAccess.getWordRule()); } 
	 EOF 
;

// Rule Word
ruleWord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getWordAccess().getValuesAssignment()); }
			(rule__Word__ValuesAssignment)
			{ after(grammarAccess.getWordAccess().getValuesAssignment()); }
		)
		(
			{ before(grammarAccess.getWordAccess().getValuesAssignment()); }
			(rule__Word__ValuesAssignment)*
			{ after(grammarAccess.getWordAccess().getValuesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSystem
entryRuleSystem
:
{ before(grammarAccess.getSystemRule()); }
	 ruleSystem
{ after(grammarAccess.getSystemRule()); } 
	 EOF 
;

// Rule System
ruleSystem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSystemAccess().getGroup()); }
		(rule__System__Group__0)
		{ after(grammarAccess.getSystemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBranch
entryRuleBranch
:
{ before(grammarAccess.getBranchRule()); }
	 ruleBranch
{ after(grammarAccess.getBranchRule()); } 
	 EOF 
;

// Rule Branch
ruleBranch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBranchAccess().getGroup()); }
		(rule__Branch__Group__0)
		{ after(grammarAccess.getBranchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCall
entryRuleCall
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallAccess().getGroup()); }
		(rule__Call__Group__0)
		{ after(grammarAccess.getCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAccess
entryRuleAccess
:
{ before(grammarAccess.getAccessRule()); }
	 ruleAccess
{ after(grammarAccess.getAccessRule()); } 
	 EOF 
;

// Rule Access
ruleAccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAccessAccess().getGroup()); }
		(rule__Access__Group__0)
		{ after(grammarAccess.getAccessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression1
entryRuleExpression1
:
{ before(grammarAccess.getExpression1Rule()); }
	 ruleExpression1
{ after(grammarAccess.getExpression1Rule()); } 
	 EOF 
;

// Rule Expression1
ruleExpression1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression1Access().getGroup()); }
		(rule__Expression1__Group__0)
		{ after(grammarAccess.getExpression1Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryB
entryRulePrimaryB
:
{ before(grammarAccess.getPrimaryBRule()); }
	 rulePrimaryB
{ after(grammarAccess.getPrimaryBRule()); } 
	 EOF 
;

// Rule PrimaryB
rulePrimaryB 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryBAccess().getAlternatives()); }
		(rule__PrimaryB__Alternatives)
		{ after(grammarAccess.getPrimaryBAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicB
entryRuleAtomicB
:
{ before(grammarAccess.getAtomicBRule()); }
	 ruleAtomicB
{ after(grammarAccess.getAtomicBRule()); } 
	 EOF 
;

// Rule AtomicB
ruleAtomicB 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicBAccess().getGroup()); }
		(rule__AtomicB__Group__0)
		{ after(grammarAccess.getAtomicBAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwise
entryRuleBitwise
:
{ before(grammarAccess.getBitwiseRule()); }
	 ruleBitwise
{ after(grammarAccess.getBitwiseRule()); } 
	 EOF 
;

// Rule Bitwise
ruleBitwise 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseAccess().getGroup()); }
		(rule__Bitwise__Group__0)
		{ after(grammarAccess.getBitwiseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnary
entryRuleUnary
:
{ before(grammarAccess.getUnaryRule()); }
	 ruleUnary
{ after(grammarAccess.getUnaryRule()); } 
	 EOF 
;

// Rule Unary
ruleUnary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryAccess().getAlternatives()); }
		(rule__Unary__Alternatives)
		{ after(grammarAccess.getUnaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RelationType
ruleRelationType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationTypeAccess().getAlternatives()); }
		(rule__RelationType__Alternatives)
		{ after(grammarAccess.getRelationTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AssignmentType
ruleAssignmentType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getAlternatives()); }
		(rule__AssignmentType__Alternatives)
		{ after(grammarAccess.getAssignmentTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getEntitiesAssignment_0()); }
		(rule__Game__EntitiesAssignment_0)
		{ after(grammarAccess.getGameAccess().getEntitiesAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getGameAccess().getSystemsAssignment_1()); }
		(rule__Game__SystemsAssignment_1)
		{ after(grammarAccess.getGameAccess().getSystemsAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getVectorParserRuleCall_0()); }
		ruleVector
		{ after(grammarAccess.getValueAccess().getVectorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getWordParserRuleCall_1()); }
		ruleWord
		{ after(grammarAccess.getValueAccess().getWordParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getLoopParserRuleCall_0()); }
		ruleLoop
		{ after(grammarAccess.getCommandAccess().getLoopParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getBranchParserRuleCall_1()); }
		ruleBranch
		{ after(grammarAccess.getCommandAccess().getBranchParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getAssignmentParserRuleCall_2()); }
		ruleAssignment
		{ after(grammarAccess.getCommandAccess().getAssignmentParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getCallParserRuleCall_3()); }
		ruleCall
		{ after(grammarAccess.getCommandAccess().getCallParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryB__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryBAccess().getAtomicBParserRuleCall_0()); }
		ruleAtomicB
		{ after(grammarAccess.getPrimaryBAccess().getAtomicBParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryBAccess().getGroup_1()); }
		(rule__PrimaryB__Group_1__0)
		{ after(grammarAccess.getPrimaryBAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
		(rule__Addition__Group_1_0_0__0)
		{ after(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
		(rule__Addition__Group_1_0_1__0)
		{ after(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
		(rule__Multiplication__Group_1_0_0__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
		(rule__Multiplication__Group_1_0_1__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
		(rule__Multiplication__Group_1_0_2__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseAccess().getOpAmpersandKeyword_1_1_0_0()); }
		'&'
		{ after(grammarAccess.getBitwiseAccess().getOpAmpersandKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBitwiseAccess().getOpVerticalLineKeyword_1_1_0_1()); }
		'|'
		{ after(grammarAccess.getBitwiseAccess().getOpVerticalLineKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBitwiseAccess().getOpCircumflexAccentKeyword_1_1_0_2()); }
		'^'
		{ after(grammarAccess.getBitwiseAccess().getOpCircumflexAccentKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getBitwiseAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_3()); }
		'<<'
		{ after(grammarAccess.getBitwiseAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getBitwiseAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_4()); }
		'>>'
		{ after(grammarAccess.getBitwiseAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAccess().getGroup_0()); }
		(rule__Unary__Group_0__0)
		{ after(grammarAccess.getUnaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryAccess().getGroup_1()); }
		(rule__Unary__Group_1__0)
		{ after(grammarAccess.getUnaryAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAccess().getGroup_1_1_0()); }
		(rule__Unary__Group_1_1_0__0)
		{ after(grammarAccess.getUnaryAccess().getGroup_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryAccess().getGroup_1_1_1()); }
		(rule__Unary__Group_1_1_1__0)
		{ after(grammarAccess.getUnaryAccess().getGroup_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getAccessParserRuleCall_0()); }
		ruleAccess
		{ after(grammarAccess.getPrimaryAccess().getAccessParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getCallParserRuleCall_1()); }
		ruleCall
		{ after(grammarAccess.getPrimaryAccess().getCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_2()); }
		(rule__Primary__Group_2__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationTypeAccess().getOverEnumLiteralDeclaration_0()); }
		('>')
		{ after(grammarAccess.getRelationTypeAccess().getOverEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationTypeAccess().getUnderEnumLiteralDeclaration_1()); }
		('<')
		{ after(grammarAccess.getRelationTypeAccess().getUnderEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationTypeAccess().getEqualEnumLiteralDeclaration_2()); }
		('=')
		{ after(grammarAccess.getRelationTypeAccess().getEqualEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationTypeAccess().getNotequalEnumLiteralDeclaration_3()); }
		('!=')
		{ after(grammarAccess.getRelationTypeAccess().getNotequalEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationTypeAccess().getOverorequalEnumLiteralDeclaration_4()); }
		('>=')
		{ after(grammarAccess.getRelationTypeAccess().getOverorequalEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationTypeAccess().getUnderorequalEnumLiteralDeclaration_5()); }
		('<=')
		{ after(grammarAccess.getRelationTypeAccess().getUnderorequalEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getSetEnumLiteralDeclaration_0()); }
		('=')
		{ after(grammarAccess.getAssignmentTypeAccess().getSetEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getIncreaseEnumLiteralDeclaration_1()); }
		('+=')
		{ after(grammarAccess.getAssignmentTypeAccess().getIncreaseEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getDecreaseEnumLiteralDeclaration_2()); }
		('-=')
		{ after(grammarAccess.getAssignmentTypeAccess().getDecreaseEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getMultiplyEnumLiteralDeclaration_3()); }
		('*=')
		{ after(grammarAccess.getAssignmentTypeAccess().getMultiplyEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getDivideEnumLiteralDeclaration_4()); }
		('/=')
		{ after(grammarAccess.getAssignmentTypeAccess().getDivideEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getModulusEnumLiteralDeclaration_5()); }
		('%=')
		{ after(grammarAccess.getAssignmentTypeAccess().getModulusEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getAndEnumLiteralDeclaration_6()); }
		('&=')
		{ after(grammarAccess.getAssignmentTypeAccess().getAndEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getOrEnumLiteralDeclaration_7()); }
		('|=')
		{ after(grammarAccess.getAssignmentTypeAccess().getOrEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getXorEnumLiteralDeclaration_8()); }
		('^=')
		{ after(grammarAccess.getAssignmentTypeAccess().getXorEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getShiftLeftEnumLiteralDeclaration_9()); }
		('<<=')
		{ after(grammarAccess.getAssignmentTypeAccess().getShiftLeftEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentTypeAccess().getShiftRightEnumLiteralDeclaration_10()); }
		('>>=')
		{ after(grammarAccess.getAssignmentTypeAccess().getShiftRightEnumLiteralDeclaration_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__0__Impl
	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getEntityAccess().getNameAssignment_0()); }
		(rule__Entity__NameAssignment_0)
		{ after(grammarAccess.getEntityAccess().getNameAssignment_0()); }
	)
	(
		{ before(grammarAccess.getEntityAccess().getNameAssignment_0()); }
		(rule__Entity__NameAssignment_0)*
		{ after(grammarAccess.getEntityAccess().getNameAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__1__Impl
	rule__Entity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getGroup_1()); }
	(rule__Entity__Group_1__0)?
	{ after(grammarAccess.getEntityAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__2__Impl
	rule__Entity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__3__Impl
	rule__Entity__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getGroup_3()); }
	(rule__Entity__Group_3__0)?
	{ after(grammarAccess.getEntityAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__4__Impl
	rule__Entity__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getGroup_5()); }
	(rule__Entity__Group_5__0)?
	{ after(grammarAccess.getEntityAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_1__0__Impl
	rule__Entity__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getEntityAccess().getColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getEntityAccess().getBaseAssignment_1_1()); }
		(rule__Entity__BaseAssignment_1_1)
		{ after(grammarAccess.getEntityAccess().getBaseAssignment_1_1()); }
	)
	(
		{ before(grammarAccess.getEntityAccess().getBaseAssignment_1_1()); }
		(rule__Entity__BaseAssignment_1_1)*
		{ after(grammarAccess.getEntityAccess().getBaseAssignment_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_3__0__Impl
	rule__Entity__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getComponentsAssignment_3_0()); }
	(rule__Entity__ComponentsAssignment_3_0)
	{ after(grammarAccess.getEntityAccess().getComponentsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getGroup_3_1()); }
	(rule__Entity__Group_3_1__0)*
	{ after(grammarAccess.getEntityAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_3_1__0__Impl
	rule__Entity__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getEntityAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getComponentsAssignment_3_1_1()); }
	(rule__Entity__ComponentsAssignment_3_1_1)
	{ after(grammarAccess.getEntityAccess().getComponentsAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_5__0__Impl
	rule__Entity__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getLeftSquareBracketKeyword_5_0()); }
	'['
	{ after(grammarAccess.getEntityAccess().getLeftSquareBracketKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_5__1__Impl
	rule__Entity__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getEntitiesAssignment_5_1()); }
	(rule__Entity__EntitiesAssignment_5_1)*
	{ after(grammarAccess.getEntityAccess().getEntitiesAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getRightSquareBracketKeyword_5_2()); }
	']'
	{ after(grammarAccess.getEntityAccess().getRightSquareBracketKeyword_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__0__Impl
	rule__Component__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getNameAssignment_0()); }
	(rule__Component__NameAssignment_0)
	{ after(grammarAccess.getComponentAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getValueAssignment_1()); }
	(rule__Component__ValueAssignment_1)?
	{ after(grammarAccess.getComponentAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__0__Impl
	rule__System__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getNameAssignment_0()); }
	(rule__System__NameAssignment_0)
	{ after(grammarAccess.getSystemAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__1__Impl
	rule__System__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__2__Impl
	rule__System__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSystemAccess().getCommandsAssignment_2()); }
		(rule__System__CommandsAssignment_2)
		{ after(grammarAccess.getSystemAccess().getCommandsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getSystemAccess().getCommandsAssignment_2()); }
		(rule__System__CommandsAssignment_2)*
		{ after(grammarAccess.getSystemAccess().getCommandsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getEntityAssignment_0()); }
	(rule__Loop__EntityAssignment_0)
	{ after(grammarAccess.getLoopAccess().getEntityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getGroup_1()); }
	(rule__Loop__Group_1__0)?
	{ after(grammarAccess.getLoopAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLoopAccess().getCommandsAssignment_3()); }
		(rule__Loop__CommandsAssignment_3)
		{ after(grammarAccess.getLoopAccess().getCommandsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getLoopAccess().getCommandsAssignment_3()); }
		(rule__Loop__CommandsAssignment_3)*
		{ after(grammarAccess.getLoopAccess().getCommandsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__0__Impl
	rule__Loop__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getLoopAccess().getColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLoopAccess().getConstraintsAssignment_1_1()); }
		(rule__Loop__ConstraintsAssignment_1_1)
		{ after(grammarAccess.getLoopAccess().getConstraintsAssignment_1_1()); }
	)
	(
		{ before(grammarAccess.getLoopAccess().getConstraintsAssignment_1_1()); }
		(rule__Loop__ConstraintsAssignment_1_1)*
		{ after(grammarAccess.getLoopAccess().getConstraintsAssignment_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Branch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__0__Impl
	rule__Branch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getQuestionMarkKeyword_0()); }
	'?'
	{ after(grammarAccess.getBranchAccess().getQuestionMarkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__1__Impl
	rule__Branch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getIfAssignment_1()); }
	(rule__Branch__IfAssignment_1)
	{ after(grammarAccess.getBranchAccess().getIfAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__2__Impl
	rule__Branch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getGroup_2()); }
	(rule__Branch__Group_2__0)*
	{ after(grammarAccess.getBranchAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getGroup_3()); }
	(rule__Branch__Group_3__0)?
	{ after(grammarAccess.getBranchAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Branch__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group_2__0__Impl
	rule__Branch__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getQuestionMarkQuestionMarkKeyword_2_0()); }
	'??'
	{ after(grammarAccess.getBranchAccess().getQuestionMarkQuestionMarkKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getElseIfsAssignment_2_1()); }
	(rule__Branch__ElseIfsAssignment_2_1)
	{ after(grammarAccess.getBranchAccess().getElseIfsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Branch__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group_3__0__Impl
	rule__Branch__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getLeftCurlyBracketKeyword_3_0()); }
	'{'
	{ after(grammarAccess.getBranchAccess().getLeftCurlyBracketKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group_3__1__Impl
	rule__Branch__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getCommandsAssignment_3_1()); }
	(rule__Branch__CommandsAssignment_3_1)*
	{ after(grammarAccess.getBranchAccess().getCommandsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getRightCurlyBracketKeyword_3_2()); }
	'}'
	{ after(grammarAccess.getBranchAccess().getRightCurlyBracketKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionAssignment_0()); }
	(rule__Condition__ConditionAssignment_0)
	{ after(grammarAccess.getConditionAccess().getConditionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getConditionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__2__Impl
	rule__Condition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getCommandsAssignment_2()); }
	(rule__Condition__CommandsAssignment_2)*
	{ after(grammarAccess.getConditionAccess().getCommandsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getConditionAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getAccessAssignment_0()); }
	(rule__Assignment__AccessAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getAccessAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getTypeAssignment_1()); }
	(rule__Assignment__TypeAssignment_1)
	{ after(grammarAccess.getAssignmentAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
	(rule__Assignment__ExpressionAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getNameAssignment_0()); }
	(rule__Call__NameAssignment_0)
	{ after(grammarAccess.getCallAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getParametersAssignment_2()); }
	(rule__Call__ParametersAssignment_2)
	{ after(grammarAccess.getCallAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__3__Impl
	rule__Call__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getGroup_3()); }
	(rule__Call__Group_3__0)*
	{ after(grammarAccess.getCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group_3__0__Impl
	rule__Call__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getCallAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getParametersAssignment_3_1()); }
	(rule__Call__ParametersAssignment_3_1)
	{ after(grammarAccess.getCallAccess().getParametersAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Access__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Access__Group__0__Impl
	rule__Access__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessAccess().getNamesAssignment_0()); }
	(rule__Access__NamesAssignment_0)
	{ after(grammarAccess.getAccessAccess().getNamesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Access__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessAccess().getGroup_1()); }
	(rule__Access__Group_1__0)*
	{ after(grammarAccess.getAccessAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Access__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Access__Group_1__0__Impl
	rule__Access__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getAccessAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Access__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessAccess().getNamesAssignment_1_1()); }
	(rule__Access__NamesAssignment_1_1)
	{ after(grammarAccess.getAccessAccess().getNamesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getExpression1ParserRuleCall_0()); }
	ruleExpression1
	{ after(grammarAccess.getExpressionAccess().getExpression1ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)*
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
	(rule__Expression__RightAssignment_1_2)
	{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression1__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group__0__Impl
	rule__Expression1__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getPrimaryBParserRuleCall_0()); }
	rulePrimaryB
	{ after(grammarAccess.getExpression1Access().getPrimaryBParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getGroup_1()); }
	(rule__Expression1__Group_1__0)*
	{ after(grammarAccess.getExpression1Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression1__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1__0__Impl
	rule__Expression1__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpression1Access().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1__1__Impl
	rule__Expression1__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getExpression1Access().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getRightAssignment_1_2()); }
	(rule__Expression1__RightAssignment_1_2)
	{ after(grammarAccess.getExpression1Access().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryB__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryB__Group_1__0__Impl
	rule__PrimaryB__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryB__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryBAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryBAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryB__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryB__Group_1__1__Impl
	rule__PrimaryB__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryB__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryBAccess().getExclamationMarkKeyword_1_1()); }
	'!'
	{ after(grammarAccess.getPrimaryBAccess().getExclamationMarkKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryB__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryB__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryB__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryBAccess().getExpressionAssignment_1_2()); }
	(rule__PrimaryB__ExpressionAssignment_1_2)
	{ after(grammarAccess.getPrimaryBAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicB__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicB__Group__0__Impl
	rule__AtomicB__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicBAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
	{ after(grammarAccess.getAtomicBAccess().getAdditionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicB__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicBAccess().getGroup_1()); }
	(rule__AtomicB__Group_1__0)?
	{ after(grammarAccess.getAtomicBAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicB__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicB__Group_1__0__Impl
	rule__AtomicB__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicBAccess().getComparisonLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAtomicBAccess().getComparisonLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicB__Group_1__1__Impl
	rule__AtomicB__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicBAccess().getTypeAssignment_1_1()); }
	(rule__AtomicB__TypeAssignment_1_1)
	{ after(grammarAccess.getAtomicBAccess().getTypeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicB__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicBAccess().getRightAssignment_1_2()); }
	(rule__AtomicB__RightAssignment_1_2)
	{ after(grammarAccess.getAtomicBAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
	(rule__Addition__Alternatives_1_0)
	{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
	(rule__Addition__RightAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_0__0__Impl
	rule__Addition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
	'+'
	{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_1__0__Impl
	rule__Addition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
	'-'
	{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getBitwiseParserRuleCall_0()); }
	ruleBitwise
	{ after(grammarAccess.getMultiplicationAccess().getBitwiseParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
	(rule__Multiplication__Alternatives_1_0)
	{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
	(rule__Multiplication__RightAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_0__0__Impl
	rule__Multiplication__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getTimesLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getTimesLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
	'*'
	{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_1__0__Impl
	rule__Multiplication__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getDivideLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getDivideLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
	'/'
	{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_2__0__Impl
	rule__Multiplication__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getModulusLeftAction_1_0_2_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getModulusLeftAction_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }
	'%'
	{ after(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bitwise__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bitwise__Group__0__Impl
	rule__Bitwise__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAccess().getUnaryParserRuleCall_0()); }
	ruleUnary
	{ after(grammarAccess.getBitwiseAccess().getUnaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bitwise__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAccess().getGroup_1()); }
	(rule__Bitwise__Group_1__0)*
	{ after(grammarAccess.getBitwiseAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bitwise__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bitwise__Group_1__0__Impl
	rule__Bitwise__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAccess().getBitwiseLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBitwiseAccess().getBitwiseLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bitwise__Group_1__1__Impl
	rule__Bitwise__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAccess().getOpAssignment_1_1()); }
	(rule__Bitwise__OpAssignment_1_1)
	{ after(grammarAccess.getBitwiseAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bitwise__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseAccess().getRightAssignment_1_2()); }
	(rule__Bitwise__RightAssignment_1_2)
	{ after(grammarAccess.getBitwiseAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_0__0__Impl
	rule__Unary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getBitwiseNegateAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryAccess().getBitwiseNegateAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_0__1__Impl
	rule__Unary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getTildeKeyword_0_1()); }
	'~'
	{ after(grammarAccess.getUnaryAccess().getTildeKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getExpressionAssignment_0_2()); }
	(rule__Unary__ExpressionAssignment_0_2)
	{ after(grammarAccess.getUnaryAccess().getExpressionAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_1__0__Impl
	rule__Unary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getPrimaryParserRuleCall_1_0()); }
	rulePrimary
	{ after(grammarAccess.getUnaryAccess().getPrimaryParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getAlternatives_1_1()); }
	(rule__Unary__Alternatives_1_1)?
	{ after(grammarAccess.getUnaryAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_1_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_1_1_0__0__Impl
	rule__Unary__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getIncrementExpressionAction_1_1_0_0()); }
	()
	{ after(grammarAccess.getUnaryAccess().getIncrementExpressionAction_1_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_1_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getPlusSignPlusSignKeyword_1_1_0_1()); }
	'++'
	{ after(grammarAccess.getUnaryAccess().getPlusSignPlusSignKeyword_1_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_1_1_1__0__Impl
	rule__Unary__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getDecrementExpressionAction_1_1_1_0()); }
	()
	{ after(grammarAccess.getUnaryAccess().getDecrementExpressionAction_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getHyphenMinusHyphenMinusKeyword_1_1_1_1()); }
	'--'
	{ after(grammarAccess.getUnaryAccess().getHyphenMinusHyphenMinusKeyword_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__0__Impl
	rule__Primary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getBracketsAction_2_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getBracketsAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__1__Impl
	rule__Primary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_1()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__2__Impl
	rule__Primary__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_2_2()); }
	(rule__Primary__ExpressionAssignment_2_2)
	{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_3()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Game__EntitiesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getEntitiesEntityParserRuleCall_0_0()); }
		ruleEntity
		{ after(grammarAccess.getGameAccess().getEntitiesEntityParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__SystemsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getSystemsSystemParserRuleCall_1_0()); }
		ruleSystem
		{ after(grammarAccess.getGameAccess().getSystemsSystemParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__BaseAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getBaseIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getBaseIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__ComponentsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getComponentsComponentParserRuleCall_3_0_0()); }
		ruleComponent
		{ after(grammarAccess.getEntityAccess().getComponentsComponentParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__ComponentsAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getComponentsComponentParserRuleCall_3_1_1_0()); }
		ruleComponent
		{ after(grammarAccess.getEntityAccess().getComponentsComponentParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__EntitiesAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getEntitiesEntityParserRuleCall_5_1_0()); }
		ruleEntity
		{ after(grammarAccess.getEntityAccess().getEntitiesEntityParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentAccess().getValueValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getComponentAccess().getValueValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__NumbersAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getNumbersREALTerminalRuleCall_0()); }
		RULE_REAL
		{ after(grammarAccess.getVectorAccess().getNumbersREALTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__ValuesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getValuesIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getWordAccess().getValuesIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__CommandsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getCommandsCommandParserRuleCall_2_0()); }
		ruleCommand
		{ after(grammarAccess.getSystemAccess().getCommandsCommandParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__EntityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getEntityIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getLoopAccess().getEntityIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ConstraintsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getConstraintsIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLoopAccess().getConstraintsIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getCommandsCommandParserRuleCall_3_0()); }
		ruleCommand
		{ after(grammarAccess.getLoopAccess().getCommandsCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__IfAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBranchAccess().getIfConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getBranchAccess().getIfConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__ElseIfsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBranchAccess().getElseIfsConditionParserRuleCall_2_1_0()); }
		ruleCondition
		{ after(grammarAccess.getBranchAccess().getElseIfsConditionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__CommandsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBranchAccess().getCommandsCommandParserRuleCall_3_1_0()); }
		ruleCommand
		{ after(grammarAccess.getBranchAccess().getCommandsCommandParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getConditionExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getConditionAccess().getConditionExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__CommandsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getCommandsCommandParserRuleCall_2_0()); }
		ruleCommand
		{ after(grammarAccess.getConditionAccess().getCommandsCommandParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__AccessAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getAccessAccessParserRuleCall_0_0()); }
		ruleAccess
		{ after(grammarAccess.getAssignmentAccess().getAccessAccessParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getTypeAssignmentTypeEnumRuleCall_1_0()); }
		ruleAssignmentType
		{ after(grammarAccess.getAssignmentAccess().getTypeAssignmentTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getCallAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallAccess().getParametersExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getCallAccess().getParametersExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ParametersAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallAccess().getParametersExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getCallAccess().getParametersExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__NamesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessAccess().getNamesIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAccessAccess().getNamesIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__NamesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessAccess().getNamesIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAccessAccess().getNamesIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRightExpression1ParserRuleCall_1_2_0()); }
		ruleExpression1
		{ after(grammarAccess.getExpressionAccess().getRightExpression1ParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression1Access().getRightPrimaryBParserRuleCall_1_2_0()); }
		rulePrimaryB
		{ after(grammarAccess.getExpression1Access().getRightPrimaryBParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryB__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryBAccess().getExpressionAtomicBParserRuleCall_1_2_0()); }
		ruleAtomicB
		{ after(grammarAccess.getPrimaryBAccess().getExpressionAtomicBParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__TypeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicBAccess().getTypeRelationTypeEnumRuleCall_1_1_0()); }
		ruleRelationType
		{ after(grammarAccess.getAtomicBAccess().getTypeRelationTypeEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicB__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicBAccess().getRightAdditionParserRuleCall_1_2_0()); }
		ruleAddition
		{ after(grammarAccess.getAtomicBAccess().getRightAdditionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightBitwiseParserRuleCall_1_1_0()); }
		ruleBitwise
		{ after(grammarAccess.getMultiplicationAccess().getRightBitwiseParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseAccess().getOpAlternatives_1_1_0()); }
		(rule__Bitwise__OpAlternatives_1_1_0)
		{ after(grammarAccess.getBitwiseAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bitwise__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseAccess().getRightUnaryParserRuleCall_1_2_0()); }
		ruleUnary
		{ after(grammarAccess.getBitwiseAccess().getRightUnaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__ExpressionAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAccess().getExpressionPrimaryParserRuleCall_0_2_0()); }
		rulePrimary
		{ after(grammarAccess.getUnaryAccess().getExpressionPrimaryParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExpressionExpressionParserRuleCall_2_2_0()); }
		ruleExpression
		{ after(grammarAccess.getPrimaryAccess().getExpressionExpressionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_WHITE_SPACE : (' '|'\t'|'\r'|'\n')+;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_REAL : '-'? ('0'..'9')* ('.' ('0'..'9')+ ('e' '-'? ('0'..'9')+)?)?;
