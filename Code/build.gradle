plugins { id 'java' }
repositories { mavenCentral() }

configurations.implementation.canBeResolved = true

dependencies {
	implementation platform("org.eclipse.xtext:xtext-dev-bom:2.20.0")
	implementation "org.eclipse.xtext:org.eclipse.xtext:2.20.0"
	implementation "org.eclipse.xtext:org.eclipse.xtext.ide:2.20.0"
	implementation 'org.eclipse.emf:org.eclipse.emf.mwe2.launch'
	implementation "org.eclipse.xtext:org.eclipse.xtext.common.types:2.20.0"
	implementation "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:2.20.0"
	implementation 'org.eclipse.xtext:xtext-antlr-generator'
	implementation files("${projectDir}/m/src")
	implementation files("${projectDir}/m/src/m/fragments")
	implementation files("${projectDir}/build/classes/java/main")
}

sourceSets {
	main.java.srcDirs = ["m/src", "m.ide/src", "m.ide/src-gen", "m/src-gen"]
}

task compileFragments(type: JavaCompile){
	source += fileTree(dir: 'm/src/m/main', include: '**/*.java')
	source += fileTree(dir: 'm/src/m/fragments', include: '**/*.java')
	classpath = configurations.implementation
	destinationDir = file('build/classes/java/main')
}

task runFragments(type: JavaExec) {
	doFirst{
		mkdir "m.ide"
		mkdir "m.ui"
	}
	dependsOn compileFragments
	main = "m.main.RunFragments"
	args "."
	classpath = configurations.implementation
}

task generateLanguageServer(type: Jar) {
	dependsOn compileJava
	baseName = 'm-language-server'
    manifest.attributes 'Main-Class': 'org.eclipse.xtext.ide.server.ServerLauncher'
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude '**/*.java', 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA', '**/*.xtend', '**/*.mwe2', '**/*.g', '**/*.xtext'
    with jar
}