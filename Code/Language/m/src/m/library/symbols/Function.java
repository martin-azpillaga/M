package m.library.symbols;

import static m.library.types.AtomicType.ANIMATOR;
import static m.library.types.AtomicType.COLOR;
import static m.library.types.AtomicType.COMPONENT;
import static m.library.types.AtomicType.ENTITY;
import static m.library.types.AtomicType.ENTITY_LIST;
import static m.library.types.AtomicType.INPUT;
import static m.library.types.AtomicType.NUMBER;
import static m.library.types.AtomicType.NUMBER2;
import static m.library.types.AtomicType.NUMBER3;
import static m.library.types.AtomicType.PROPOSITION;
import static m.library.types.AtomicType.STRING;
import static m.library.types.AtomicType.UNIT;
import static m.library.types.TypeVariable.A;

import m.library.types.AtomicType;
import m.library.types.FunctionType;
import m.library.types.Type;

public enum Function implements Symbol{
	ABS(NUMBER, NUMBER),
	SIGN(NUMBER, NUMBER),
	CEIL(NUMBER, NUMBER),
	FLOOR(NUMBER, NUMBER),
	ROUND(NUMBER, NUMBER),
	CLAMP(NUMBER, NUMBER),
	INTEGERPART(NUMBER, NUMBER),
	FRACTIONALPART(NUMBER, NUMBER),
	INVERSE(NUMBER, NUMBER),
	RECIPROCAL(NUMBER, NUMBER),
	
	LERP(NUMBER, NUMBER, NUMBER2),
	UNLERP(NUMBER, NUMBER, NUMBER2),
	PROPORTIONAL(NUMBER, NUMBER, NUMBER2, NUMBER2),
	
	CROSS(NUMBER3, NUMBER3, NUMBER3),
	DOT(NUMBER, NUMBER3, NUMBER3),
	NORM(NUMBER, NUMBER3),
	NORMALIZE(NUMBER3, NUMBER3),
	DISTANCE(NUMBER, NUMBER3, NUMBER3),
	REFLECT(NUMBER3, NUMBER3, NUMBER3),
	REFRACT(NUMBER3, NUMBER3, NUMBER3),
	
	OR(PROPOSITION, PROPOSITION, PROPOSITION),
	AND(PROPOSITION, PROPOSITION),
	NOT(PROPOSITION, PROPOSITION),
	
	ADDITION(A, A, A),
	SUBTRACTION(A, A, A),
	MULTIPLICATION(A, A, NUMBER),
	DIVISION(A, A, NUMBER),
	
	EQUAL(PROPOSITION, A, A),
	INEQUAL(A,A),
	
	LOWER(PROPOSITION, NUMBER, NUMBER),
	LOWEROREQUAL(PROPOSITION, NUMBER, NUMBER),
	GREATEROREQUAL(PROPOSITION, NUMBER, NUMBER),
	GREATER(PROPOSITION, NUMBER, NUMBER),
	
	SIZE(NUMBER, ENTITY_LIST),
	IN(PROPOSITION, ENTITY, ENTITY_LIST),
	XYZ(NUMBER3, NUMBER, NUMBER, NUMBER),
	
	SIN(NUMBER, NUMBER),
	COS(NUMBER, NUMBER),
	TAN(NUMBER, NUMBER),
	ASIN(NUMBER, NUMBER),
	ACOS(NUMBER, NUMBER),
	ATAN(NUMBER, NUMBER),
	EXP(NUMBER, NUMBER),
	LOG(NUMBER, NUMBER),
	EXP10(NUMBER, NUMBER),
	LOG10(NUMBER, NUMBER),
	POW(NUMBER, NUMBER),
	SQRT(NUMBER, NUMBER),
	RANDOM(NUMBER, NUMBER2),
	
	CREATE(UNIT, ENTITY),
	DESTROY(UNIT, ENTITY),
	ADD(UNIT, COMPONENT, ENTITY),
	REMOVE(UNIT, COMPONENT, ENTITY),
	HAS(PROPOSITION, COMPONENT, ENTITY),
	
	WRITE(UNIT, A),
	WRITEERROR(UNIT, A),
	HALT(UNIT),
	
	
	SET_NUMBER(UNIT, AtomicType.MATERIAL, NUMBER),
	SET_COLOR(UNIT, AtomicType.MATERIAL, COLOR),
	SET_STRING(UNIT, AtomicType.MATERIAL, STRING),
	
	SET_TRIGGER(UNIT, ANIMATOR, STRING),
	STATE_NAME(STRING, ANIMATOR),
	
	READ_TRIGGERED(PROPOSITION, INPUT),
	READ_NUMBER(NUMBER, INPUT),
	
	PLAY(UNIT, ENTITY, AtomicType.AUDIOCLIP),
	
	ASSIGNMENT(UNIT, A, A),
	;
	
	Type type;
	
	Function (Type returnType, Type... parameters) {
		this.type = new FunctionType(parameters, returnType);
	}
	
	public Type getType() {
		return type;
	}
}
