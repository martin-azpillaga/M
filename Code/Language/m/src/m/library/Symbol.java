package m.library;

import m.types.Type;
import static m.types.AtomicType.*;
import static m.types.TypeVariable.A;
import static m.types.TypeVariable.A_SUB_NUMERIC;

import m.types.AtomicType;
import m.types.FunctionType;

public enum Symbol {
	QUERY(ENTITY),
	SELECTION(PROPOSITION),
	ITERATION(PROPOSITION),
	
	POSITION(NUMBER3),
	ROTATION(NUMBER3),
	SCALE(NUMBER3),
	PARENT(ENTITY),
	CHILDREN(ENTITY_LIST),
	
	
	MASS(NUMBER),
	INERTIA(MATRIX3),
	KINEMATIC(PROPOSITION),
	
	VELOCITY(NUMBER3),
	ACCELERATION(NUMBER3),
	FORCE(NUMBER3),
	ANGULAR_VELOCITY(NUMBER3),
	ANGULAR_ACCELERATION(NUMBER3),
	ANGULAR_FORCE(NUMBER3),
	
	COLLISIONS(ENTITY_LIST),
	COLLISION_LAYER(NUMBER),
	COLLISION_MASK(NUMBER),
	RESTITUTION(NUMBER),
	FRICTION(NUMBER),
	COLLISION_EVENTS(PROPOSITION),
	NO_COLLISION_RESPONSE(PROPOSITION),
	
	RADIUS(NUMBER),
	EXTENTS(NUMBER3),
	MESH_COLLIDER(PROPOSITION),
	CONVEX_HULL(PROPOSITION),
	
	BOND(ENTITY),
	ANCHOR(NUMBER3),
	BREAK_FORCE(NUMBER),
	BREAK_ANGULAR_FORCE(NUMBER),
	
	LOCKED_POSITION_X(PROPOSITION),
	LOCKED_POSITION_Y(PROPOSITION),
	LOCKED_POSITION_Z(PROPOSITION),
	LOCKED_ROTATION(PROPOSITION),
	
	
	MESH(AtomicType.MESH),
	MATERIAL(AtomicType.MATERIAL),
	
	NEAR(NUMBER),
	FAR(NUMBER),
	FOV(NUMBER),
	PERSPECTIVE(PROPOSITION),
	BACKGROUND(COLOR),
	SKYBOX(AtomicType.MATERIAL),
	VIEWPORT(NUMBER2),
	RENDER_TEXTURE(IMAGE),
	
	EMISSION(COLOR),
	SPOT_ANGLE(NUMBER),
	RANGE(NUMBER),
	INTENSITY(NUMBER),
	
	TIMER(NUMBER),
	ELAPSED(NUMBER),
	TIMEOUT(PROPOSITION),
	
	
	AUDIOCLIP(AtomicType.AUDIOCLIP),
	VOLUME(NUMBER),
	PITCH(NUMBER),
	LOOP(PROPOSITION),
	
	EPSILON(NUMBER),
	PI(NUMBER),
	E(NUMBER),
	
	ABS(NUMBER, NUMBER),
	SIGN(NUMBER, NUMBER),
	CEIL(NUMBER, NUMBER),
	FLOOR(NUMBER, NUMBER),
	ROUND(NUMBER, NUMBER),
	CLAMP(NUMBER, NUMBER),
	INTEGERPART(NUMBER, NUMBER),
	FRACTIONALPART(NUMBER, NUMBER),
	INVERSE(NUMBER, NUMBER),
	RECIPROCAL(NUMBER, NUMBER),
	
	LERP(NUMBER, NUMBER, NUMBER2),
	UNLERP(NUMBER, NUMBER, NUMBER2),
	PROPORTIONAL(NUMBER, NUMBER, NUMBER2, NUMBER2),
	
	CROSS(NUMBER3, NUMBER3, NUMBER3),
	DOT(NUMBER, NUMBER3, NUMBER3),
	NORM(NUMBER, NUMBER3),
	NORMALIZE(NUMBER3, NUMBER3),
	DISTANCE(NUMBER, NUMBER3, NUMBER3),
	REFLECT(NUMBER3, NUMBER3, NUMBER3),
	REFRACT(NUMBER3, NUMBER3, NUMBER3),
	
	OR(PROPOSITION, PROPOSITION, PROPOSITION),
	AND(PROPOSITION, PROPOSITION),
	NOT(PROPOSITION, PROPOSITION),
	
	ADDITION(A_SUB_NUMERIC, A_SUB_NUMERIC, A_SUB_NUMERIC),
	SUBTRACTION(A_SUB_NUMERIC, A_SUB_NUMERIC, A_SUB_NUMERIC),
	MULTIPLICATION(A_SUB_NUMERIC, A_SUB_NUMERIC, NUMBER),
	DIVISION(A_SUB_NUMERIC, A_SUB_NUMERIC, NUMBER),
	
	EQUAL(PROPOSITION, A, A),
	INEQUAL(ANY,ANY),
	
	LOWER(PROPOSITION, NUMBER, NUMBER),
	LOWEROREQUAL(PROPOSITION, NUMBER, NUMBER),
	GREATEROREQUAL(PROPOSITION, NUMBER, NUMBER),
	GREATER(PROPOSITION, NUMBER, NUMBER),
	
	SIZE(NUMBER, ENTITY_LIST),
	IN(PROPOSITION, ENTITY, ENTITY_LIST),
	XYZ(NUMBER3, NUMBER, NUMBER, NUMBER),
	
	SIN(NUMBER, NUMBER),
	COS(NUMBER, NUMBER),
	TAN(NUMBER, NUMBER),
	ASIN(NUMBER, NUMBER),
	ACOS(NUMBER, NUMBER),
	ATAN(NUMBER, NUMBER),
	EXP(NUMBER, NUMBER),
	LOG(NUMBER, NUMBER),
	EXP10(NUMBER, NUMBER),
	LOG10(NUMBER, NUMBER),
	POW(NUMBER, NUMBER),
	SQRT(NUMBER, NUMBER),
	RANDOM(NUMBER, NUMBER2),
	
	CREATE(UNIT, ENTITY),
	DESTROY(UNIT, ENTITY),
	ADD(UNIT, ENTITY),
	REMOVE(UNIT, ENTITY),
	HAS(PROPOSITION, ENTITY),
	
	WRITE(UNIT, ANY),
	WRITEERROR(UNIT, ANY),
	HALT(UNIT),
	
	
	SET_NUMBER(UNIT, AtomicType.MATERIAL, NUMBER),
	SET_COLOR(UNIT, AtomicType.MATERIAL, COLOR),
	SET_STRING(UNIT, AtomicType.MATERIAL, STRING),
	
	SET_TRIGGER(UNIT, ANIMATOR, STRING),
	STATE_NAME(STRING, ANIMATOR),
	
	READ_TRIGGERED(PROPOSITION, INPUT),
	READ_NUMBER(NUMBER, INPUT),
	
	ASSIGNMENT(UNIT, A, A)
	;
	
	Type type;
	
	Symbol (Type type) {
		this.type = type;
	}
	
	Symbol (Type returnType, Type... parameters) {
		this.type = new FunctionType(parameters, returnType);
	}
	
	public Type getType() {
		return type;
	}
}
