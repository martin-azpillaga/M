package m.validation;

import static m.types.AtomicType.*;
import static m.types.TypeVariable.*;

import m.types.FunctionType;
import m.types.Type;

public enum StandardFunction
{
	EPSILON(NUMBER),
	PI(NUMBER),
	E(NUMBER),
	
	ABS(NUMBER, NUMBER),
	SIGN(NUMBER, NUMBER),
	CEIL(NUMBER, NUMBER),
	FLOOR(NUMBER, NUMBER),
	ROUND(NUMBER, NUMBER),
	CLAMP(NUMBER, NUMBER),
	INTEGERPART(NUMBER, NUMBER),
	FRACTIONALPART(NUMBER, NUMBER),
	INVERSE(NUMBER, NUMBER),
	RECIPROCAL(NUMBER, NUMBER),
	
	LERP(NUMBER, NUMBER, NUMBER2),
	UNLERP(NUMBER, NUMBER, NUMBER2),
	PROPORTIONAL(NUMBER, NUMBER, NUMBER2, NUMBER2),
	
	CROSS(NUMBER3, NUMBER3, NUMBER3),
	DOT(NUMBER, NUMBER3, NUMBER3),
	NORM(NUMBER, NUMBER3),
	NORMALIZE(NUMBER3, NUMBER3),
	DISTANCE(NUMBER, NUMBER3, NUMBER3),
	REFLECT(NUMBER3, NUMBER3, NUMBER3),
	REFRACT(NUMBER3, NUMBER3, NUMBER3),
	
	OR(PROPOSITION, PROPOSITION, PROPOSITION),
	AND(PROPOSITION, PROPOSITION),
	NOT(PROPOSITION, PROPOSITION),
	
	ADDITION(A_SUB_NUMERIC, A_SUB_NUMERIC, A_SUB_NUMERIC),
	SUBTRACTION(A_SUB_NUMERIC, A_SUB_NUMERIC, A_SUB_NUMERIC),
	MULTIPLICATION(A_SUB_NUMERIC, A_SUB_NUMERIC, NUMBER),
	DIVISION(A_SUB_NUMERIC, A_SUB_NUMERIC, NUMBER),
	
	EQUAL(PROPOSITION, A, A),
	INEQUAL(ANY,ANY),
	
	LOWER(PROPOSITION, NUMBER, NUMBER),
	LOWEROREQUAL(PROPOSITION, NUMBER, NUMBER),
	GREATEROREQUAL(PROPOSITION, NUMBER, NUMBER),
	GREATER(PROPOSITION, NUMBER, NUMBER),
	
	SIZE(NUMBER, ENTITY_LIST),
	IN(PROPOSITION, ENTITY, ENTITY_LIST),
	XYZ(NUMBER3, NUMBER, NUMBER, NUMBER),
	
	SIN(NUMBER, NUMBER),
	COS(NUMBER, NUMBER),
	TAN(NUMBER, NUMBER),
	ASIN(NUMBER, NUMBER),
	ACOS(NUMBER, NUMBER),
	ATAN(NUMBER, NUMBER),
	EXP(NUMBER, NUMBER),
	LOG(NUMBER, NUMBER),
	EXP10(NUMBER, NUMBER),
	LOG10(NUMBER, NUMBER),
	POW(NUMBER, NUMBER),
	SQRT(NUMBER, NUMBER),
	RANDOM(NUMBER, NUMBER2),
	
	CREATE(UNIT, ENTITY),
	DESTROY(UNIT, ENTITY),
	ADD(UNIT, ENTITY),
	REMOVE(UNIT, ENTITY),
	HAS(PROPOSITION, ENTITY),
	
	WRITE(UNIT, ANY),
	WRITEERROR(UNIT, ANY),
	HALT(UNIT),
	
	
	SET_NUMBER(UNIT, MATERIAL, NUMBER),
	SET_COLOR(UNIT, MATERIAL, COLOR),
	SET_STRING(UNIT, MATERIAL, STRING),
	
	SET_TRIGGER(UNIT, ANIMATOR, STRING),
	STATE_NAME(STRING, ANIMATOR),
	
	READ_TRIGGERED(PROPOSITION, INPUT),
	READ_NUMBER(NUMBER, INPUT),
	
	RANDOM_DIRECTION_2D(NUMBER2, NUMBER),
	
	ASSIGNMENT(UNIT, A, A)
	;
	
	FunctionType type;
	
	StandardFunction(Type returnType, Type... parameters) {
		this.type = new FunctionType(parameters, returnType);
	}
	
	public FunctionType getType() {
		return type;
	}
	
	public String getName() {
		return this.getName().toLowerCase();
	}
}
