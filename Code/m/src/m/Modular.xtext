grammar m.Modular hidden(WS)

import "http://www.eclipse.org/emf/2002/Ecore"

generate modular "http://www.minim.games/modular"

Procedure:
	name=IDENTIFIER
	(OPEN (arguments+=IDENTIFIER (SEPARATOR arguments+=IDENTIFIER)*)? CLOSE)?
	BEGIN
	statements+=Statement*
	('←' return=Expression)?
	END;

Statement:
	Selection | Iteration | Call | Assignment;

Selection:
	('→' | '#') branches+=Branch
	(('⇉' | '##') branches+=Branch)*
	(BEGIN statements+=Statement* END)?;

Branch:
	condition=Expression
	BEGIN statements+=Statement* END;

Iteration:
	('↺' | '@') condition=Expression
	BEGIN statements+=Statement* END;

Assignment:
	identifier=IDENTIFIER kind=AssignmentKind expression=Expression;

Call:
	identifier=IDENTIFIER
	OPEN (parameters+=Expression (SEPARATOR parameters+=Expression)*)? CLOSE;
	

Expression: Ternary;

Ternary returns Expression:
  LogicalOr ({Ternary.check=current}  '?' yes=LogicalOr  ':' no=LogicalOr)*;
  
LogicalOr returns Expression:
  LogicalAnd ({LogicalOr.left=current}  ('⋁'|'||') right=LogicalAnd)*;
  
LogicalAnd returns Expression:
  BitwiseOr ({LogicalAnd.left=current}  ('⋀'|'&&') right=BitwiseOr)*;

BitwiseOr returns Expression:
	BitwiseXor ({BitwiseOr.left=current}  '|' right=BitwiseXor)*;

BitwiseXor returns Expression:
	BitwiseAnd ({BitwiseXor.left=current}  '^' right=BitwiseAnd)*;

BitwiseAnd returns Expression:
	Equality ({BitwiseAnd.left=current}  '&' right=Equality)*;

Equality returns Expression:
	NotEqual ({Equal.left=current}  '==' right=NotEqual)*;

NotEqual returns Expression:
	GreaterOrEqual ({NotEqual.left=current}  ('≠'|'!=') right=GreaterOrEqual)*;

GreaterOrEqual returns Expression:
	Greater ({GreaterOrEqual.left=current}  ('≥'|'>=') right=Greater)*;

Greater returns Expression:
	LowerOrEqual ({Greater.left=current}  '>' right=LowerOrEqual)*;

LowerOrEqual returns Expression:
	Lower ({LowerOrEqual.left=current}  ('≤'|'<=') right=Lower)*;

Lower returns Expression:
	RightShift ({Lower.left=current}  '<' right=RightShift)*;

RightShift returns Expression:
	LeftShift ({RightShift.left=current}  ('≫'|'>>') right=LeftShift)*;
	
LeftShift returns Expression:
	Subtraction ({LeftShift.left=current}  ('≪'|'<<') right=Subtraction)*;

Subtraction returns Expression:
	Addition ({Subtraction.left=current}  '-' right=Addition)*;

Addition returns Expression:
	Modulo ({Addition.left=current}  '+' right=Modulo)*;

Modulo returns Expression:
	Division ({Modulo.left=current}  '%' right=Division)*;

Division returns Expression:
	Multiplication ({Division.left=current}  '/' right=Multiplication)*;

Multiplication returns Expression:
	BitwiseNot ({Multiplication.left=current}  ('×'|'*') right=BitwiseNot)*;

BitwiseNot returns Expression:
	LogicalNot | {BitwiseNot}  '~' expression=LogicalNot;

LogicalNot returns Expression:
	UnaryMinus | {LogicalNot}  '!' expression=UnaryMinus;

UnaryMinus returns Expression:
	Primary | {UnaryMinus}  '-' expression=Primary;

Primary returns Expression:
  FloatLiteral |
  StringLiteral |
  BooleanLiteral |
  Variable |
  OPEN Expression CLOSE;
  
Variable:
	IdentifierLiteral | Call;
	
IdentifierLiteral: value=IDENTIFIER;
FloatLiteral: value=FLOAT;
StringLiteral: value=FILENAME;
BooleanLiteral: value=BOOLEAN;

terminal WS: '\u0020'|'\u0009'|'\u000A'|'\u000D';
terminal BOOLEAN: '⊤'|'⊥';
terminal fragment FILE: ('\\"'|!('/'|'\u0000'|'"'))+;
terminal FILENAME: '"' (FILE ('/' FILE)*)? '"';
terminal IDENTIFIER: '^'? ('_'|LETTER) ('_'|LETTER|DIGIT)*;
terminal FLOAT returns EFloat: '-'? DIGIT+ ('.' DIGIT+)? ('e' ('-'|'+')? DIGIT+)?;

terminal fragment LETTER: '\u0061'..'\u007A'|'\u0041'..'\u005A'|'\u00A0'..'\uFFFF';
terminal fragment DIGIT: '0'..'9';

enum AssignmentKind:
	set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/='
	| or='|=' | and='&=' | xor='^=' | shiftLeft='<<=' | shiftRight='>>=';

terminal OPEN:
	'(';

terminal CLOSE:
	')';

terminal SEPARATOR:
	',';

terminal BEGIN:
	'{';

terminal END:
	'}';