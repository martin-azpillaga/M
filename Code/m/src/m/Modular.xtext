grammar m.Modular hidden(WS)

import "http://www.eclipse.org/emf/2002/Ecore"
generate modular "azpillaga.world/modular"

Procedure:
	name=WORD
	'(' (arguments+=WORD (',' arguments+=WORD)*)? ')'
	'{'	statements+=Statement* '}';

Statement:
	Selection|Iteration|Return|FunctionCall|Assignment;

Selection:
	'→' branches+=Branch
	('⇉' branches+=Branch)*
	branches+=Block?;

Branch returns Block: {Branch}
	condition=Expression
	'{' statements+=Statement+ '}';

Block returns Block: {Block}
	'{' statements+=Statement+ '}';

Iteration returns Block: {Iteration}
	'↺' condition=Expression
	'{' statements+=Statement+ '}';

Return:
	'←' expression=Expression;

Assignment returns Expression: {Assignment}
	variable=Variable
	kind=AssignmentKind
	expression=Expression;

FunctionCall returns Expression: {FunctionCall}
	function=WORD
	'(' (parameters+=Expression (',' parameters+=Expression)*)? ')';

Expression:LogicalOr;

LogicalOr returns Expression:
  LogicalAnd ({LogicalOr.left=current}  '⋁' right=LogicalAnd)*;
  
LogicalAnd returns Expression:
  Equality ({LogicalAnd.left=current}  '⋀' right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current}  kind=EqualityKind right=Comparison)*;

Comparison returns Expression:
	AdditiveExpression ({Comparison.left=current}  kind=ComparisonKind right=AdditiveExpression)*;

AdditiveExpression returns Expression:
	MultiplicativeExpression ({AdditiveExpression.left=current}  kind=AdditiveKind right=MultiplicativeExpression)*;

MultiplicativeExpression returns Expression:
	Primary ({MultiplicativeExpression.left=current}  kind=MultiplicativeKind right=Primary)*;

Primary returns Expression:
  Atomic|LogicalNot|UnaryMinus|Brackets;

Atomic returns Expression:
  FloatLiteral|StringLiteral|BooleanLiteral|Variable|FunctionCall;

Brackets returns Expression:
	'(' expression=Expression ')';

LogicalNot returns Expression:
	{LogicalNot} '!' expression=Primary;

UnaryMinus returns Expression:
	{UnaryMinus} '-' expression=Primary;	

Variable returns Expression: {Variable}
	name=WORD;

FloatLiteral returns Expression: {FloatLiteral}	value=NUMBER;
StringLiteral returns Expression: {StringLiteral} value=STRING;
BooleanLiteral returns Expression: {BooleanLiteral}	value=BOOLEAN;


terminal WS: (' '|'\n'|'\r'|'\t')+;
terminal BOOLEAN: '⊤'|'⊥';
terminal STRING: '"' -> '"';
terminal WORD: '^'? ('_'|LETTER) ('_'|LETTER|DIGIT)*;
terminal NUMBER returns EFloat: '-'? DIGIT+ ('.' DIGIT+)? ('e' ('-'|'+')? DIGIT+)?;

terminal fragment LETTER: '\u0061'..'\u007A'|'\u0041'..'\u005A'|'\u00A0'..'\uFFFF';
terminal fragment DIGIT: '0'..'9';


enum EqualityKind: equal='=='|notEqual='!=';
enum AdditiveKind: add='+'|subtract='-';
enum MultiplicativeKind: multiply='*'|divide='/'|modulo='%';
enum ComparisonKind: lower='<'|lowerOrEqual='<='|greaterOrEqual='>='|greater='>';
enum AssignmentKind: set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/=' | modulus='%=';