grammar m.Modular hidden(WS)

import "http://www.eclipse.org/emf/2002/Ecore"
generate modular "azpillaga.world/modular"

Procedure:
	name=WORD
	'(' (arguments+=WORD (',' arguments+=WORD)*)? ')'
	'{'	statements+=Statement* ('←' expression=Expression)? '}';

Statement:
	Selection|Iteration|Action;

Action returns Expression: {Action}
	access=AccessExpression
	(kind=AssignmentKind 
	 expression=Expression
	)?;

Selection:
	'→' branches+=Branch
	('⇉' branches+=Branch)*
	branches+=Block?;

Branch returns Block: {Branch}
	condition=Expression
	'{' statements+=Statement+ '}';

Block returns Block: {Block}
	'{' statements+=Statement+ '}';

Iteration returns Block: {Iteration}
	'↺' condition=Expression
	'{' statements+=Statement+ '}';

Expression:Assignment;

Assignment returns Expression:
	LogicalOr ({Assignment.left=current} kind=AssignmentKind right=Expression)?;

LogicalOr returns Expression:
  LogicalAnd ({LogicalOr.left=current}  '⋁' right=LogicalAnd)*;
  
LogicalAnd returns Expression:
  Equality ({LogicalAnd.left=current}  '⋀' right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current}  kind=EqualityKind right=Comparison)*;

Comparison returns Expression:
	AdditiveExpression (({Comparison.left=current}  kind=ComparisonKind right=AdditiveExpression))*;

AdditiveExpression returns Expression:
	MultiplicativeExpression ({AdditiveExpression.left=current}  kind=AdditiveKind right=MultiplicativeExpression)*;

MultiplicativeExpression returns Expression:
	Primary ({MultiplicativeExpression.left=current}  kind=MultiplicativeKind right=Primary)*;

Primary returns Expression:
  AccessExpression|LogicalNot|UnaryMinus|Brackets;

Brackets returns Expression:
	'(' expression=Expression ')';

LogicalNot returns Expression:
	{LogicalNot} '!' expression=Primary;

UnaryMinus returns Expression:
	{UnaryMinus} '-' expression=Primary;	
  
AccessExpression returns Expression:
	Atomic ({AccessExpression.left=current} '.' right=Atomic)*;


Atomic returns Expression:
	Function|Variable;

Variable:
	name=WORD;

Function:
	name=WORD
	'(' (parameters+=Expression (',' parameters+=Expression)*)? ')'
;

terminal WS: (' '|'\n'|'\r'|'\t')+;
terminal WORD: '^'? ('_'|LETTER) ('_'|LETTER|DIGIT)*;

terminal fragment LETTER: '\u0061'..'\u007A'|'\u0041'..'\u005A'|'\u00A0'..'\uFFFF';
terminal fragment DIGIT: '0'..'9';
terminal NUMBER returns EFloat: '-'? DIGIT+ ('.' DIGIT+)? ('e' ('-'|'+')? DIGIT+)?;


enum EqualityKind: equal='=='|notEqual='!=';
enum AdditiveKind: add='+'|subtract='-';
enum MultiplicativeKind: multiply='*'|divide='/'|modulo='%';
enum ComparisonKind: lower='<'|lowerOrEqual='<='|greaterOrEqual='>='|greater='>';
enum AssignmentKind: set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/=' | modulus='%=';