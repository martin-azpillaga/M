grammar m.CSharp with m.Modular hidden(WS, MULTIPLE_LINES_COMMENT, SINGLE_LINE_COMMENT)

import "azpillaga.world/modular"
generate csharp "azpillaga.world/csharp"

CompilationUnit:
	usings+=Using*
	types+=NamespaceMember*;

Using:
	'using' name=QUALIFIEDNAME ';';

NamespaceMember:
	NamespaceType|Enum;
NamespaceType:
	Struct|Class;
Member:
	NamespaceMember|Method|Field
;
Struct:
	('['annotations+=WORD']')*
	 visibility=Visibility?
	 'struct' name=TYPE
	(':' superTypes+=TYPE (',' superTypes+=TYPE)*)?
	 '{' members+=Member* '}'
;

Class:
	('['annotations+=WORD']')*
	 visibility=Visibility?
	 sealed?='sealed'?
	 static?='static'?
	 'class' name=TYPE
	(':' superTypes+=TYPE (',' superTypes+=TYPE)*)?
	 '{' members+=Member* '}'
;

Enum:
	('['annotations+=WORD']')*
	 visibility=Visibility?
	 'enum' name=TYPE
	 '{' (values+=WORD (',' values+=WORD)*)? '}'
;

Method:
	('['annotations+=WORD']')*
	 visibility=Visibility?
	 implicit?='implicit'?
	 opertor?='operator'?
	 override?='override'?
	 static?='static'?
	 type=TYPE
	 name=WORD
	 '(' (arguments+=Argument (',' arguments+=Argument)*)? ')'
	 '{' statements+=Statement*	'}';

Argument:
	('['annotations+=WORD']')*
	ref?='ref'?
	in?='in'?
	type=TYPE
	name=WORD;

Field:
	('['annotations+=WORD']')*
	 visibility=Visibility?
	 type=TYPE
	 name=WORD ';'
;

@Override
Expression:
	LogicalOr ({InlineAssignment.left=current} kind=AssignmentKind right=LogicalOr)*;

@Override
UnaryMinus returns Expression:
	UnaryPlus | {UnaryMinus} '-' expression=UnaryPlus;

UnaryPlus returns Expression:
	PreDecrement | {UnaryPlus} '+' expression=PreDecrement;

PreDecrement returns Expression:
	PreIncrement | {PreDecrement} '--' expression=PreIncrement;

PreIncrement returns Expression:
	Primary | {PreIncrement} '++' expression=Primary;

@Override
Statement:
	Selection | Iteration | FunctionCall | Assignment | For | Declaration | Return;

@Override
Iteration:
	'while' '(' condition=Expression ')'
	'{' statements+=Statement* '}';

@Override
Selection:
	'if' branches+=Branch
	('else' 'if' branches+=Branch)*
	('else' branches+=Block)?;

@Override
Branch:
	'(' condition=Expression ')'
	'{' statements+=Statement* '}';

For:
	'for' '(' initialization=Assignment ';' condition=Expression ';' increment=Assignment ')'
	'{'
	statements+=Statement*
	'}';

@Override
Return:
	'return' expression=Expression ';';

Declaration:
	(var?='var' | type=TYPE) variable=Access 
	(assignmentType=AssignmentKind expression=Expression)? ';';
	
@Override
Assignment:
	variable=Access kind=AssignmentKind expression=Expression ';'
;

@Override
FunctionCall:
	function=WORD
	'(' (parameters+=Expression (',' parameters+=Expression)*)? ')' ';';

Lambda: {Lambda}
	'(' (arguments+=Argument (',' arguments+=Argument)*)? ')' '=>' '{' statements+=Statement* '}';

Index: identifier=WORD  '[' (parameters+=Expression ( ',' parameters+=Expression)*)?  ']';

@Override
Primary returns Expression: 
	FloatLiteral |
	StringLiteral |
	BooleanLiteral |
	Access|
	FunctionCall|
	Index|
	'(' Expression ')'
;

QUALIFIEDNAME: WORD ('.' WORD)*;

TYPE: WORD ('<' WORD (',' WORD)* '>')?;
	
enum Visibility: default|public|protected|private;

terminal MULTIPLE_LINES_COMMENT: '/*'->'*/ ';

terminal SINGLE_LINE_COMMENT: '//' !('\n' | '\r')* ('\r'? '\n')?;