@Ecore(nsURI="azpillaga.world/M")
package m.game

class Game {
	refers Function[] functions
	refers Component[] components
}
class File {
	contains Function[] functions
	refers Component[] components
	refers Group[] groups
}
class Group {
	refers Expression[] expressions
	refers Constraint[] constraints
}
class Constraint {
	refers Expression expression
	String reason
	refers Type ^type
}

class Component {
	refers Type ^type
	String name
}

class Type {
	
}

class ArrayType extends Type {
	refers Type ^type
	int length
}

class FunctionType extends Type {
	int generics
	refers Type[] parameters
	refers Type result
}

class Function {
	String name
	contains Variable[] parameters
	contains Statement[] statements
	contains Expression[0..1] result
	refers FunctionType ^type
}

interface Statement {
}

class Selection extends Statement {
	contains Expression condition
	contains Statement[] statements
}

class Iteration extends Statement {
	contains Expression condition
	contains Statement[] statements
}

class Foreach extends Statement {
	contains Variable variable
	contains Statement[] statements
}

class Assignment extends Statement {
	contains Atom atom
	contains Expression expression
}

class Delegation extends Statement {
	contains Call call
}

class Expression {
}

class Orable extends Expression {
}

class Andable extends Orable {
}

class Equatable extends Andable {
}

class Orderable extends Equatable {
}

class Addable extends Orderable {
}

class Multipliable extends Addable {
}

class Collectable extends Multipliable {
}

class Primary extends Collectable {
}

class Call extends Primary {
	String name
	String[] generics
	contains Expression[] arguments
}

class Negation extends Primary {
	contains Primary expression
}

class Cardinality extends Primary {
	contains Primary expression
}

class Priorization extends Primary {
	contains Expression expression
}

class Vectorization extends Primary {
	contains Expression[] entries
}

class Comprehension extends Primary {
	contains Variable variable
	contains Expression predicate
}

class Atom extends Primary {
}

class Variable extends Atom {
	String name
}

class Cell extends Atom {
	contains Variable entity
	String component
}

class Or extends Orable {
	contains Orable left
	contains Andable right
}

class And extends Andable {
	contains Andable left
	contains Equatable right
}

class Equality extends Equatable {
	contains Equatable left
	contains Orderable right
}

class Inequality extends Equatable {
	contains Equatable left
	contains Orderable right
}

class Lower extends Orderable {
	contains Orderable left
	contains Addable right
}

class LowerOrEqual extends Orderable {
	contains Orderable left
	contains Addable right
}

class GreaterOrEqual extends Orderable {
	contains Orderable left
	contains Addable right
}

class Greater extends Orderable {
	contains Orderable left
	contains Addable right
}

class Addition extends Addable {
	contains Addable left
	contains Multipliable right
}

class Subtraction extends Addable {
	contains Addable left
	contains Multipliable right
}

class Multiplication extends Multipliable {
	contains Multipliable left
	contains Collectable right
}

class Division extends Multipliable {
	contains Multipliable left
	contains Collectable right
}

class Member extends Collectable {
	contains Collectable left
	contains Primary right
}