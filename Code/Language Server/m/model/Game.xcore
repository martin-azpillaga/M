@Ecore(nsURI="azpillaga.world/game")
@GenModel(importerID="org.eclipse.emf.importer.ecore")
package game

class Game {
	String name
	String version
	refers Type[] types
	contains System[] systems
	refers ComponentData[] components
	contains End end
	refers Function[] functions
}

class Function {
	String name
	refers Type ^type
	contains Statement[] statements
}

class ComponentData {
	String name
	refers Type ^type
}

class System {
	String name
	contains Statement[] statements
	contains Query[] queries
}

class Query {
	String name
	contains Access[] accesses
}

class Access {
	String name
	AccessKind kind
}

interface Statement {
}

class Selection extends Statement {
	contains Expression condition
	contains Statement[] positiveStatements
	contains Statement[] negativeStatements
}

class Iteration extends Statement {
	contains Expression condition
	contains Statement[] statements
}

class Forall extends Statement {
	contains Expression condition
	contains Statement[] statements
	contains Variable variable
}

class Assignment extends Statement {
	contains Expression atom
	contains Expression expression
}

class Subprocess extends Statement {
	contains Call call
}

interface Expression {
	refers Type ^type
}

interface Orable extends Expression {
}

interface Andable extends Orable {
}

interface Equatable extends Andable {
}

interface Comparable extends Equatable {
}

interface Addable extends Comparable {
}

interface Multipliable extends Addable {
}

interface Setable extends Multipliable {
}

class Or extends Orable {
	contains Orable left
	contains Andable right
}

class And extends Andable {
	contains Andable left
	contains Equatable right
}

class Equality extends Equatable {
	EqualityKind kind
	contains Equatable left
	contains Comparable right
}

class Comparison extends Comparable {
	ComparisonKind kind
	contains Comparable left
	contains Addable right
}

class Addition extends Addable {
	AdditiveKind kind
	contains Addable left
	contains Multipliable right
}

class Multiplication extends Multipliable {
	MultiplicativeKind kind
	contains Multipliable left
	contains Setable right
}

class SetExpression extends Setable {
	contains Setable left
	contains Primary right
}

interface Primary extends Setable {
}

class Call extends Primary {
	contains Expression[] arguments
	String name
}

class LogicalNot extends Primary {
	contains Primary expression
}

class Cardinal extends Primary {
	contains Primary expression
}

interface Collection extends Primary {
}

class Brackets extends Collection {
	contains Expression expression
}

class Join extends Collection {
	contains Expression[] entries
}

class ImplicitSet extends Collection {
	contains Expression predicate
	contains Variable variable
}

interface Atom extends Primary {
	contains Expression index
}

class Index extends Primary {
	contains Atom[1] atom
	contains Expression expression
}

class Variable extends Atom {
	String name
}

class Cell extends Atom {
	contains Variable entity
	contains Variable component
}

class Type {
	String name
	refers Type[] parameters
	boolean valueType
	String namespace
}

enum EqualityKind {
	equal as "="
	notEqual as "≠" = 1
}

enum AccessKind {
	exist
	read = 1
	write = 2
}

enum ComparisonKind {
	lower as "<"
	lowerOrEqual as "≤" = 1
	greaterOrEqual as "≥" = 2
	greater as ">" = 3
}

enum AdditiveKind {
	add as "+"
	subtract as "-" = 1
}

enum MultiplicativeKind {
	multiply as "×"
	divide as "÷" = 1
	remainder = 2
}

class End {
}