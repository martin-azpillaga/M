module m.GenerateM

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

Workflow 
{
	component = XtextGenerator 
	{
		configuration = 
		{
			project = StandardProjectConfig 
			{
				baseName = "m"
				rootPath = ".."
				eclipsePlugin = { enabled = true }
				createEclipseMetaData = true
			}
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.M"
			grammarUri = "platform:/resource/m/src/m/grammar/M.xtext"
			fileExtensions = "m"
			
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = true }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = true }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = false }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = true }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = true }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = true }
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.Text"
			grammarUri = "platform:/resource/m/src/m/grammar/Text.xtext"
			fileExtensions = "text"
			referencedResource = "platform:/resource/m/model/generated/M.genmodel"
			
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = true }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = false generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = false }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = false }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = false}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = false }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.Blocks"
			grammarUri = "platform:/resource/m/src/m/grammar/Blocks.xtext"
			fileExtensions = "blocks"
			referencedResource = "platform:/resource/m/model/generated/M.genmodel"
			
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = true }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = false generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = false }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = false }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = false}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = false }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.HybridUnity"
			grammarUri = "platform:/resource/m/src/m/grammar/HybridUnity.xtext"
			fileExtensions = "cs, prefab"
			referencedResource = "platform:/resource/m/model/generated/M.genmodel"
			
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = true }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = false generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = false }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = false }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = false}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = false }
		}
	}
}
