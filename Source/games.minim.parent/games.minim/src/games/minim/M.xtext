grammar games.minim.M with org.eclipse.xtext.common.Terminals

generate m "http://www.minim.games/M"

Game:
	(entities+=Entity|systems+=System)*
	('main' 'world' 'contains' mainEntities+=[Entity]+ '.')?
	functions+=Function*
	subrutines+=Subrutine*
	('and'
		title = ID '.'
	tagComponents+=Name+ '.'
	real1Components+=Name+ '.'
	real2Components+=Name+ '.'
	real3Components+=Name+ '.'
	real4Components+=Name+ '.'
	enumerationComponents+=Name '.'
	referenceComponents+=Name '.'
	timerComponents+=Name '.'
	triggerComponents+=Name '.'
	rangeComponents+=Name '.'
	input2DComponents+=Name '.'
	sensorComponents+=Name '.'
	textComponents+=Name '.'
	entityComponents+=Name '.'
	spriteComponents+=Name '.'
	audioComponents+=Name '.'
	meshComponents+=Name '.'
	materialComponents+=Name '.'
	fontComponents+=Name '.'
	
	sprites+=Name '.'
	audios+=Name '.'
	meshes+=Name '.'
	materials+=Name '.'
	texts+=Name '.'
	fonts+=Name '.'
	enumerations+=Enum '.'
	
	transformations+=Name '.'
	voids+=Name '.')?
;
Expression: ArithmeticExpression | BooleanExpression;
System returns Control:	name=ID ':'	commands+=Command+;

Command: Control|Assignment|SubrutineCall|Break|Initialization;

Break: {Break} 'break';
Initialization: 'initialize' variable=Name;

Control:
	  {Loop} 'for' 'each' 'entity' group=Name 
	  		('with' tags+=[Name]* 
	  		('timed' 'out' timers+=[Name]+)? 
	  		('triggered' triggers+=[Name]+)? 
	  		('enter' enters+=[Name]+)? 
	  		('stay' stays+=[Name]+)? 
	  		('exit' exits+=[Name]+)?
	  		('without' exclusions+=[Name]+)? 
	  		entities?='entities'?
	  		('data' datas+=[Name]+)? 
	  		)? '{' commands+=Command+ '}'
	| {Check} 'if' condition=Condition
			( 'else' 'if' conditions+=Condition )*
			( 'else' '{' elseCommands+=Command+ '}' )?
	| {While} 'while' condition=BooleanExpression '{' commands+=Command+ '}'
	| {LoopEnum} 'for' 'each' 'value' variable=Name 'in' component=[Name] '{' commands+=Command '}'	
;

Condition returns Control:
	{Condition} condition=BooleanExpression '{' commands+=Command+ '}'
;

Assignment:
	  {ComponentAssignment} group=[Name] '.' component=[Name] assignment=AssignmentType expression=ArithmeticExpression
	| {VariableAssignment} variable=Name assignment=AssignmentType expression=ArithmeticExpression
;

SubrutineCall:
	subrutine=[Name] '('  parameters+=ArithmeticExpression (',' parameters+=ArithmeticExpression)* ')'
;

Atomic returns ArithmeticExpression: 
	   ({Access} group=[Name] '.' component=[Name] range?=TILT?)
	|  ({Call} function=[Name] '(' parameters+=ArithmeticExpression (',' parameters+=ArithmeticExpression)* ')')
	|  ({Pop} variable=[Name]) 
;

Function:
	'function' name=ID '(' parameters+=Name (',' parameters+=Name)* ')' '{' commands+=Command+ 'return' '}'
;
Subrutine:
	'subrutine' name=ID '(' parameters+=Name (',' parameters+=Name)* ')' '{' commands+=Command+ '}'
;

Entity:
	name=ID 
	('based' 'on' base=[Entity] ('without' removed+=[Name] (',' removed+=[Name])*)?)?
	('has'	values+=Value (','? values+=Value)*)? 
	('contains' children+=Entity+)? '.';
	
Value:
	  {Tag}   component=[Name]
	| {Real1} component=[Name] x=Number
	| {Real2} component=[Name] x=Number y=Number
	| {Real3} component=[Name] x=Number y=Number z=Number
	| {Real4} component=[Name] x=Number y=Number z=Number w=Number
	| {Enumeration} component=[Name] '['values+=[Name]+']'
	| {Reference} component=[Name] REFERENCE entity=[Entity]
	| {Sprite} component=[Name] SPRITE value=[Name]
	| {Audio} component=[Name] AUDIO value=[Name]
	| {Text} component=[Name] value=STRING
	| {Material} component=[Name] MATERIAL value=[Name]
	| {Mesh} component=[Name] MESH value=[Name]
	| {Font} component=[Name] FONT value=[Name]
	| {Timer} component=[Name] seconds=Number 's'
	| {Trigger} component=[Name] button=Button
	| {Range} component=[Name] axis=Axis
	| {Input2D} component=[Name] value=Input2
	| {Sensor} component=[Name] SENSOR '['values+=[Name]+']'
;
terminal REFERENCE: 'entity.';
terminal SPRITE: 'sprite.';
terminal AUDIO: 'audio.';
terminal SENSOR: 'detect';
terminal MESH: 'mesh.';
terminal MATERIAL: 'material.';
terminal FONT: 'font.';
terminal TILT: 'tilt';
BooleanExpression:
  And ({Or.left=current} 'or' right=And)*;
And returns BooleanExpression:
  PrimaryB ({And.left=current} op=('and') right=PrimaryB)*;
PrimaryB returns BooleanExpression:
    =>AtomicB 
  | {BooleanBrackets} '(' expression=BooleanExpression ')' 
  | {Not} '!' expression=PrimaryB;
AtomicB returns BooleanExpression:
	  {Comparison} left=Addition type=RelationType right=Addition
	| {BooleanVariable} variable=[Name]
;
ArithmeticExpression: Addition;
Addition returns ArithmeticExpression:
  Multiplication (({Plus.left=current} '+'|{Minus.left=current} '-') right=Multiplication)*;
Multiplication returns ArithmeticExpression:
  Exponentiation (({Times.left=current} '*'|{Divide.left=current}'/'|{Modulus.left=current}'%') right=Exponentiation)*;
Exponentiation returns ArithmeticExpression:
	Bitwise ({Exponentiation.left=current} '**' right=Bitwise)*;
Bitwise returns ArithmeticExpression:
	Unary ({Bitwise.left=current} op=('&'|'|'|'~') right=Unary)*;
Unary returns ArithmeticExpression:
	Primary ({Increment.left=current} '++'|{Decrement.left=current}'--')?;
Primary returns ArithmeticExpression:
  Atomic |
  {ArithmeticBrackets}'(' expression=Addition ')';



Enum: name=ID values+=Name+;
Name: name=ID;
Number:	{Decimal} negative?='-'? wholePart=INT ('.' decimalPart=INT)?;


enum Axis: LeftX='gamepad.leftX'|LeftY='gamepad.leftY'|RightX='gamepad.rightX'|RightY='gamepad.rightY';
enum Button: Down='gamepad.south'|Left='gamepad.west'|Right='gamepad.east'|Up='gamepad.north'|LeftTrigger='gamepad.leftTrigger'|RightTrigger='gamepad.rightTrigger';
enum Input2: mouse='mouse.position';
enum RelationType: over='>'|under='<'|equal='='|notequal='!='|overorequal='>='|underorequal='<=';
enum AssignmentType: set='='|increase='+='|decrease='-='|multiply='*='|divide='/='|modulus='%='|and='&='|or='|=';
enum UnityComponentType returns EngineComponentType:
	canvas='nonono'|bodyType|serializedVersion
	|orthographic|orthographicSize|nearClip|clearFlags
	|lightType|screenExpand|screenSize|screenPosition
	|inputModule|graphicRaycaster|eventSystem|uiScaleMode|font|canvasRenderer
;
enum EngineComponentType: 
	ears|perspective|mass|position|rotation|scale
	|radius|velocity|acceleration|emission
	|intensity|range|spotAngle|viewAngle|viewDistance
	|extent|force|restitution|friction
	|clearColor|canvasScaler='canvas'
	|sprite='appearance'|mesh|material|audio='audiosource'|text|number;
enum EngineTransformationType: abs|sqrt|cos|sin|tan|exp|log|random|create|x|y|z|w|join;
enum EngineVoidType: create|destroy|add|remove;
enum FieldType: value|x|y|z|w;