grammar games.minim.M with org.eclipse.xtext.common.Terminals

import "http://www.minim.games/M"

Game:
	(
		entities+=Entity
		|systems+=System
		|functions+=Function
		|subrutines+=Subrutine
		|MAIN_ENTITIES mainEntities+=[Entity]'.'
	)*
;
System returns Control:	{System} name=ID START_SYSTEM commands+=Command+;

Command: Control|Assignment|SubrutineCall|Break|Initialization;

Break: {Break} STOP_ITERATION;
Initialization: DECLARE_VARIABLE variable=Name;

Constraint:
	negated?=NEGATE_CONSTRAINT? event=EventType? component=[Name]
;


Control:
	  {Loop} FOR (all?=ALL|number=ArithmeticExpression) ENTITIES group=Name (CONSTRAINTS constraints+=Constraint+)?
	  		'{' commands+=Command+ '}'
	| {Check} IF condition=Condition
			( ELSEIF conditions+=Condition )*
			( ELSE '{' commands+=Command+ '}' )?
	| {While} WHILE condition=BooleanExpression '{' commands+=Command+ '}'	
;

Condition returns Control:
	{Condition} condition=BooleanExpression '{' commands+=Command+ '}'
;

Assignment:
	  {ComponentAssignment} group=[Name] '.' component=[Name] assignment=AssignmentType expression=ArithmeticExpression
	| {VariableAssignment} variable=Name assignment=AssignmentType expression=ArithmeticExpression
	| {CreatedAssignment} variable=Name START_SYSTEM assignment=AssignmentType expression=ArithmeticExpression
;

SubrutineCall:
	subrutine=[Name] '('  parameters+=ArithmeticExpression (',' parameters+=ArithmeticExpression)* ')'
;

Atomic returns ArithmeticExpression: 
	   ({Access} group=[Name] '.' component=[Name] (range?=TILT|vector?=VECTOR)?)
	|  ({Call} function=[Name] '(' parameters+=ArithmeticExpression (',' parameters+=ArithmeticExpression)* ')')
	|  ({Pop} variable=[Name])
;

Function:
	DECLARE_FUNCTION name=ID '(' parameters+=Name (',' parameters+=Name)* ')' '{' commands+=Command+ 'return' '}'
;
Subrutine:
	DECLARE_SUBRUTINE name=ID '(' parameters+=Name (',' parameters+=Name)* ')' '{' commands+=Command+ '}'
;

Entity:
	name=ID 
	(BASE_ENTITY base=[Entity] (REMOVED_COMPONENTS removed+=[Name] (',' removed+=[Name])*)?)?
	(ENTITY_COMPONENTS	values+=Value (','? values+=Value)*)? 
	(ENTITY_CHILDREN children+=Entity+)? '.';
	
Value:
	  {Tag}   component=[Name]
	| {Real1} component=[Name] x=Number
	| {Real2} component=[Name] x=Number y=Number
	| {Real3} component=[Name] x=Number y=Number z=Number
	| {Real4} component=[Name] x=Number y=Number z=Number w=Number
	| {Enumeration} component=[Name] '['values+=[Name]+']'
	| {Reference} component=[Name] REFERENCE entity=[Entity]
	| {Sprite} component=[Name] SPRITE value=[Name]
	| {Audio} component=[Name] AUDIO value=[Name]
	| {Text} component=[Name] value=STRING
	| {Material} component=[Name] MATERIAL value=[Name]
	| {Mesh} component=[Name] MESH value=[Name]
	| {Font} component=[Name] FONT value=[Name]
	| {Timer} component=[Name] value=Number SECONDS
	| {Trigger} component=[Name] value=TriggerType
	| {Range} component=[Name] value=AxisType
	| {Vector} component=[Name] value=VectorType
	| {Sensor} component=[Name] SENSOR '['values+=[Name]+']'
	| {Click} component=[Name] CLICK
;

BooleanExpression:
  Boolean1 ({Or.left=current} OR right=Boolean1)*;
Boolean1 returns BooleanExpression:
  PrimaryB ({And.left=current} AND right=PrimaryB)*;
PrimaryB returns BooleanExpression:
    =>AtomicB 
  | {BooleanBrackets} '(' expression=BooleanExpression ')' 
  | {Not} NOT expression=PrimaryB;
AtomicB returns BooleanExpression:
	  {Comparison} left=Addition type=RelationType right=Addition
	| {BooleanVariable} variable=[Name]
;
ArithmeticExpression: Addition;
Addition returns ArithmeticExpression:
  Multiplication (({Plus.left=current} '+'|{Minus.left=current} '-') right=Multiplication)*;
Multiplication returns ArithmeticExpression:
  Exponentiation (({Times.left=current} '*'|{Divide.left=current}'/'|{Modulus.left=current}'%') right=Exponentiation)*;
Exponentiation returns ArithmeticExpression:
	Bitwise ({Exponentiation.left=current} '**' right=Bitwise)*;
Bitwise returns ArithmeticExpression:
	Unary ({Bitwise.left=current} op=('&'|'|'|'~') right=Unary)*;
Unary returns ArithmeticExpression:
	Primary ({Increment.left=current} '++'|{Decrement.left=current}'--')?;
Primary returns ArithmeticExpression:
  Atomic |
  {ArithmeticBrackets}'(' expression=Addition ')';



Name: name=ID;
Number:	{Decimal} negative?='-'? wholePart=INT ('.' decimalPart=INT)?;

terminal DECLARE_FUNCTION: 'function';
terminal DECLARE_SUBRUTINE: 'subrutine';
terminal REFERENCE: 'entity.';
terminal SPRITE: 'sprite.';
terminal AUDIO: 'audio.';
terminal SENSOR: 'detect';
terminal CLICK: 'click';
terminal MESH: 'mesh.';
terminal MATERIAL: 'material.';
terminal FONT: 'font.';
terminal TILT: 'tilt';
terminal VECTOR: 'vector';
terminal OR: 'or';
terminal AND: 'and';
terminal NOT: '!';
terminal STOP_ITERATION: 'break';
terminal DECLARE_VARIABLE: 'initialize';
terminal BASE_ENTITY: 'based on';
terminal ENTITY_COMPONENTS: 'has';
terminal REMOVED_COMPONENTS: 'without';
terminal ENTITY_CHILDREN: 'contains';
terminal MAIN_ENTITIES: 'main world contains';
terminal START_SYSTEM: ':';
terminal FOR: 'for';
terminal ALL: 'all';
terminal ENTITIES: 'entity';
terminal CONSTRAINTS: 'with';
terminal NEGATE_CONSTRAINT: 'no';
terminal IF: 'if';
terminal ELSEIF: 'else if';
terminal ELSE: 'else';
terminal WHILE: 'while';
terminal SECONDS: 's';

enum EventType: tag='tagged'|timeout='timed out'|trigger='triggered'|enter='enter'|stay='stay'|exit='exit'|mouseDown='mouseDown'|mouseUp='mouseUp';
enum AxisType: 
	LeftX='gamepad.leftX'|LeftY='gamepad.leftY'|RightX='gamepad.rightX'|RightY='gamepad.rightY'
	|LeftShoulder='gamepad.leftShoulder'|RightShoulder='gamepad.rightShoulder'
;
enum TriggerType: 
	South='gamepad.south'|West='gamepad.west'|East='gamepad.east'|North='gamepad.north'
	|LeftTrigger='gamepad.leftTrigger'|RightTrigger='gamepad.rightTrigger'
	|Down='gamepad.down'|Left='gamepad.left'|Right='gamepad.right'|Up='gamepad.up'
	|Start='gamepad.start'|Select='gamepad.select'
	|LeftStick='gamepad.leftStickPress'|RightStick='gamepad.rightStickPress'
	|Optional='gamepad.optional'
	|Zero='key.0'|One='key.1'|Two='key.2'|Three='key.3'|Four='key.4'|Five='key.5'|Six='key.6'|Seven='key.7'|Eight='key.8'|Nine='key.9'
	|A='key.A'|B='key.B'|C='key.C'|D='key.D'|E='key.E'|F='key.F'|G='key.G'|H='key.H'|I='key.I'|J='key.J'|K='key.K'|L='key.L'|M='key.M'|N='key.N'|O='key.O'|P='key.P'|Q='key.Q'|R='key.R'|S='key.S'|T='key.T'|U='key.U'|V='key.V'|W='key.W'|X='key.X'|Y='key.Y'|Z='key.Z'
;
enum VectorType: mouse='mouse.position'|dpad='gamepad.dpad'|leftStick='gamepad.leftStick'|rightStick='gamepad.rightStick';
enum RelationType: over='>'|under='<'|equal='='|notequal='!='|overorequal='>='|underorequal='<=';
enum AssignmentType: set='='|increase='+='|decrease='-='|multiply='*='|divide='/='|modulus='%='|and='&='|or='|=';