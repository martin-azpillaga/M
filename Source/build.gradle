buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.xtext:xtext-gradle-plugin:2.0.4'
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version '4.0.1'
}

repositories {
	mavenCentral()
}


apply plugin: 'org.xtext.xtend'
apply plugin: 'java'
apply plugin: 'jacoco'

ext.xtextVersion = '2.19.0'
ext.base = 'm'
ext.grammars = ['Expressions','Modular','M','Text','Testua','CSharp','Javascript','XML','JSON','YAML']

sourceSets {
	main.java.srcDirs = ["m/src", "m/src-gen"]
	main.resources.srcDirs = ["m/src", "m/src-gen"]
	main.xtendOutputDir = 'm/generated'
}

configurations {
	mwe2 {
		extendsFrom implementation
	}
}

dependencies {
	implementation platform("org.eclipse.xtext:xtext-dev-bom:${xtextVersion}")
	implementation "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	mwe2 'org.eclipse.emf:org.eclipse.emf.mwe2.launch'
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	mwe2 'org.eclipse.xtext:xtext-antlr-generator'
	mwe2 files("${projectDir}/m/")
}



task runWorkflow(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2 
	args += "m/Workflow.mwe2"

	inputs.files fileTree('m/source') { include "**/*.xtext" }
	inputs.file 'm/Workflow.mwe2'

	outputs.dir 'm/generated'
	outputs.files fileTree('m/generated')

	outputs.files grammars.collect {"m/source/${it}RuntimeModule.xtend"}
	outputs.files grammars.collect {"m/source/${it}StandaloneSetup.xtend"}

	outputs.dir 'm/source/ide'
	outputs.files fileTree('m/source/ide')
}

clean.dependsOn(cleanRunWorkflow)

generateXtext.dependsOn(runWorkflow)
clean.dependsOn(cleanGenerateXtext)

shadowJar {
	baseName = "${base}"
	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA', 
			'**/*.xtend', '**/*.mwe2', '**/*.g', '**/*.xtext'

	manifest.attributes 'Main-Class': 'm.main.Main'
}

task installGitHooks (type: Exec){
	commandLine 'git', 'config', 'core.hooksPath', 'Continuous deployment/hooks/'
}

task ignore (){
	outputs.file '.gitignore'
	doLast{
		file('.gitignore').text = ".gradle\n.gitignore"
	}
}

clean.dependsOn(cleanIgnore)

task copyArtifacts (type: Copy){
	from 'build/libs/m.jar'
	from 'build/libs/m-min.jar'
	into 'artifacts'
}

copyArtifacts.dependsOn(shadowJar)

task copyClasses (type: Copy){
	from 'build/classes/java/main/m'
	into 'artifacts/m'
}

task gen (type: Exec){
	workingDir 'artifacts'
	commandLine 'java', '-cp', 'm.jar', 'm.main.GenerateHtml'
}

gen.dependsOn(copyArtifacts)
gen.dependsOn(copyClasses)

clean.dependsOn(cleanCopyArtifacts)

build.dependsOn(gen)
build.dependsOn(cleanCopyClasses)

cleanCopyClasses.mustRunAfter gen

//jacoco
// java -javaagent:jacocoagent.jar=destfile=other.exec -jar m.jar --> creates jacoco.exec
// java -jar jacococli.jar merge first.exec second.exec --destfile=merged.exec
// java -jar jacococli.jar report jacoco.exec --classfiles m.jar --html report

// strace
// strace -s 10000 -f -q -e trace=write,open,creat,ftruncate,truncate,openat -e signal=sigkill -q java Main
jar {
	archiveName "${base}-min.jar"
	manifest {
        attributes 'Main-Class': 'm.main.Main'
    }
	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA', 
			'**/*.xtend', '**/*.mwe2', '**/*.g', '**/*.xtext'
}