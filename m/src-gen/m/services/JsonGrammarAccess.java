/*
 * generated by Xtext
 */
package m.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JsonGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_2_0_0 = (RuleCall)cFieldsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_2_1_1_0 = (RuleCall)cFieldsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Object:
		//	{Object}
		//	'{' (fields+=Field (',' fields+=Field)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Object} '{' (fields+=Field (',' fields+=Field)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Object}
		public Action getObjectAction_0() { return cObjectAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(fields+=Field (',' fields+=Field)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_0() { return cFieldsAssignment_2_0; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_0_0() { return cFieldsFieldParserRuleCall_2_0_0; }
		
		//(',' fields+=Field)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_1_1() { return cFieldsAssignment_2_1_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_1_1_0() { return cFieldsFieldParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Field:
		//	name=STRING ':' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING ':' value=Value
		public Group getGroup() { return cGroup; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFloatValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLongValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Value:
		//	Object | Array | StringValue | FloatValue | LongValue | BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Object | Array | StringValue | FloatValue | LongValue | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Object
		public RuleCall getObjectParserRuleCall_0() { return cObjectParserRuleCall_0; }
		
		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_3() { return cFloatValueParserRuleCall_3; }
		
		//LongValue
		public RuleCall getLongValueParserRuleCall_4() { return cLongValueParserRuleCall_4; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_5() { return cBooleanValueParserRuleCall_5; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsValueParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsValueParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Array:
		//	{Array} '[' (elements+=Value (',' elements+=Value)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Array} '[' (elements+=Value (',' elements+=Value)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(elements+=Value (',' elements+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=Value
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//Value
		public RuleCall getElementsValueParserRuleCall_2_0_0() { return cElementsValueParserRuleCall_2_0_0; }
		
		//(',' elements+=Value)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=Value
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//Value
		public RuleCall getElementsValueParserRuleCall_2_1_1_0() { return cElementsValueParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.FloatValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatValue:
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}
	public class LongValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.LongValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLONGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LongValue:
		//	value=LONG;
		@Override public ParserRule getRule() { return rule; }
		
		//value=LONG
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//LONG
		public RuleCall getValueLONGTerminalRuleCall_0() { return cValueLONGTerminalRuleCall_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Boolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Boolean
		public RuleCall getValueBooleanEnumRuleCall_0() { return cValueBooleanEnumRuleCall_0; }
	}
	
	public class BooleanElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Boolean:
		//	TRUE='true' | FALSE='false';
		public EnumRule getRule() { return rule; }
		
		//TRUE='true' | FALSE='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE='true'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//'true'
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE='false'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//'false'
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	
	private final ObjectElements pObject;
	private final FieldElements pField;
	private final ValueElements pValue;
	private final ArrayElements pArray;
	private final StringValueElements pStringValue;
	private final FloatValueElements pFloatValue;
	private final LongValueElements pLongValue;
	private final BooleanValueElements pBooleanValue;
	private final BooleanElements eBoolean;
	private final TerminalRule tLONG;
	private final TerminalRule tFLOAT;
	private final TerminalRule tSTRING;
	private final TerminalRule tWHITE_SPACE;
	private final TerminalRule tID;
	
	private final Grammar grammar;

	@Inject
	public JsonGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pObject = new ObjectElements();
		this.pField = new FieldElements();
		this.pValue = new ValueElements();
		this.pArray = new ArrayElements();
		this.pStringValue = new StringValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pLongValue = new LongValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.eBoolean = new BooleanElements();
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.LONG");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.FLOAT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.STRING");
		this.tWHITE_SPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.WHITE_SPACE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.Json.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m.Json".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Object:
	//	{Object}
	//	'{' (fields+=Field (',' fields+=Field)*)? '}';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Field:
	//	name=STRING ':' value=Value;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Value:
	//	Object | Array | StringValue | FloatValue | LongValue | BooleanValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Array:
	//	{Array} '[' (elements+=Value (',' elements+=Value)*)? ']';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//FloatValue:
	//	value=FLOAT;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//LongValue:
	//	value=LONG;
	public LongValueElements getLongValueAccess() {
		return pLongValue;
	}
	
	public ParserRule getLongValueRule() {
		return getLongValueAccess().getRule();
	}
	
	//BooleanValue:
	//	value=Boolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//enum Boolean:
	//	TRUE='true' | FALSE='false';
	public BooleanElements getBooleanAccess() {
		return eBoolean;
	}
	
	public EnumRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//terminal LONG returns ecore::ELong:
	//	'-'? '0'..'9'+;
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	'-'? '0'..'9'* '.' '0'..'9'+ ('e' '-'? '0'..'9'+)?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal STRING:
	//	'"' !'"'* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal WHITE_SPACE:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWHITE_SPACERule() {
		return tWHITE_SPACE;
	}
	
	//terminal ID:
	//	('0'..'9' | 'a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '.' | '-')*;
	public TerminalRule getIDRule() {
		return tID;
	}
}
