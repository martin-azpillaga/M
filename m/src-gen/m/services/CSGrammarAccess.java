/*
 * generated by Xtext
 */
package m.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CSGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUsingsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUsingsUsingParserRuleCall_0_0 = (RuleCall)cUsingsAssignment_0.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesMemberParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		
		//File:
		//	usings+=Using*
		//	types+=Member*;
		@Override public ParserRule getRule() { return rule; }
		
		//usings+=Using* types+=Member*
		public Group getGroup() { return cGroup; }
		
		//usings+=Using*
		public Assignment getUsingsAssignment_0() { return cUsingsAssignment_0; }
		
		//Using
		public RuleCall getUsingsUsingParserRuleCall_0_0() { return cUsingsUsingParserRuleCall_0_0; }
		
		//types+=Member*
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//Member
		public RuleCall getTypesMemberParserRuleCall_1_0() { return cTypesMemberParserRuleCall_1_0; }
	}
	public class UsingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Using");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Using:
		//	'using' name=QualifiedName ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'using' name=QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'using'
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//QualifiedName:
		//	names+=ID ('.' names+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//names+=ID ('.' names+=ID)*
		public Group getGroup() { return cGroup; }
		
		//names+=ID
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0() { return cNamesIDTerminalRuleCall_0_0; }
		
		//('.' names+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//names+=ID
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0() { return cNamesIDTerminalRuleCall_1_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSealedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSealedSealedKeyword_0_0 = (Keyword)cSealedAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTypeNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypesTypeNameParserRuleCall_3_1_0 = (RuleCall)cSuperTypesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSuperTypesTypeNameParserRuleCall_3_2_1_0 = (RuleCall)cSuperTypesAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Type:
		//	sealed?='sealed'?
		//	type=TypeEnum name=TypeName (':' superTypes+=TypeName (',' superTypes+=TypeName)*)?
		//	'{'
		//	members+=Member*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//sealed?='sealed'? type=TypeEnum name=TypeName (':' superTypes+=TypeName (',' superTypes+=TypeName)*)? '{'
		//members+=Member* '}'
		public Group getGroup() { return cGroup; }
		
		//sealed?='sealed'?
		public Assignment getSealedAssignment_0() { return cSealedAssignment_0; }
		
		//'sealed'
		public Keyword getSealedSealedKeyword_0_0() { return cSealedSealedKeyword_0_0; }
		
		//type=TypeEnum
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TypeEnum
		public RuleCall getTypeTypeEnumEnumRuleCall_1_0() { return cTypeTypeEnumEnumRuleCall_1_0; }
		
		//name=TypeName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//TypeName
		public RuleCall getNameTypeNameParserRuleCall_2_0() { return cNameTypeNameParserRuleCall_2_0; }
		
		//(':' superTypes+=TypeName (',' superTypes+=TypeName)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//superTypes+=TypeName
		public Assignment getSuperTypesAssignment_3_1() { return cSuperTypesAssignment_3_1; }
		
		//TypeName
		public RuleCall getSuperTypesTypeNameParserRuleCall_3_1_0() { return cSuperTypesTypeNameParserRuleCall_3_1_0; }
		
		//(',' superTypes+=TypeName)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//superTypes+=TypeName
		public Assignment getSuperTypesAssignment_3_2_1() { return cSuperTypesAssignment_3_2_1; }
		
		//TypeName
		public RuleCall getSuperTypesTypeNameParserRuleCall_3_2_1_0() { return cSuperTypesTypeNameParserRuleCall_3_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//members+=Member*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_5_0() { return cMembersMemberParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cStaticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cStaticStaticKeyword_2_0 = (Keyword)cStaticAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueTypeParserRuleCall_3_0_0 = (RuleCall)cValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueMethodParserRuleCall_3_0_1 = (RuleCall)cValueAlternatives_3_0.eContents().get(1);
		private final RuleCall cValueFieldParserRuleCall_3_0_2 = (RuleCall)cValueAlternatives_3_0.eContents().get(2);
		
		//Member:
		//	annotations+=Annotation*
		//	visibility=Visibility static?='static'?
		//	value=(Type | Method | Field);
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* visibility=Visibility static?='static'? value=(Type | Method | Field)
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//visibility=Visibility
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_2() { return cStaticAssignment_2; }
		
		//'static'
		public Keyword getStaticStaticKeyword_2_0() { return cStaticStaticKeyword_2_0; }
		
		//value=(Type | Method | Field)
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//(Type | Method | Field)
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }
		
		//Type
		public RuleCall getValueTypeParserRuleCall_3_0_0() { return cValueTypeParserRuleCall_3_0_0; }
		
		//Method
		public RuleCall getValueMethodParserRuleCall_3_0_1() { return cValueMethodParserRuleCall_3_0_1; }
		
		//Field
		public RuleCall getValueFieldParserRuleCall_3_0_2() { return cValueFieldParserRuleCall_3_0_2; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionTypeNameParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Annotation:
		//	'[' function=TypeName ('(' parameters+=Expression (',' parameters+=Expression)* ')')? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' function=TypeName ('(' parameters+=Expression (',' parameters+=Expression)* ')')? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//function=TypeName
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//TypeName
		public RuleCall getFunctionTypeNameParserRuleCall_1_0() { return cFunctionTypeNameParserRuleCall_1_0; }
		
		//('(' parameters+=Expression (',' parameters+=Expression)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_1_0() { return cParametersExpressionParserRuleCall_2_1_0; }
		
		//(',' parameters+=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_2_1_0() { return cParametersExpressionParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGenericsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGenericsQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cGenericsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cGenericsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cGenericsQualifiedNameParserRuleCall_1_2_1_0 = (RuleCall)cGenericsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TypeName:
		//	name=QualifiedName ('<' generics+=QualifiedName (',' generics+=QualifiedName)* '>')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName ('<' generics+=QualifiedName (',' generics+=QualifiedName)* '>')?
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//('<' generics+=QualifiedName (',' generics+=QualifiedName)* '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//generics+=QualifiedName
		public Assignment getGenericsAssignment_1_1() { return cGenericsAssignment_1_1; }
		
		//QualifiedName
		public RuleCall getGenericsQualifiedNameParserRuleCall_1_1_0() { return cGenericsQualifiedNameParserRuleCall_1_1_0; }
		
		//(',' generics+=QualifiedName)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//generics+=QualifiedName
		public Assignment getGenericsAssignment_1_2_1() { return cGenericsAssignment_1_2_1; }
		
		//QualifiedName
		public RuleCall getGenericsQualifiedNameParserRuleCall_1_2_1_0() { return cGenericsQualifiedNameParserRuleCall_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeNameParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Field:
		//	type=TypeName name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=TypeName name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=TypeName
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_0_0() { return cTypeTypeNameParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRefRefKeyword_1_0 = (Keyword)cRefAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeNameParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Argument:
		//	annotations+=Annotation* ref?='ref'? type=TypeName name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* ref?='ref'? type=TypeName name=ID
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//ref?='ref'?
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//'ref'
		public Keyword getRefRefKeyword_1_0() { return cRefRefKeyword_1_0; }
		
		//type=TypeName
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_2_0() { return cTypeTypeNameParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOverrideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOverrideOverrideKeyword_1_0 = (Keyword)cOverrideAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypeTypeNameParserRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cImplicitAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cImplicitImplicitKeyword_2_1_0_0 = (Keyword)cImplicitAssignment_2_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cOperatorOperatorKeyword_2_1_1_0 = (Keyword)cOperatorAssignment_2_1_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGenericsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGenericsTypeNameParserRuleCall_4_1_0 = (RuleCall)cGenericsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cGenericsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cGenericsTypeNameParserRuleCall_4_2_1_0 = (RuleCall)cGenericsAssignment_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cArgumentsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_6_0_0 = (RuleCall)cArgumentsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_6_1_1_0 = (RuleCall)cArgumentsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCommandsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCommandsCommandParserRuleCall_9_0 = (RuleCall)cCommandsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Method Block:
		//	{Method} override?='override'? (type=TypeName | implicit?='implicit' operator?='operator') name=ID ('<'
		//	generics+=TypeName (',' generics+=TypeName)* '>')?
		//	'(' (arguments+=Argument (',' arguments+=Argument)*)? ')'
		//	'{'
		//	commands+=Command*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Method} override?='override'? (type=TypeName | implicit?='implicit' operator?='operator') name=ID ('<'
		//generics+=TypeName (',' generics+=TypeName)* '>')? '(' (arguments+=Argument (',' arguments+=Argument)*)? ')' '{'
		//commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//{Method}
		public Action getMethodAction_0() { return cMethodAction_0; }
		
		//override?='override'?
		public Assignment getOverrideAssignment_1() { return cOverrideAssignment_1; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_1_0() { return cOverrideOverrideKeyword_1_0; }
		
		//type=TypeName | implicit?='implicit' operator?='operator'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//type=TypeName
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_2_0_0() { return cTypeTypeNameParserRuleCall_2_0_0; }
		
		//implicit?='implicit' operator?='operator'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//implicit?='implicit'
		public Assignment getImplicitAssignment_2_1_0() { return cImplicitAssignment_2_1_0; }
		
		//'implicit'
		public Keyword getImplicitImplicitKeyword_2_1_0_0() { return cImplicitImplicitKeyword_2_1_0_0; }
		
		//operator?='operator'
		public Assignment getOperatorAssignment_2_1_1() { return cOperatorAssignment_2_1_1; }
		
		//'operator'
		public Keyword getOperatorOperatorKeyword_2_1_1_0() { return cOperatorOperatorKeyword_2_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('<' generics+=TypeName (',' generics+=TypeName)* '>')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }
		
		//generics+=TypeName
		public Assignment getGenericsAssignment_4_1() { return cGenericsAssignment_4_1; }
		
		//TypeName
		public RuleCall getGenericsTypeNameParserRuleCall_4_1_0() { return cGenericsTypeNameParserRuleCall_4_1_0; }
		
		//(',' generics+=TypeName)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//generics+=TypeName
		public Assignment getGenericsAssignment_4_2_1() { return cGenericsAssignment_4_2_1; }
		
		//TypeName
		public RuleCall getGenericsTypeNameParserRuleCall_4_2_1_0() { return cGenericsTypeNameParserRuleCall_4_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(arguments+=Argument (',' arguments+=Argument)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_6_0() { return cArgumentsAssignment_6_0; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_6_0_0() { return cArgumentsArgumentParserRuleCall_6_0_0; }
		
		//(',' arguments+=Argument)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_6_1_1() { return cArgumentsAssignment_6_1_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_6_1_1_0() { return cArgumentsArgumentParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_9() { return cCommandsAssignment_9; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_9_0() { return cCommandsCommandParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cAssignmentParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cReturnParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Command:
		//	For | If | While | Assignment ';' | Return ';';
		@Override public ParserRule getRule() { return rule; }
		
		//For | If | While | Assignment ';' | Return ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//For
		public RuleCall getForParserRuleCall_0() { return cForParserRuleCall_0; }
		
		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }
		
		//While
		public RuleCall getWhileParserRuleCall_2() { return cWhileParserRuleCall_2; }
		
		//Assignment ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_3_0() { return cAssignmentParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//Return ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//Return
		public RuleCall getReturnParserRuleCall_4_0() { return cReturnParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cVarVarKeyword_0_0_0 = (Keyword)cVarAssignment_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTypeTypeNameParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cAccessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessAccessParserRuleCall_1_0 = (RuleCall)cAccessAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cAssignmentTypeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cAssignmentTypeAssignmentTypeEnumRuleCall_2_0_0_0 = (RuleCall)cAssignmentTypeAssignment_2_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_1_0 = (RuleCall)cExpressionAssignment_2_0_1.eContents().get(0);
		private final Assignment cIncrementAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cIncrementPlusSignPlusSignKeyword_2_1_0 = (Keyword)cIncrementAssignment_2_1.eContents().get(0);
		private final Assignment cDecrementAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cDecrementHyphenMinusHyphenMinusKeyword_2_2_0 = (Keyword)cDecrementAssignment_2_2.eContents().get(0);
		
		//Assignment:
		//	(var?='var' | type=TypeName)? access=Access (assignmentType=AssignmentType expression=Expression | increment?='++' |
		//	decrement?='--')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(var?='var' | type=TypeName)? access=Access (assignmentType=AssignmentType expression=Expression | increment?='++' |
		//decrement?='--')?
		public Group getGroup() { return cGroup; }
		
		//(var?='var' | type=TypeName)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//var?='var'
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }
		
		//'var'
		public Keyword getVarVarKeyword_0_0_0() { return cVarVarKeyword_0_0_0; }
		
		//type=TypeName
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_0_1_0() { return cTypeTypeNameParserRuleCall_0_1_0; }
		
		//access=Access
		public Assignment getAccessAssignment_1() { return cAccessAssignment_1; }
		
		//Access
		public RuleCall getAccessAccessParserRuleCall_1_0() { return cAccessAccessParserRuleCall_1_0; }
		
		//(assignmentType=AssignmentType expression=Expression | increment?='++' | decrement?='--')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//assignmentType=AssignmentType expression=Expression
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//assignmentType=AssignmentType
		public Assignment getAssignmentTypeAssignment_2_0_0() { return cAssignmentTypeAssignment_2_0_0; }
		
		//AssignmentType
		public RuleCall getAssignmentTypeAssignmentTypeEnumRuleCall_2_0_0_0() { return cAssignmentTypeAssignmentTypeEnumRuleCall_2_0_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_0_1() { return cExpressionAssignment_2_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_1_0() { return cExpressionExpressionParserRuleCall_2_0_1_0; }
		
		//increment?='++'
		public Assignment getIncrementAssignment_2_1() { return cIncrementAssignment_2_1; }
		
		//'++'
		public Keyword getIncrementPlusSignPlusSignKeyword_2_1_0() { return cIncrementPlusSignPlusSignKeyword_2_1_0; }
		
		//decrement?='--'
		public Assignment getDecrementAssignment_2_2() { return cDecrementAssignment_2_2; }
		
		//'--'
		public Keyword getDecrementHyphenMinusHyphenMinusKeyword_2_2_0() { return cDecrementHyphenMinusHyphenMinusKeyword_2_2_0; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Return:
		//	'return' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class AccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Access");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNewAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNewNewKeyword_0_0 = (Keyword)cNewAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRefRefKeyword_1_0 = (Keyword)cRefAssignment_1.eContents().get(0);
		private final Assignment cPortionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortionsPortionParserRuleCall_2_0 = (RuleCall)cPortionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPortionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPortionsPortionParserRuleCall_3_1_0 = (RuleCall)cPortionsAssignment_3_1.eContents().get(0);
		
		//Access:
		//	new?='new'? ref?='ref'? portions+=Portion ('.' portions+=Portion)*;
		@Override public ParserRule getRule() { return rule; }
		
		//new?='new'? ref?='ref'? portions+=Portion ('.' portions+=Portion)*
		public Group getGroup() { return cGroup; }
		
		//new?='new'?
		public Assignment getNewAssignment_0() { return cNewAssignment_0; }
		
		//'new'
		public Keyword getNewNewKeyword_0_0() { return cNewNewKeyword_0_0; }
		
		//ref?='ref'?
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//'ref'
		public Keyword getRefRefKeyword_1_0() { return cRefRefKeyword_1_0; }
		
		//portions+=Portion
		public Assignment getPortionsAssignment_2() { return cPortionsAssignment_2; }
		
		//Portion
		public RuleCall getPortionsPortionParserRuleCall_2_0() { return cPortionsPortionParserRuleCall_2_0; }
		
		//('.' portions+=Portion)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//portions+=Portion
		public Assignment getPortionsAssignment_3_1() { return cPortionsAssignment_3_1; }
		
		//Portion
		public RuleCall getPortionsPortionParserRuleCall_3_1_0() { return cPortionsPortionParserRuleCall_3_1_0; }
	}
	public class PortionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Portion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLabelAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMethodCallAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLessThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cGenericsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cGenericsTypeNameParserRuleCall_1_2_1_0 = (RuleCall)cGenericsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cExpressionsAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_4_0_0 = (RuleCall)cExpressionsAssignment_1_4_0.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Keyword cCommaKeyword_1_4_1_0 = (Keyword)cGroup_1_4_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_4_1_1 = (Assignment)cGroup_1_4_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_4_1_1_0 = (RuleCall)cExpressionsAssignment_1_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInitializationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cInitializationsAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cInitializationsInitializeVariableParserRuleCall_2_3_0_0 = (RuleCall)cInitializationsAssignment_2_3_0.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cCommaKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Assignment cInitializationsAssignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final RuleCall cInitializationsInitializeVariableParserRuleCall_2_3_1_1_0 = (RuleCall)cInitializationsAssignment_2_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIndexingAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cIndexAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cIndexExpressionParserRuleCall_3_3_0 = (RuleCall)cIndexAssignment_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//Portion:
		//	{Label} name=ID
		//	| {MethodCall} name=ID ('<' generics+=TypeName '>')? '(' (expressions+=Expression (',' expressions+=Expression)*)? ')'
		//	| {Initialization} name=ID '{' (initializations+=InitializeVariable (',' initializations+=InitializeVariable)*)? '}'
		//	| {Indexing} name=ID '[' index=Expression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Label} name=ID | {MethodCall} name=ID ('<' generics+=TypeName '>')? '(' (expressions+=Expression (','
		//expressions+=Expression)*)? ')' | {Initialization} name=ID '{' (initializations+=InitializeVariable (','
		//initializations+=InitializeVariable)*)? '}' | {Indexing} name=ID '[' index=Expression ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Label} name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{Label}
		public Action getLabelAction_0_0() { return cLabelAction_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//{MethodCall} name=ID ('<' generics+=TypeName '>')? '(' (expressions+=Expression (',' expressions+=Expression)*)? ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{MethodCall}
		public Action getMethodCallAction_1_0() { return cMethodCallAction_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//('<' generics+=TypeName '>')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_2_0() { return cLessThanSignKeyword_1_2_0; }
		
		//generics+=TypeName
		public Assignment getGenericsAssignment_1_2_1() { return cGenericsAssignment_1_2_1; }
		
		//TypeName
		public RuleCall getGenericsTypeNameParserRuleCall_1_2_1_0() { return cGenericsTypeNameParserRuleCall_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2_2() { return cGreaterThanSignKeyword_1_2_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//(expressions+=Expression (',' expressions+=Expression)*)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_4_0() { return cExpressionsAssignment_1_4_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_4_0_0() { return cExpressionsExpressionParserRuleCall_1_4_0_0; }
		
		//(',' expressions+=Expression)*
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }
		
		//','
		public Keyword getCommaKeyword_1_4_1_0() { return cCommaKeyword_1_4_1_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_4_1_1() { return cExpressionsAssignment_1_4_1_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_4_1_1_0() { return cExpressionsExpressionParserRuleCall_1_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//{Initialization} name=ID '{' (initializations+=InitializeVariable (',' initializations+=InitializeVariable)*)? '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Initialization}
		public Action getInitializationAction_2_0() { return cInitializationAction_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_2() { return cLeftCurlyBracketKeyword_2_2; }
		
		//(initializations+=InitializeVariable (',' initializations+=InitializeVariable)*)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//initializations+=InitializeVariable
		public Assignment getInitializationsAssignment_2_3_0() { return cInitializationsAssignment_2_3_0; }
		
		//InitializeVariable
		public RuleCall getInitializationsInitializeVariableParserRuleCall_2_3_0_0() { return cInitializationsInitializeVariableParserRuleCall_2_3_0_0; }
		
		//(',' initializations+=InitializeVariable)*
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }
		
		//','
		public Keyword getCommaKeyword_2_3_1_0() { return cCommaKeyword_2_3_1_0; }
		
		//initializations+=InitializeVariable
		public Assignment getInitializationsAssignment_2_3_1_1() { return cInitializationsAssignment_2_3_1_1; }
		
		//InitializeVariable
		public RuleCall getInitializationsInitializeVariableParserRuleCall_2_3_1_1_0() { return cInitializationsInitializeVariableParserRuleCall_2_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//{Indexing} name=ID '[' index=Expression ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Indexing}
		public Action getIndexingAction_3_0() { return cIndexingAction_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_2() { return cLeftSquareBracketKeyword_3_2; }
		
		//index=Expression
		public Assignment getIndexAssignment_3_3() { return cIndexAssignment_3_3; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_3_3_0() { return cIndexExpressionParserRuleCall_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitializationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitializationAssignmentParserRuleCall_3_0 = (RuleCall)cInitializationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionExpressionParserRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIncrementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIncrementAssignmentParserRuleCall_7_0 = (RuleCall)cIncrementAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cCommandsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCommandsCommandParserRuleCall_10_0 = (RuleCall)cCommandsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//For Block:
		//	{For}
		//	'for' '(' initialization=Assignment ';' condition=Expression ';' increment=Assignment ')'
		//	'{'
		//	commands+=Command*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{For} 'for' '(' initialization=Assignment ';' condition=Expression ';' increment=Assignment ')' '{' commands+=Command*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{For}
		public Action getForAction_0() { return cForAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//initialization=Assignment
		public Assignment getInitializationAssignment_3() { return cInitializationAssignment_3; }
		
		//Assignment
		public RuleCall getInitializationAssignmentParserRuleCall_3_0() { return cInitializationAssignmentParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//condition=Expression
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_5_0() { return cConditionExpressionParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//increment=Assignment
		public Assignment getIncrementAssignment_7() { return cIncrementAssignment_7; }
		
		//Assignment
		public RuleCall getIncrementAssignmentParserRuleCall_7_0() { return cIncrementAssignmentParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_10() { return cCommandsAssignment_10; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_10_0() { return cCommandsCommandParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCommandsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommandsCommandParserRuleCall_6_0 = (RuleCall)cCommandsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElseIfsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElseIfsElseIfParserRuleCall_8_0 = (RuleCall)cElseIfsAssignment_8.eContents().get(0);
		private final Assignment cElseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cElseElseParserRuleCall_9_0 = (RuleCall)cElseAssignment_9.eContents().get(0);
		
		//If Block:
		//	{If}
		//	'if' '(' expression=Expression ')'
		//	'{'
		//	commands+=Command*
		//	'}'
		//	elseIfs+=ElseIf*
		//	else=Else?;
		@Override public ParserRule getRule() { return rule; }
		
		//{If} 'if' '(' expression=Expression ')' '{' commands+=Command* '}' elseIfs+=ElseIf* else=Else?
		public Group getGroup() { return cGroup; }
		
		//{If}
		public Action getIfAction_0() { return cIfAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_6() { return cCommandsAssignment_6; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_6_0() { return cCommandsCommandParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//elseIfs+=ElseIf*
		public Assignment getElseIfsAssignment_8() { return cElseIfsAssignment_8; }
		
		//ElseIf
		public RuleCall getElseIfsElseIfParserRuleCall_8_0() { return cElseIfsElseIfParserRuleCall_8_0; }
		
		//else=Else?
		public Assignment getElseAssignment_9() { return cElseAssignment_9; }
		
		//Else
		public RuleCall getElseElseParserRuleCall_9_0() { return cElseElseParserRuleCall_9_0; }
	}
	public class ElseIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.ElseIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCommandsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommandsCommandParserRuleCall_7_0 = (RuleCall)cCommandsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ElseIf Block:
		//	{ElseIf}
		//	'else' 'if' '(' expression=Expression ')'
		//	'{'
		//	commands+=Command*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseIf} 'else' 'if' '(' expression=Expression ')' '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//{ElseIf}
		public Action getElseIfAction_0() { return cElseIfAction_0; }
		
		//'else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//'if'
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_7() { return cCommandsAssignment_7; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_7_0() { return cCommandsCommandParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Else");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Else Block:
		//	{Else}
		//	'else'
		//	'{'
		//	commands+=Command*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Else} 'else' '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//{Else}
		public Action getElseAction_0() { return cElseAction_0; }
		
		//'else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0() { return cCommandsCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandsCommandParserRuleCall_5_0 = (RuleCall)cCommandsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//While Block:
		//	'while' '(' expression=Expression ')'
		//	'{'
		//	commands+=Command*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' expression=Expression ')' '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_5() { return cCommandsAssignment_5; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_5_0() { return cCommandsCommandParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLongAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueLONGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFloatAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//Atomic Expression:
		//	Access
		//	| {Long} value=LONG
		//	| {Float} value=FLOAT
		//	| {String} value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//Access | {Long} value=LONG | {Float} value=FLOAT | {String} value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Access
		public RuleCall getAccessParserRuleCall_0() { return cAccessParserRuleCall_0; }
		
		//{Long} value=LONG
		public Group getGroup_1() { return cGroup_1; }
		
		//{Long}
		public Action getLongAction_1_0() { return cLongAction_1_0; }
		
		//value=LONG
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//LONG
		public RuleCall getValueLONGTerminalRuleCall_1_1_0() { return cValueLONGTerminalRuleCall_1_1_0; }
		
		//{Float} value=FLOAT
		public Group getGroup_2() { return cGroup_2; }
		
		//{Float}
		public Action getFloatAction_2_0() { return cFloatAction_2_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_2_1_0() { return cValueFLOATTerminalRuleCall_2_1_0; }
		
		//{String} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{String}
		public Action getStringAction_3_0() { return cStringAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class InitializeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.InitializeVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//InitializeVariable:
		//	name=ID '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class LambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Lambda");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLambdaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCommandsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommandsCommandParserRuleCall_7_0 = (RuleCall)cCommandsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Lambda Block:
		//	{Lambda} '(' arguments+=Argument (',' arguments+=Argument)* ')' '=>' '{' commands+=Command* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Lambda} '(' arguments+=Argument (',' arguments+=Argument)* ')' '=>' '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//{Lambda}
		public Action getLambdaAction_0() { return cLambdaAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_2_0() { return cArgumentsArgumentParserRuleCall_2_0; }
		
		//(',' arguments+=Argument)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_3_1_0() { return cArgumentsArgumentParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignGreaterThanSignKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_7() { return cCommandsAssignment_7; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_7_0() { return cCommandsCommandParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cCastAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cTypeTypeNameParserRuleCall_0_0_2_0 = (RuleCall)cTypeAssignment_0_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cExpressionAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cExpressionBoolean0ParserRuleCall_0_0_4_0 = (RuleCall)cExpressionAssignment_0_0_4.eContents().get(0);
		private final RuleCall cLambdaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolean0ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//	=> ({Cast} '(' type=TypeName ')' expression=Boolean0) | Lambda
		//	| Boolean0;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ({Cast} '(' type=TypeName ')' expression=Boolean0) | Lambda | Boolean0
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ({Cast} '(' type=TypeName ')' expression=Boolean0)
		public Group getGroup_0() { return cGroup_0; }
		
		//{Cast} '(' type=TypeName ')' expression=Boolean0
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{Cast}
		public Action getCastAction_0_0_0() { return cCastAction_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }
		
		//type=TypeName
		public Assignment getTypeAssignment_0_0_2() { return cTypeAssignment_0_0_2; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_0_0_2_0() { return cTypeTypeNameParserRuleCall_0_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_0_3() { return cRightParenthesisKeyword_0_0_3; }
		
		//expression=Boolean0
		public Assignment getExpressionAssignment_0_0_4() { return cExpressionAssignment_0_0_4; }
		
		//Boolean0
		public RuleCall getExpressionBoolean0ParserRuleCall_0_0_4_0() { return cExpressionBoolean0ParserRuleCall_0_0_4_0; }
		
		//Lambda
		public RuleCall getLambdaParserRuleCall_1() { return cLambdaParserRuleCall_1; }
		
		//Boolean0
		public RuleCall getBoolean0ParserRuleCall_2() { return cBoolean0ParserRuleCall_2; }
	}
	public class Boolean0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Boolean0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolean1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBoolean1ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Boolean0 Expression:
		//	Boolean1 ({Or.left=current} '||' right=Boolean1)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean1 ({Or.left=current} '||' right=Boolean1)*
		public Group getGroup() { return cGroup; }
		
		//Boolean1
		public RuleCall getBoolean1ParserRuleCall_0() { return cBoolean1ParserRuleCall_0; }
		
		//({Or.left=current} '||' right=Boolean1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=Boolean1
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Boolean1
		public RuleCall getRightBoolean1ParserRuleCall_1_2_0() { return cRightBoolean1ParserRuleCall_1_2_0; }
	}
	public class Boolean1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Boolean1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolean2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBoolean2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Boolean1 Expression:
		//	Boolean2 ({And.left=current} '&&' right=Boolean2)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean2 ({And.left=current} '&&' right=Boolean2)*
		public Group getGroup() { return cGroup; }
		
		//Boolean2
		public RuleCall getBoolean2ParserRuleCall_0() { return cBoolean2ParserRuleCall_0; }
		
		//({And.left=current} '&&' right=Boolean2)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Boolean2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Boolean2
		public RuleCall getRightBoolean2ParserRuleCall_1_2_0() { return cRightBoolean2ParserRuleCall_1_2_0; }
	}
	public class Boolean2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Boolean2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolean3ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionBoolean3ParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Boolean2 Expression:
		//	Boolean3
		//	| {Not} '!' expression=Boolean3;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean3 | {Not} '!' expression=Boolean3
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Boolean3
		public RuleCall getBoolean3ParserRuleCall_0() { return cBoolean3ParserRuleCall_0; }
		
		//{Not} '!' expression=Boolean3
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Boolean3
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Boolean3
		public RuleCall getExpressionBoolean3ParserRuleCall_1_2_0() { return cExpressionBoolean3ParserRuleCall_1_2_0; }
	}
	public class Boolean3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Boolean3");
		private final RuleCall cBoolean4ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Boolean3 Expression:
		//	Boolean4;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean4
		public RuleCall getBoolean4ParserRuleCall() { return cBoolean4ParserRuleCall; }
	}
	public class Boolean4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Boolean4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeRelationTypeEnumRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Boolean4 Expression:
		//	Addition ({Comparison.left=current} type=RelationType right=Addition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition ({Comparison.left=current} type=RelationType right=Addition)?
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//({Comparison.left=current} type=RelationType right=Addition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//type=RelationType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//RelationType
		public RuleCall getTypeRelationTypeEnumRuleCall_1_1_0() { return cTypeRelationTypeEnumRuleCall_1_1_0; }
		
		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cTimesLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivideLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cModulusLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitwiseParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Expression:
		//	Bitwise (({Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%') right=Bitwise)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Bitwise (({Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%') right=Bitwise)*
		public Group getGroup() { return cGroup; }
		
		//Bitwise
		public RuleCall getBitwiseParserRuleCall_0() { return cBitwiseParserRuleCall_0; }
		
		//(({Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%') right=Bitwise)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Times.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Times.left=current}
		public Action getTimesLeftAction_1_0_0_0() { return cTimesLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Divide.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_0_1_0() { return cDivideLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//{Modulus.left=current} '%'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Modulus.left=current}
		public Action getModulusLeftAction_1_0_2_0() { return cModulusLeftAction_1_0_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0_2_1() { return cPercentSignKeyword_1_0_2_1; }
		
		//right=Bitwise
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Bitwise
		public RuleCall getRightBitwiseParserRuleCall_1_1_0() { return cRightBitwiseParserRuleCall_1_1_0; }
	}
	public class BitwiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Bitwise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAmpersandKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpVerticalLineKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpTildeKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Bitwise Expression:
		//	Unary ({Bitwise.left=current} op=('&' | '|' | '~') right=Unary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Unary ({Bitwise.left=current} op=('&' | '|' | '~') right=Unary)*
		public Group getGroup() { return cGroup; }
		
		//Unary
		public RuleCall getUnaryParserRuleCall_0() { return cUnaryParserRuleCall_0; }
		
		//({Bitwise.left=current} op=('&' | '|' | '~') right=Unary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Bitwise.left=current}
		public Action getBitwiseLeftAction_1_0() { return cBitwiseLeftAction_1_0; }
		
		//op=('&' | '|' | '~')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('&' | '|' | '~')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_1_0_0() { return cOpAmpersandKeyword_1_1_0_0; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_1_0_1() { return cOpVerticalLineKeyword_1_1_0_1; }
		
		//'~'
		public Keyword getOpTildeKeyword_1_1_0_2() { return cOpTildeKeyword_1_1_0_2; }
		
		//right=Unary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Unary
		public RuleCall getRightUnaryParserRuleCall_1_2_0() { return cRightUnaryParserRuleCall_1_2_0; }
	}
	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Unary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cIncrementLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cDecrementLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//Unary Expression:
		//	Primary ({Increment.left=current} '++' | {Decrement.left=current} '--')?;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Increment.left=current} '++' | {Decrement.left=current} '--')?
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Increment.left=current} '++' | {Decrement.left=current} '--')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Increment.left=current} '++'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Increment.left=current}
		public Action getIncrementLeftAction_1_0_0() { return cIncrementLeftAction_1_0_0; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_0_1() { return cPlusSignPlusSignKeyword_1_0_1; }
		
		//{Decrement.left=current} '--'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Decrement.left=current}
		public Action getDecrementLeftAction_1_1_0() { return cDecrementLeftAction_1_1_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1_1; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBracketsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Primary Expression:
		//	Atomic | {Brackets} '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//Atomic | {Brackets} '(' expression=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }
		
		//{Brackets} '(' expression=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Brackets}
		public Action getBracketsAction_1_0() { return cBracketsAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	
	public class TypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.TypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cClassEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cClassClassKeyword_0_0 = (Keyword)cClassEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStructEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStructStructKeyword_1_0 = (Keyword)cStructEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TypeEnum:
		//	class | struct;
		public EnumRule getRule() { return rule; }
		
		//class | struct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//class
		public EnumLiteralDeclaration getClassEnumLiteralDeclaration_0() { return cClassEnumLiteralDeclaration_0; }
		
		//"class"
		public Keyword getClassClassKeyword_0_0() { return cClassClassKeyword_0_0; }
		
		//struct
		public EnumLiteralDeclaration getStructEnumLiteralDeclaration_1() { return cStructEnumLiteralDeclaration_1; }
		
		//"struct"
		public Keyword getStructStructKeyword_1_0() { return cStructStructKeyword_1_0; }
	}
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInternalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInternalInternalKeyword_3_0 = (Keyword)cInternalEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//	public | private | protected | internal;
		public EnumRule getRule() { return rule; }
		
		//public | private | protected | internal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//"public"
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//"private"
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//"protected"
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
		
		//internal
		public EnumLiteralDeclaration getInternalEnumLiteralDeclaration_3() { return cInternalEnumLiteralDeclaration_3; }
		
		//"internal"
		public Keyword getInternalInternalKeyword_3_0() { return cInternalInternalKeyword_3_0; }
	}
	public class RelationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.RelationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOverEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOverGreaterThanSignKeyword_0_0 = (Keyword)cOverEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUnderEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUnderLessThanSignKeyword_1_0 = (Keyword)cUnderEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNotequalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNotequalExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNotequalEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOverorequalEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cOverorequalGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cOverorequalEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cUnderorequalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cUnderorequalLessThanSignEqualsSignKeyword_5_0 = (Keyword)cUnderorequalEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationType:
		//	over='>' | under='<' | equal='==' | notequal='!=' | overorequal='>=' | underorequal='<=';
		public EnumRule getRule() { return rule; }
		
		//over='>' | under='<' | equal='==' | notequal='!=' | overorequal='>=' | underorequal='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//over='>'
		public EnumLiteralDeclaration getOverEnumLiteralDeclaration_0() { return cOverEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getOverGreaterThanSignKeyword_0_0() { return cOverGreaterThanSignKeyword_0_0; }
		
		//under='<'
		public EnumLiteralDeclaration getUnderEnumLiteralDeclaration_1() { return cUnderEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getUnderLessThanSignKeyword_1_0() { return cUnderLessThanSignKeyword_1_0; }
		
		//equal='=='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//'=='
		public Keyword getEqualEqualsSignEqualsSignKeyword_2_0() { return cEqualEqualsSignEqualsSignKeyword_2_0; }
		
		//notequal='!='
		public EnumLiteralDeclaration getNotequalEnumLiteralDeclaration_3() { return cNotequalEnumLiteralDeclaration_3; }
		
		//'!='
		public Keyword getNotequalExclamationMarkEqualsSignKeyword_3_0() { return cNotequalExclamationMarkEqualsSignKeyword_3_0; }
		
		//overorequal='>='
		public EnumLiteralDeclaration getOverorequalEnumLiteralDeclaration_4() { return cOverorequalEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getOverorequalGreaterThanSignEqualsSignKeyword_4_0() { return cOverorequalGreaterThanSignEqualsSignKeyword_4_0; }
		
		//underorequal='<='
		public EnumLiteralDeclaration getUnderorequalEnumLiteralDeclaration_5() { return cUnderorequalEnumLiteralDeclaration_5; }
		
		//'<='
		public Keyword getUnderorequalLessThanSignEqualsSignKeyword_5_0() { return cUnderorequalLessThanSignEqualsSignKeyword_5_0; }
	}
	public class AssignmentTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.AssignmentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSetEqualsSignKeyword_0_0 = (Keyword)cSetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIncreaseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIncreasePlusSignEqualsSignKeyword_1_0 = (Keyword)cIncreaseEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDecreaseEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDecreaseHyphenMinusEqualsSignKeyword_2_0 = (Keyword)cDecreaseEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMultiplyAsteriskEqualsSignKeyword_3_0 = (Keyword)cMultiplyEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDivideSolidusEqualsSignKeyword_4_0 = (Keyword)cDivideEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cModulusEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cModulusPercentSignEqualsSignKeyword_5_0 = (Keyword)cModulusEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAndAmpersandEqualsSignKeyword_6_0 = (Keyword)cAndEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cOrVerticalLineEqualsSignKeyword_7_0 = (Keyword)cOrEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum AssignmentType:
		//	set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/=' | modulus='%=' | and='&=' | or='|=';
		public EnumRule getRule() { return rule; }
		
		//set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/=' | modulus='%=' | and='&=' | or='|='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//set='='
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_0() { return cSetEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getSetEqualsSignKeyword_0_0() { return cSetEqualsSignKeyword_0_0; }
		
		//increase='+='
		public EnumLiteralDeclaration getIncreaseEnumLiteralDeclaration_1() { return cIncreaseEnumLiteralDeclaration_1; }
		
		//'+='
		public Keyword getIncreasePlusSignEqualsSignKeyword_1_0() { return cIncreasePlusSignEqualsSignKeyword_1_0; }
		
		//decrease='-='
		public EnumLiteralDeclaration getDecreaseEnumLiteralDeclaration_2() { return cDecreaseEnumLiteralDeclaration_2; }
		
		//'-='
		public Keyword getDecreaseHyphenMinusEqualsSignKeyword_2_0() { return cDecreaseHyphenMinusEqualsSignKeyword_2_0; }
		
		//multiply='*='
		public EnumLiteralDeclaration getMultiplyEnumLiteralDeclaration_3() { return cMultiplyEnumLiteralDeclaration_3; }
		
		//'*='
		public Keyword getMultiplyAsteriskEqualsSignKeyword_3_0() { return cMultiplyAsteriskEqualsSignKeyword_3_0; }
		
		//divide='/='
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_4() { return cDivideEnumLiteralDeclaration_4; }
		
		//'/='
		public Keyword getDivideSolidusEqualsSignKeyword_4_0() { return cDivideSolidusEqualsSignKeyword_4_0; }
		
		//modulus='%='
		public EnumLiteralDeclaration getModulusEnumLiteralDeclaration_5() { return cModulusEnumLiteralDeclaration_5; }
		
		//'%='
		public Keyword getModulusPercentSignEqualsSignKeyword_5_0() { return cModulusPercentSignEqualsSignKeyword_5_0; }
		
		//and='&='
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_6() { return cAndEnumLiteralDeclaration_6; }
		
		//'&='
		public Keyword getAndAmpersandEqualsSignKeyword_6_0() { return cAndAmpersandEqualsSignKeyword_6_0; }
		
		//or='|='
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_7() { return cOrEnumLiteralDeclaration_7; }
		
		//'|='
		public Keyword getOrVerticalLineEqualsSignKeyword_7_0() { return cOrVerticalLineEqualsSignKeyword_7_0; }
	}
	
	private final FileElements pFile;
	private final UsingElements pUsing;
	private final QualifiedNameElements pQualifiedName;
	private final TypeElements pType;
	private final MemberElements pMember;
	private final AnnotationElements pAnnotation;
	private final TypeNameElements pTypeName;
	private final FieldElements pField;
	private final ArgumentElements pArgument;
	private final MethodElements pMethod;
	private final CommandElements pCommand;
	private final AssignmentElements pAssignment;
	private final ReturnElements pReturn;
	private final AccessElements pAccess;
	private final PortionElements pPortion;
	private final ForElements pFor;
	private final IfElements pIf;
	private final ElseIfElements pElseIf;
	private final ElseElements pElse;
	private final WhileElements pWhile;
	private final AtomicElements pAtomic;
	private final InitializeVariableElements pInitializeVariable;
	private final LambdaElements pLambda;
	private final ExpressionElements pExpression;
	private final Boolean0Elements pBoolean0;
	private final Boolean1Elements pBoolean1;
	private final Boolean2Elements pBoolean2;
	private final Boolean3Elements pBoolean3;
	private final Boolean4Elements pBoolean4;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final BitwiseElements pBitwise;
	private final UnaryElements pUnary;
	private final PrimaryElements pPrimary;
	private final TypeEnumElements eTypeEnum;
	private final VisibilityElements eVisibility;
	private final RelationTypeElements eRelationType;
	private final AssignmentTypeElements eAssignmentType;
	private final TerminalRule tID;
	private final TerminalRule tLONG;
	private final TerminalRule tFLOAT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public CSGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFile = new FileElements();
		this.pUsing = new UsingElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pType = new TypeElements();
		this.pMember = new MemberElements();
		this.pAnnotation = new AnnotationElements();
		this.pTypeName = new TypeNameElements();
		this.pField = new FieldElements();
		this.pArgument = new ArgumentElements();
		this.pMethod = new MethodElements();
		this.pCommand = new CommandElements();
		this.pAssignment = new AssignmentElements();
		this.pReturn = new ReturnElements();
		this.pAccess = new AccessElements();
		this.pPortion = new PortionElements();
		this.pFor = new ForElements();
		this.pIf = new IfElements();
		this.pElseIf = new ElseIfElements();
		this.pElse = new ElseElements();
		this.pWhile = new WhileElements();
		this.pAtomic = new AtomicElements();
		this.pInitializeVariable = new InitializeVariableElements();
		this.pLambda = new LambdaElements();
		this.pExpression = new ExpressionElements();
		this.pBoolean0 = new Boolean0Elements();
		this.pBoolean1 = new Boolean1Elements();
		this.pBoolean2 = new Boolean2Elements();
		this.pBoolean3 = new Boolean3Elements();
		this.pBoolean4 = new Boolean4Elements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pBitwise = new BitwiseElements();
		this.pUnary = new UnaryElements();
		this.pPrimary = new PrimaryElements();
		this.eTypeEnum = new TypeEnumElements();
		this.eVisibility = new VisibilityElements();
		this.eRelationType = new RelationTypeElements();
		this.eAssignmentType = new AssignmentTypeElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.ID");
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.LONG");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.FLOAT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.CS.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m.CS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//File:
	//	usings+=Using*
	//	types+=Member*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Using:
	//	'using' name=QualifiedName ';';
	public UsingElements getUsingAccess() {
		return pUsing;
	}
	
	public ParserRule getUsingRule() {
		return getUsingAccess().getRule();
	}
	
	//QualifiedName:
	//	names+=ID ('.' names+=ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Type:
	//	sealed?='sealed'?
	//	type=TypeEnum name=TypeName (':' superTypes+=TypeName (',' superTypes+=TypeName)*)?
	//	'{'
	//	members+=Member*
	//	'}';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Member:
	//	annotations+=Annotation*
	//	visibility=Visibility static?='static'?
	//	value=(Type | Method | Field);
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Annotation:
	//	'[' function=TypeName ('(' parameters+=Expression (',' parameters+=Expression)* ')')? ']';
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//TypeName:
	//	name=QualifiedName ('<' generics+=QualifiedName (',' generics+=QualifiedName)* '>')?;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//Field:
	//	type=TypeName name=ID ';';
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Argument:
	//	annotations+=Annotation* ref?='ref'? type=TypeName name=ID;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Method Block:
	//	{Method} override?='override'? (type=TypeName | implicit?='implicit' operator?='operator') name=ID ('<'
	//	generics+=TypeName (',' generics+=TypeName)* '>')?
	//	'(' (arguments+=Argument (',' arguments+=Argument)*)? ')'
	//	'{'
	//	commands+=Command*
	//	'}';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Command:
	//	For | If | While | Assignment ';' | Return ';';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Assignment:
	//	(var?='var' | type=TypeName)? access=Access (assignmentType=AssignmentType expression=Expression | increment?='++' |
	//	decrement?='--')?;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Return:
	//	'return' expression=Expression;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Access:
	//	new?='new'? ref?='ref'? portions+=Portion ('.' portions+=Portion)*;
	public AccessElements getAccessAccess() {
		return pAccess;
	}
	
	public ParserRule getAccessRule() {
		return getAccessAccess().getRule();
	}
	
	//Portion:
	//	{Label} name=ID
	//	| {MethodCall} name=ID ('<' generics+=TypeName '>')? '(' (expressions+=Expression (',' expressions+=Expression)*)? ')'
	//	| {Initialization} name=ID '{' (initializations+=InitializeVariable (',' initializations+=InitializeVariable)*)? '}'
	//	| {Indexing} name=ID '[' index=Expression ']';
	public PortionElements getPortionAccess() {
		return pPortion;
	}
	
	public ParserRule getPortionRule() {
		return getPortionAccess().getRule();
	}
	
	//For Block:
	//	{For}
	//	'for' '(' initialization=Assignment ';' condition=Expression ';' increment=Assignment ')'
	//	'{'
	//	commands+=Command*
	//	'}';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//If Block:
	//	{If}
	//	'if' '(' expression=Expression ')'
	//	'{'
	//	commands+=Command*
	//	'}'
	//	elseIfs+=ElseIf*
	//	else=Else?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//ElseIf Block:
	//	{ElseIf}
	//	'else' 'if' '(' expression=Expression ')'
	//	'{'
	//	commands+=Command*
	//	'}';
	public ElseIfElements getElseIfAccess() {
		return pElseIf;
	}
	
	public ParserRule getElseIfRule() {
		return getElseIfAccess().getRule();
	}
	
	//Else Block:
	//	{Else}
	//	'else'
	//	'{'
	//	commands+=Command*
	//	'}';
	public ElseElements getElseAccess() {
		return pElse;
	}
	
	public ParserRule getElseRule() {
		return getElseAccess().getRule();
	}
	
	//While Block:
	//	'while' '(' expression=Expression ')'
	//	'{'
	//	commands+=Command*
	//	'}';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Atomic Expression:
	//	Access
	//	| {Long} value=LONG
	//	| {Float} value=FLOAT
	//	| {String} value=STRING;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//InitializeVariable:
	//	name=ID '=' expression=Expression;
	public InitializeVariableElements getInitializeVariableAccess() {
		return pInitializeVariable;
	}
	
	public ParserRule getInitializeVariableRule() {
		return getInitializeVariableAccess().getRule();
	}
	
	//Lambda Block:
	//	{Lambda} '(' arguments+=Argument (',' arguments+=Argument)* ')' '=>' '{' commands+=Command* '}';
	public LambdaElements getLambdaAccess() {
		return pLambda;
	}
	
	public ParserRule getLambdaRule() {
		return getLambdaAccess().getRule();
	}
	
	//Expression:
	//	=> ({Cast} '(' type=TypeName ')' expression=Boolean0) | Lambda
	//	| Boolean0;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Boolean0 Expression:
	//	Boolean1 ({Or.left=current} '||' right=Boolean1)*;
	public Boolean0Elements getBoolean0Access() {
		return pBoolean0;
	}
	
	public ParserRule getBoolean0Rule() {
		return getBoolean0Access().getRule();
	}
	
	//Boolean1 Expression:
	//	Boolean2 ({And.left=current} '&&' right=Boolean2)*;
	public Boolean1Elements getBoolean1Access() {
		return pBoolean1;
	}
	
	public ParserRule getBoolean1Rule() {
		return getBoolean1Access().getRule();
	}
	
	//Boolean2 Expression:
	//	Boolean3
	//	| {Not} '!' expression=Boolean3;
	public Boolean2Elements getBoolean2Access() {
		return pBoolean2;
	}
	
	public ParserRule getBoolean2Rule() {
		return getBoolean2Access().getRule();
	}
	
	//Boolean3 Expression:
	//	Boolean4;
	public Boolean3Elements getBoolean3Access() {
		return pBoolean3;
	}
	
	public ParserRule getBoolean3Rule() {
		return getBoolean3Access().getRule();
	}
	
	//Boolean4 Expression:
	//	Addition ({Comparison.left=current} type=RelationType right=Addition)?;
	public Boolean4Elements getBoolean4Access() {
		return pBoolean4;
	}
	
	public ParserRule getBoolean4Rule() {
		return getBoolean4Access().getRule();
	}
	
	//Addition Expression:
	//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Bitwise (({Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%') right=Bitwise)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Bitwise Expression:
	//	Unary ({Bitwise.left=current} op=('&' | '|' | '~') right=Unary)*;
	public BitwiseElements getBitwiseAccess() {
		return pBitwise;
	}
	
	public ParserRule getBitwiseRule() {
		return getBitwiseAccess().getRule();
	}
	
	//Unary Expression:
	//	Primary ({Increment.left=current} '++' | {Decrement.left=current} '--')?;
	public UnaryElements getUnaryAccess() {
		return pUnary;
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}
	
	//Primary Expression:
	//	Atomic | {Brackets} '(' expression=Expression ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//enum TypeEnum:
	//	class | struct;
	public TypeEnumElements getTypeEnumAccess() {
		return eTypeEnum;
	}
	
	public EnumRule getTypeEnumRule() {
		return getTypeEnumAccess().getRule();
	}
	
	//enum Visibility:
	//	public | private | protected | internal;
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//enum RelationType:
	//	over='>' | under='<' | equal='==' | notequal='!=' | overorequal='>=' | underorequal='<=';
	public RelationTypeElements getRelationTypeAccess() {
		return eRelationType;
	}
	
	public EnumRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}
	
	//enum AssignmentType:
	//	set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/=' | modulus='%=' | and='&=' | or='|=';
	public AssignmentTypeElements getAssignmentTypeAccess() {
		return eAssignmentType;
	}
	
	public EnumRule getAssignmentTypeRule() {
		return getAssignmentTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal LONG returns ecore::ELong:
	//	'-'? '0'..'9'+;
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	'-'? '0'..'9'* '.' '0'..'9'+ ('e' '-'? '0'..'9'+)?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
