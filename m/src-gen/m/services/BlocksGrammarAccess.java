/*
 * generated by Xtext
 */
package m.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BlocksGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Blocks.File");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//File:
		//	elements+=Element;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Blocks.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpenIDTerminalRuleCall_1_0 = (RuleCall)cOpenAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cSolidusGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cElementsAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_3_1_1_0_0 = (RuleCall)cElementsAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cTextAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_3_1_1_1_0 = (RuleCall)cTextAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cCloseAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cCloseIDTerminalRuleCall_3_1_3_0 = (RuleCall)cCloseAssignment_3_1_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		
		//Element:
		//	'<' open=ID attributes+=Attribute* ('/>' | '>' (elements+=Element+ | text=Text)? '</' close=ID '>');
		@Override public ParserRule getRule() { return rule; }
		
		//'<' open=ID attributes+=Attribute* ('/>' | '>' (elements+=Element+ | text=Text)? '</' close=ID '>')
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//open=ID
		public Assignment getOpenAssignment_1() { return cOpenAssignment_1; }
		
		//ID
		public RuleCall getOpenIDTerminalRuleCall_1_0() { return cOpenIDTerminalRuleCall_1_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }
		
		//'/>' | '>' (elements+=Element+ | text=Text)? '</' close=ID '>'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_3_0() { return cSolidusGreaterThanSignKeyword_3_0; }
		
		//'>' (elements+=Element+ | text=Text)? '</' close=ID '>'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_1_0() { return cGreaterThanSignKeyword_3_1_0; }
		
		//(elements+=Element+ | text=Text)?
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }
		
		//elements+=Element+
		public Assignment getElementsAssignment_3_1_1_0() { return cElementsAssignment_3_1_1_0; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_3_1_1_0_0() { return cElementsElementParserRuleCall_3_1_1_0_0; }
		
		//text=Text
		public Assignment getTextAssignment_3_1_1_1() { return cTextAssignment_3_1_1_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_3_1_1_1_0() { return cTextTextParserRuleCall_3_1_1_1_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_3_1_2() { return cLessThanSignSolidusKeyword_3_1_2; }
		
		//close=ID
		public Assignment getCloseAssignment_3_1_3() { return cCloseAssignment_3_1_3; }
		
		//ID
		public RuleCall getCloseIDTerminalRuleCall_3_1_3_0() { return cCloseIDTerminalRuleCall_3_1_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_1_4() { return cGreaterThanSignKeyword_3_1_4; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Blocks.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	name=ID '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.Blocks.Text");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWHITE_SPACETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Text:
		//	(N | WHITE_SPACE | ID)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(N | WHITE_SPACE | ID)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//N
		public RuleCall getNTerminalRuleCall_0() { return cNTerminalRuleCall_0; }
		
		//WHITE_SPACE
		public RuleCall getWHITE_SPACETerminalRuleCall_1() { return cWHITE_SPACETerminalRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	
	
	private final FileElements pFile;
	private final ElementElements pElement;
	private final AttributeElements pAttribute;
	private final TerminalRule tN;
	private final TerminalRule tID;
	private final TerminalRule tWHITE_SPACE;
	private final TerminalRule tSTRING;
	private final TextElements pText;
	
	private final Grammar grammar;

	@Inject
	public BlocksGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFile = new FileElements();
		this.pElement = new ElementElements();
		this.pAttribute = new AttributeElements();
		this.tN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.Blocks.N");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.Blocks.ID");
		this.tWHITE_SPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.Blocks.WHITE_SPACE");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.Blocks.STRING");
		this.pText = new TextElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m.Blocks".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//File:
	//	elements+=Element;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Element:
	//	'<' open=ID attributes+=Attribute* ('/>' | '>' (elements+=Element+ | text=Text)? '</' close=ID '>');
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Attribute:
	//	name=ID '=' value=STRING;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//terminal N:
	//	'-'? '0'..'9'+ ('.' '0'..'9'*)?;
	public TerminalRule getNRule() {
		return tN;
	}
	
	//terminal ID:
	//	('_' | 'a'..'z' | 'A'..'Z') ('_' | 'a'..'z' | 'A'..'Z' | '0'..'9' | '.' | '-')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal WHITE_SPACE:
	//	' ' | '\t' | '\r' | '\n';
	public TerminalRule getWHITE_SPACERule() {
		return tWHITE_SPACE;
	}
	
	//terminal STRING:
	//	'"'->'"' | "'"->"'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//Text:
	//	(N | WHITE_SPACE | ID)+;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
}
