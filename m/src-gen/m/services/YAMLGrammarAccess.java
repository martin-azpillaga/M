/*
 * generated by Xtext
 */
package m.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class YAMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVersionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVersionVersionEnumRuleCall_1_0_0 = (RuleCall)cVersionAssignment_1_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cTagsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTagsTagEnumRuleCall_1_2_0 = (RuleCall)cTagsAssignment_1_2.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNodesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_2_0_0 = (RuleCall)cNodesAssignment_2_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//File:
		//	{File} (version=Version WS tags+=Tag WS)? (nodes+=Node WS?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{File} (version=Version WS tags+=Tag WS)? (nodes+=Node WS?)*
		public Group getGroup() { return cGroup; }
		
		//{File}
		public Action getFileAction_0() { return cFileAction_0; }
		
		//(version=Version WS tags+=Tag WS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//version=Version
		public Assignment getVersionAssignment_1_0() { return cVersionAssignment_1_0; }
		
		//Version
		public RuleCall getVersionVersionEnumRuleCall_1_0_0() { return cVersionVersionEnumRuleCall_1_0_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_1() { return cWSTerminalRuleCall_1_1; }
		
		//tags+=Tag
		public Assignment getTagsAssignment_1_2() { return cTagsAssignment_1_2; }
		
		//Tag
		public RuleCall getTagsTagEnumRuleCall_1_2_0() { return cTagsTagEnumRuleCall_1_2_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_3() { return cWSTerminalRuleCall_1_3; }
		
		//(nodes+=Node WS?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_2_0() { return cNodesAssignment_2_0; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_2_0_0() { return cNodesNodeParserRuleCall_2_0_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_2_1() { return cWSTerminalRuleCall_2_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDocumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Node:
		//	Document | Value;
		@Override public ParserRule getRule() { return rule; }
		
		//Document | Value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Document
		public RuleCall getDocumentParserRuleCall_0() { return cDocumentParserRuleCall_0; }
		
		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMapParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeyValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKeyValueListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value Node:
		//	Map | KeyValue | KeyValueList;
		@Override public ParserRule getRule() { return rule; }
		
		//Map | KeyValue | KeyValueList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Map
		public RuleCall getMapParserRuleCall_0() { return cMapParserRuleCall_0; }
		
		//KeyValue
		public RuleCall getKeyValueParserRuleCall_1() { return cKeyValueParserRuleCall_1; }
		
		//KeyValueList
		public RuleCall getKeyValueListParserRuleCall_2() { return cKeyValueListParserRuleCall_2; }
	}
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDocumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cUKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTagAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTagLTerminalRuleCall_4_0 = (RuleCall)cTagAssignment_4.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cAmpersandKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIdAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIdLTerminalRuleCall_7_0 = (RuleCall)cIdAssignment_7.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cValueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cValueMapParserRuleCall_9_0 = (RuleCall)cValueAssignment_9.eContents().get(0);
		
		//Document:
		//	{Document} '---' SPACE '!u!' tag=L SPACE '&' id=L WS value=Map;
		@Override public ParserRule getRule() { return rule; }
		
		//{Document} '---' SPACE '!u!' tag=L SPACE '&' id=L WS value=Map
		public Group getGroup() { return cGroup; }
		
		//{Document}
		public Action getDocumentAction_0() { return cDocumentAction_0; }
		
		//'---'
		public Keyword getHyphenMinusHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusHyphenMinusKeyword_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
		
		//'!u!'
		public Keyword getUKeyword_3() { return cUKeyword_3; }
		
		//tag=L
		public Assignment getTagAssignment_4() { return cTagAssignment_4; }
		
		//L
		public RuleCall getTagLTerminalRuleCall_4_0() { return cTagLTerminalRuleCall_4_0; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_5() { return cSPACETerminalRuleCall_5; }
		
		//'&'
		public Keyword getAmpersandKeyword_6() { return cAmpersandKeyword_6; }
		
		//id=L
		public Assignment getIdAssignment_7() { return cIdAssignment_7; }
		
		//L
		public RuleCall getIdLTerminalRuleCall_7_0() { return cIdLTerminalRuleCall_7_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_8() { return cWSTerminalRuleCall_8; }
		
		//value=Map
		public Assignment getValueAssignment_9() { return cValueAssignment_9; }
		
		//Map
		public RuleCall getValueMapParserRuleCall_9_0() { return cValueMapParserRuleCall_9_0; }
	}
	public class KeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.KeyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyWORDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueElementParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//KeyValue:
		//	key=WORD ':' SPACE value=Element?;
		@Override public ParserRule getRule() { return rule; }
		
		//key=WORD ':' SPACE value=Element?
		public Group getGroup() { return cGroup; }
		
		//key=WORD
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//WORD
		public RuleCall getKeyWORDTerminalRuleCall_0_0() { return cKeyWORDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
		
		//value=Element?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Element
		public RuleCall getValueElementParserRuleCall_3_0() { return cValueElementParserRuleCall_3_0; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyWORDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyValueParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cWSTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cBodyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBodyValueParserRuleCall_5_1_0 = (RuleCall)cBodyAssignment_5_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cENDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Map:
		//	key=WORD ':' WS BEGIN body+=Value (WS body+=Value)* WS? END;
		@Override public ParserRule getRule() { return rule; }
		
		//key=WORD ':' WS BEGIN body+=Value (WS body+=Value)* WS? END
		public Group getGroup() { return cGroup; }
		
		//key=WORD
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//WORD
		public RuleCall getKeyWORDTerminalRuleCall_0_0() { return cKeyWORDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//body+=Value
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Value
		public RuleCall getBodyValueParserRuleCall_4_0() { return cBodyValueParserRuleCall_4_0; }
		
		//(WS body+=Value)*
		public Group getGroup_5() { return cGroup_5; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_5_0() { return cWSTerminalRuleCall_5_0; }
		
		//body+=Value
		public Assignment getBodyAssignment_5_1() { return cBodyAssignment_5_1; }
		
		//Value
		public RuleCall getBodyValueParserRuleCall_5_1_0() { return cBodyValueParserRuleCall_5_1_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_6() { return cWSTerminalRuleCall_6; }
		
		//END
		public RuleCall getENDTerminalRuleCall_7() { return cENDTerminalRuleCall_7; }
	}
	public class KeyValueListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.KeyValueList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWORDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cValuesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cValuesAlternatives_5_0 = (Alternatives)cValuesAssignment_5.eContents().get(0);
		private final RuleCall cValuesKeyValueParserRuleCall_5_0_0 = (RuleCall)cValuesAlternatives_5_0.eContents().get(0);
		private final RuleCall cValuesElementParserRuleCall_5_0_1 = (RuleCall)cValuesAlternatives_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cWSTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Assignment cValuesAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final Alternatives cValuesAlternatives_6_3_0 = (Alternatives)cValuesAssignment_6_3.eContents().get(0);
		private final RuleCall cValuesKeyValueParserRuleCall_6_3_0_0 = (RuleCall)cValuesAlternatives_6_3_0.eContents().get(0);
		private final RuleCall cValuesElementParserRuleCall_6_3_0_1 = (RuleCall)cValuesAlternatives_6_3_0.eContents().get(1);
		
		//KeyValueList:
		//	name=WORD ':' WS '-' SPACE values+=(KeyValue | Element) (WS '-' SPACE values+=(KeyValue | Element))*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=WORD ':' WS '-' SPACE values+=(KeyValue | Element) (WS '-' SPACE values+=(KeyValue | Element))*
		public Group getGroup() { return cGroup; }
		
		//name=WORD
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//WORD
		public RuleCall getNameWORDTerminalRuleCall_0_0() { return cNameWORDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
		
		//values+=(KeyValue | Element)
		public Assignment getValuesAssignment_5() { return cValuesAssignment_5; }
		
		//(KeyValue | Element)
		public Alternatives getValuesAlternatives_5_0() { return cValuesAlternatives_5_0; }
		
		//KeyValue
		public RuleCall getValuesKeyValueParserRuleCall_5_0_0() { return cValuesKeyValueParserRuleCall_5_0_0; }
		
		//Element
		public RuleCall getValuesElementParserRuleCall_5_0_1() { return cValuesElementParserRuleCall_5_0_1; }
		
		//(WS '-' SPACE values+=(KeyValue | Element))*
		public Group getGroup_6() { return cGroup_6; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_6_0() { return cWSTerminalRuleCall_6_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_6_1() { return cHyphenMinusKeyword_6_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_6_2() { return cSPACETerminalRuleCall_6_2; }
		
		//values+=(KeyValue | Element)
		public Assignment getValuesAssignment_6_3() { return cValuesAssignment_6_3; }
		
		//(KeyValue | Element)
		public Alternatives getValuesAlternatives_6_3_0() { return cValuesAlternatives_6_3_0; }
		
		//KeyValue
		public RuleCall getValuesKeyValueParserRuleCall_6_3_0_0() { return cValuesKeyValueParserRuleCall_6_3_0_0; }
		
		//Element
		public RuleCall getValuesElementParserRuleCall_6_3_0_1() { return cValuesElementParserRuleCall_6_3_0_1; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInlineMapParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInlineListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInlineSemicolonListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cWordAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueWORDTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cFloatAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cLongAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueLTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cGuidAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueGUIDTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		
		//Element:
		//	InlineMap | InlineList | InlineSemicolonList | {Word} value=WORD | {Float} value=FLOAT | {Long} value=L | {Guid}
		//	value=GUID;
		@Override public ParserRule getRule() { return rule; }
		
		//InlineMap | InlineList | InlineSemicolonList | {Word} value=WORD | {Float} value=FLOAT | {Long} value=L | {Guid}
		//value=GUID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InlineMap
		public RuleCall getInlineMapParserRuleCall_0() { return cInlineMapParserRuleCall_0; }
		
		//InlineList
		public RuleCall getInlineListParserRuleCall_1() { return cInlineListParserRuleCall_1; }
		
		//InlineSemicolonList
		public RuleCall getInlineSemicolonListParserRuleCall_2() { return cInlineSemicolonListParserRuleCall_2; }
		
		//{Word} value=WORD
		public Group getGroup_3() { return cGroup_3; }
		
		//{Word}
		public Action getWordAction_3_0() { return cWordAction_3_0; }
		
		//value=WORD
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//WORD
		public RuleCall getValueWORDTerminalRuleCall_3_1_0() { return cValueWORDTerminalRuleCall_3_1_0; }
		
		//{Float} value=FLOAT
		public Group getGroup_4() { return cGroup_4; }
		
		//{Float}
		public Action getFloatAction_4_0() { return cFloatAction_4_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_4_1_0() { return cValueFLOATTerminalRuleCall_4_1_0; }
		
		//{Long} value=L
		public Group getGroup_5() { return cGroup_5; }
		
		//{Long}
		public Action getLongAction_5_0() { return cLongAction_5_0; }
		
		//value=L
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//L
		public RuleCall getValueLTerminalRuleCall_5_1_0() { return cValueLTerminalRuleCall_5_1_0; }
		
		//{Guid} value=GUID
		public Group getGroup_6() { return cGroup_6; }
		
		//{Guid}
		public Action getGuidAction_6_0() { return cGuidAction_6_0; }
		
		//value=GUID
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }
		
		//GUID
		public RuleCall getValueGUIDTerminalRuleCall_6_1_0() { return cValueGUIDTerminalRuleCall_6_1_0; }
	}
	public class InlineListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.InlineList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInlineListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cElementsAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_1_2_0 = (RuleCall)cElementsAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InlineList:
		//	{InlineList} '[' (elements+=Element (',' SPACE elements+=Element)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{InlineList} '[' (elements+=Element (',' SPACE elements+=Element)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{InlineList}
		public Action getInlineListAction_0() { return cInlineListAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(elements+=Element (',' SPACE elements+=Element)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=Element
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0_0() { return cElementsElementParserRuleCall_2_0_0; }
		
		//(',' SPACE elements+=Element)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_2_1_1() { return cSPACETerminalRuleCall_2_1_1; }
		
		//elements+=Element
		public Assignment getElementsAssignment_2_1_2() { return cElementsAssignment_2_1_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_1_2_0() { return cElementsElementParserRuleCall_2_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class InlineMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.InlineMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInlineMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesKeyValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		private final Assignment cValuesAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cValuesKeyValueParserRuleCall_2_2_2_0 = (RuleCall)cValuesAssignment_2_2_2.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InlineMap:
		//	{InlineMap} '{' (SPACE? values+=KeyValue (',' SPACE values+=KeyValue)* SPACE?)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{InlineMap} '{' (SPACE? values+=KeyValue (',' SPACE values+=KeyValue)* SPACE?)? '}'
		public Group getGroup() { return cGroup; }
		
		//{InlineMap}
		public Action getInlineMapAction_0() { return cInlineMapAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(SPACE? values+=KeyValue (',' SPACE values+=KeyValue)* SPACE?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_2_0() { return cSPACETerminalRuleCall_2_0; }
		
		//values+=KeyValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//KeyValue
		public RuleCall getValuesKeyValueParserRuleCall_2_1_0() { return cValuesKeyValueParserRuleCall_2_1_0; }
		
		//(',' SPACE values+=KeyValue)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_2_2_1() { return cSPACETerminalRuleCall_2_2_1; }
		
		//values+=KeyValue
		public Assignment getValuesAssignment_2_2_2() { return cValuesAssignment_2_2_2; }
		
		//KeyValue
		public RuleCall getValuesKeyValueParserRuleCall_2_2_2_0() { return cValuesKeyValueParserRuleCall_2_2_2_0; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_2_3() { return cSPACETerminalRuleCall_2_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class InlineSemicolonListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.InlineSemicolonList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInlineSemicolonListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsWORDTerminalRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsWORDTerminalRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsWORDTerminalRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		
		//InlineSemicolonList:
		//	{InlineSemicolonList} elements+=WORD ';' elements+=WORD (';' elements+=WORD)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{InlineSemicolonList} elements+=WORD ';' elements+=WORD (';' elements+=WORD)*
		public Group getGroup() { return cGroup; }
		
		//{InlineSemicolonList}
		public Action getInlineSemicolonListAction_0() { return cInlineSemicolonListAction_0; }
		
		//elements+=WORD
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//WORD
		public RuleCall getElementsWORDTerminalRuleCall_1_0() { return cElementsWORDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//elements+=WORD
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//WORD
		public RuleCall getElementsWORDTerminalRuleCall_3_0() { return cElementsWORDTerminalRuleCall_3_0; }
		
		//(';' elements+=WORD)*
		public Group getGroup_4() { return cGroup_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//elements+=WORD
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }
		
		//WORD
		public RuleCall getElementsWORDTerminalRuleCall_4_1_0() { return cElementsWORDTerminalRuleCall_4_1_0; }
	}
	
	public class VersionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.Version");
		private final EnumLiteralDeclaration cOneOneEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOneOneYAML11Keyword_0 = (Keyword)cOneOneEnumLiteralDeclaration.eContents().get(0);
		
		//enum Version:
		//	oneOne='%YAML 1.1';
		public EnumRule getRule() { return rule; }
		
		//oneOne='%YAML 1.1'
		public EnumLiteralDeclaration getOneOneEnumLiteralDeclaration() { return cOneOneEnumLiteralDeclaration; }
		
		//'%YAML 1.1'
		public Keyword getOneOneYAML11Keyword_0() { return cOneOneYAML11Keyword_0; }
	}
	public class TagElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.Tag");
		private final EnumLiteralDeclaration cUnityEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cUnityTAGUTagUnity3dCom2011Keyword_0 = (Keyword)cUnityEnumLiteralDeclaration.eContents().get(0);
		
		//enum Tag:
		//	unity='%TAG !u! tag:unity3d.com,2011:';
		public EnumRule getRule() { return rule; }
		
		//unity='%TAG !u! tag:unity3d.com,2011:'
		public EnumLiteralDeclaration getUnityEnumLiteralDeclaration() { return cUnityEnumLiteralDeclaration; }
		
		//'%TAG !u! tag:unity3d.com,2011:'
		public Keyword getUnityTAGUTagUnity3dCom2011Keyword_0() { return cUnityTAGUTagUnity3dCom2011Keyword_0; }
	}
	
	private final FileElements pFile;
	private final NodeElements pNode;
	private final ValueElements pValue;
	private final DocumentElements pDocument;
	private final KeyValueElements pKeyValue;
	private final MapElements pMap;
	private final KeyValueListElements pKeyValueList;
	private final ElementElements pElement;
	private final InlineListElements pInlineList;
	private final InlineMapElements pInlineMap;
	private final InlineSemicolonListElements pInlineSemicolonList;
	private final VersionElements eVersion;
	private final TagElements eTag;
	private final TerminalRule tWORD;
	private final TerminalRule tL;
	private final TerminalRule tFLOAT;
	private final TerminalRule tGUID;
	private final TerminalRule tSPACE;
	private final TerminalRule tWS;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;

	@Inject
	public YAMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFile = new FileElements();
		this.pNode = new NodeElements();
		this.pValue = new ValueElements();
		this.pDocument = new DocumentElements();
		this.pKeyValue = new KeyValueElements();
		this.pMap = new MapElements();
		this.pKeyValueList = new KeyValueListElements();
		this.pElement = new ElementElements();
		this.pInlineList = new InlineListElements();
		this.pInlineMap = new InlineMapElements();
		this.pInlineSemicolonList = new InlineSemicolonListElements();
		this.eVersion = new VersionElements();
		this.eTag = new TagElements();
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.WORD");
		this.tL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.L");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.FLOAT");
		this.tGUID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.GUID");
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.SPACE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.WS");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.NEWLINE");
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.YAML.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m.YAML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//File:
	//	{File} (version=Version WS tags+=Tag WS)? (nodes+=Node WS?)*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Node:
	//	Document | Value;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Value Node:
	//	Map | KeyValue | KeyValueList;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Document:
	//	{Document} '---' SPACE '!u!' tag=L SPACE '&' id=L WS value=Map;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//KeyValue:
	//	key=WORD ':' SPACE value=Element?;
	public KeyValueElements getKeyValueAccess() {
		return pKeyValue;
	}
	
	public ParserRule getKeyValueRule() {
		return getKeyValueAccess().getRule();
	}
	
	//Map:
	//	key=WORD ':' WS BEGIN body+=Value (WS body+=Value)* WS? END;
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//KeyValueList:
	//	name=WORD ':' WS '-' SPACE values+=(KeyValue | Element) (WS '-' SPACE values+=(KeyValue | Element))*;
	public KeyValueListElements getKeyValueListAccess() {
		return pKeyValueList;
	}
	
	public ParserRule getKeyValueListRule() {
		return getKeyValueListAccess().getRule();
	}
	
	//Element:
	//	InlineMap | InlineList | InlineSemicolonList | {Word} value=WORD | {Float} value=FLOAT | {Long} value=L | {Guid}
	//	value=GUID;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//InlineList:
	//	{InlineList} '[' (elements+=Element (',' SPACE elements+=Element)*)? ']';
	public InlineListElements getInlineListAccess() {
		return pInlineList;
	}
	
	public ParserRule getInlineListRule() {
		return getInlineListAccess().getRule();
	}
	
	//InlineMap:
	//	{InlineMap} '{' (SPACE? values+=KeyValue (',' SPACE values+=KeyValue)* SPACE?)? '}';
	public InlineMapElements getInlineMapAccess() {
		return pInlineMap;
	}
	
	public ParserRule getInlineMapRule() {
		return getInlineMapAccess().getRule();
	}
	
	//InlineSemicolonList:
	//	{InlineSemicolonList} elements+=WORD ';' elements+=WORD (';' elements+=WORD)*;
	public InlineSemicolonListElements getInlineSemicolonListAccess() {
		return pInlineSemicolonList;
	}
	
	public ParserRule getInlineSemicolonListRule() {
		return getInlineSemicolonListAccess().getRule();
	}
	
	//enum Version:
	//	oneOne='%YAML 1.1';
	public VersionElements getVersionAccess() {
		return eVersion;
	}
	
	public EnumRule getVersionRule() {
		return getVersionAccess().getRule();
	}
	
	//enum Tag:
	//	unity='%TAG !u! tag:unity3d.com,2011:';
	public TagElements getTagAccess() {
		return eTag;
	}
	
	public EnumRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//terminal WORD:
	//	('a'..'z' | 'A'..'Z' | '_') (' ' | '.' | '/' | 'a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//terminal L:
	//	'-'? '0'..'9' '0'..'9'*;
	public TerminalRule getLRule() {
		return tL;
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	'-'? '0'..'9'* '.' '0'..'9'+ ('e' '-'? '0'..'9'+)?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal GUID:
	//	'0'..'9'* 'a'..'z' ('a'..'z' | '0'..'9')*;
	public TerminalRule getGUIDRule() {
		return tGUID;
	}
	
	//terminal SPACE:
	//	' ';
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
	
	//terminal WS:
	//	NEWLINE SPACE*;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal NEWLINE:
	//	'\r'? '\n';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
}
