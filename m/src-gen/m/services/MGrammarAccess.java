/*
 * generated by Xtext
 */
package m.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Game");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cSystemsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSystemsSystemParserRuleCall_1_0 = (RuleCall)cSystemsAssignment_1.eContents().get(0);
		
		//Game:
		//	(entities+=Entity | systems+=System)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(entities+=Entity | systems+=System)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//entities+=Entity
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0_0() { return cEntitiesEntityParserRuleCall_0_0; }
		
		//systems+=System
		public Assignment getSystemsAssignment_1() { return cSystemsAssignment_1; }
		
		//System
		public RuleCall getSystemsSystemParserRuleCall_1_0() { return cSystemsSystemParserRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBaseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBaseIDTerminalRuleCall_1_1_0 = (RuleCall)cBaseAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cComponentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cComponentsComponentParserRuleCall_3_0_0 = (RuleCall)cComponentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cComponentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cComponentsComponentParserRuleCall_3_1_1_0 = (RuleCall)cComponentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEntitiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_5_1_0 = (RuleCall)cEntitiesAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Entity:
		//	name+=ID+ (':' base+=ID+)?
		//	'{' (components+=Component (',' components+=Component)*)? '}' ('[' entities+=Entity* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=ID+ (':' base+=ID+)? '{' (components+=Component (',' components+=Component)*)? '}' ('[' entities+=Entity* ']')?
		public Group getGroup() { return cGroup; }
		
		//name+=ID+
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' base+=ID+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//base+=ID+
		public Assignment getBaseAssignment_1_1() { return cBaseAssignment_1_1; }
		
		//ID
		public RuleCall getBaseIDTerminalRuleCall_1_1_0() { return cBaseIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(components+=Component (',' components+=Component)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//components+=Component
		public Assignment getComponentsAssignment_3_0() { return cComponentsAssignment_3_0; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_3_0_0() { return cComponentsComponentParserRuleCall_3_0_0; }
		
		//(',' components+=Component)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//components+=Component
		public Assignment getComponentsAssignment_3_1_1() { return cComponentsAssignment_3_1_1; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_3_1_1_0() { return cComponentsComponentParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//('[' entities+=Entity* ']')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_5_1() { return cEntitiesAssignment_5_1; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_5_1_0() { return cEntitiesEntityParserRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Component:
		//	name=ID value=Value?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID value=Value?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//value=Value?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWordParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	Vector | Word;
		@Override public ParserRule getRule() { return rule; }
		
		//Vector | Word
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Vector
		public RuleCall getVectorParserRuleCall_0() { return cVectorParserRuleCall_0; }
		
		//Word
		public RuleCall getWordParserRuleCall_1() { return cWordParserRuleCall_1; }
	}
	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Vector");
		private final Assignment cNumbersAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumbersREALTerminalRuleCall_0 = (RuleCall)cNumbersAssignment.eContents().get(0);
		
		//Vector:
		//	numbers+=REAL+;
		@Override public ParserRule getRule() { return rule; }
		
		//numbers+=REAL+
		public Assignment getNumbersAssignment() { return cNumbersAssignment; }
		
		//REAL
		public RuleCall getNumbersREALTerminalRuleCall_0() { return cNumbersREALTerminalRuleCall_0; }
	}
	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Word");
		private final Assignment cValuesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuesIDTerminalRuleCall_0 = (RuleCall)cValuesAssignment.eContents().get(0);
		
		//Word:
		//	values+=ID+;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=ID+
		public Assignment getValuesAssignment() { return cValuesAssignment; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_0() { return cValuesIDTerminalRuleCall_0; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//System:
		//	name=ID '{' commands+=Command+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' commands+=Command+ '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//commands+=Command+
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_0() { return cCommandsCommandParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBranchParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Command:
		//	Loop | Branch | Assignment | Call;
		@Override public ParserRule getRule() { return rule; }
		
		//Loop | Branch | Assignment | Call
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_0() { return cLoopParserRuleCall_0; }
		
		//Branch
		public RuleCall getBranchParserRuleCall_1() { return cBranchParserRuleCall_1; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_2() { return cAssignmentParserRuleCall_2; }
		
		//Call
		public RuleCall getCallParserRuleCall_3() { return cCallParserRuleCall_3; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityIDTerminalRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstraintsIDTerminalRuleCall_1_1_0 = (RuleCall)cConstraintsAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Loop:
		//	entity=ID (':' constraints+=ID+)?
		//	'{' commands+=Command+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//entity=ID (':' constraints+=ID+)? '{' commands+=Command+ '}'
		public Group getGroup() { return cGroup; }
		
		//entity=ID
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//ID
		public RuleCall getEntityIDTerminalRuleCall_0_0() { return cEntityIDTerminalRuleCall_0_0; }
		
		//(':' constraints+=ID+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//constraints+=ID+
		public Assignment getConstraintsAssignment_1_1() { return cConstraintsAssignment_1_1; }
		
		//ID
		public RuleCall getConstraintsIDTerminalRuleCall_1_1_0() { return cConstraintsIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//commands+=Command+
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0() { return cCommandsCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Branch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfConditionParserRuleCall_1_0 = (RuleCall)cIfAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cQuestionMarkQuestionMarkKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElseIfsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseIfsConditionParserRuleCall_2_1_0 = (RuleCall)cElseIfsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCommandsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_3_1_0 = (RuleCall)cCommandsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Branch:
		//	'?' if=Condition ('??' elseIfs+=Condition)* ('{' commands+=Command* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'?' if=Condition ('??' elseIfs+=Condition)* ('{' commands+=Command* '}')?
		public Group getGroup() { return cGroup; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//if=Condition
		public Assignment getIfAssignment_1() { return cIfAssignment_1; }
		
		//Condition
		public RuleCall getIfConditionParserRuleCall_1_0() { return cIfConditionParserRuleCall_1_0; }
		
		//('??' elseIfs+=Condition)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'??'
		public Keyword getQuestionMarkQuestionMarkKeyword_2_0() { return cQuestionMarkQuestionMarkKeyword_2_0; }
		
		//elseIfs+=Condition
		public Assignment getElseIfsAssignment_2_1() { return cElseIfsAssignment_2_1; }
		
		//Condition
		public RuleCall getElseIfsConditionParserRuleCall_2_1_0() { return cElseIfsConditionParserRuleCall_2_1_0; }
		
		//('{' commands+=Command* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_3_1() { return cCommandsAssignment_3_1; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_1_0() { return cCommandsCommandParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionExpressionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Condition:
		//	condition=Expression '{' commands+=Command* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Expression '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//condition=Expression
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_0_0() { return cConditionExpressionParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_0() { return cCommandsCommandParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessAccessParserRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAssignmentTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//	access=Access type=AssignmentType expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//access=Access type=AssignmentType expression=Expression
		public Group getGroup() { return cGroup; }
		
		//access=Access
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//Access
		public RuleCall getAccessAccessParserRuleCall_0_0() { return cAccessAccessParserRuleCall_0_0; }
		
		//type=AssignmentType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AssignmentType
		public RuleCall getTypeAssignmentTypeEnumRuleCall_1_0() { return cTypeAssignmentTypeEnumRuleCall_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersExpressionParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Call:
		//	name=ID '(' parameters+=Expression (',' parameters+=Expression)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' parameters+=Expression (',' parameters+=Expression)* ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_0() { return cParametersExpressionParserRuleCall_2_0; }
		
		//(',' parameters+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_3_1_0() { return cParametersExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Access");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//Access:
		//	names+=ID ('.' names+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//names+=ID ('.' names+=ID)*
		public Group getGroup() { return cGroup; }
		
		//names+=ID
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0() { return cNamesIDTerminalRuleCall_0_0; }
		
		//('.' names+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//names+=ID
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0() { return cNamesIDTerminalRuleCall_1_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression1ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	Expression1 ({Or.left=current} '||' right=Expression1)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression1 ({Or.left=current} '||' right=Expression1)*
		public Group getGroup() { return cGroup; }
		
		//Expression1
		public RuleCall getExpression1ParserRuleCall_0() { return cExpression1ParserRuleCall_0; }
		
		//({Or.left=current} '||' right=Expression1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=Expression1
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression1
		public RuleCall getRightExpression1ParserRuleCall_1_2_0() { return cRightExpression1ParserRuleCall_1_2_0; }
	}
	public class Expression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Expression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryBParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryBParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression1 Expression:
		//	PrimaryB ({And.left=current} '&&' right=PrimaryB)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryB ({And.left=current} '&&' right=PrimaryB)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryB
		public RuleCall getPrimaryBParserRuleCall_0() { return cPrimaryBParserRuleCall_0; }
		
		//({And.left=current} '&&' right=PrimaryB)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=PrimaryB
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryB
		public RuleCall getRightPrimaryBParserRuleCall_1_2_0() { return cRightPrimaryBParserRuleCall_1_2_0; }
	}
	public class PrimaryBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.PrimaryB");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicBParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionAtomicBParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//PrimaryB Expression:
		//	AtomicB | {Not} '!' expression=AtomicB;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicB | {Not} '!' expression=AtomicB
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AtomicB
		public RuleCall getAtomicBParserRuleCall_0() { return cAtomicBParserRuleCall_0; }
		
		//{Not} '!' expression=AtomicB
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=AtomicB
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//AtomicB
		public RuleCall getExpressionAtomicBParserRuleCall_1_2_0() { return cExpressionAtomicBParserRuleCall_1_2_0; }
	}
	public class AtomicBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.AtomicB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeRelationTypeEnumRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AtomicB Expression:
		//	Addition ({Comparison.left=current} type=RelationType right=Addition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition ({Comparison.left=current} type=RelationType right=Addition)?
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//({Comparison.left=current} type=RelationType right=Addition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//type=RelationType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//RelationType
		public RuleCall getTypeRelationTypeEnumRuleCall_1_1_0() { return cTypeRelationTypeEnumRuleCall_1_1_0; }
		
		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cTimesLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivideLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cModulusLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitwiseParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Expression:
		//	Bitwise (({Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%') right=Bitwise)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Bitwise (({Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%') right=Bitwise)*
		public Group getGroup() { return cGroup; }
		
		//Bitwise
		public RuleCall getBitwiseParserRuleCall_0() { return cBitwiseParserRuleCall_0; }
		
		//(({Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%') right=Bitwise)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Times.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Times.left=current}
		public Action getTimesLeftAction_1_0_0_0() { return cTimesLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Divide.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_0_1_0() { return cDivideLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//{Modulus.left=current} '%'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Modulus.left=current}
		public Action getModulusLeftAction_1_0_2_0() { return cModulusLeftAction_1_0_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0_2_1() { return cPercentSignKeyword_1_0_2_1; }
		
		//right=Bitwise
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Bitwise
		public RuleCall getRightBitwiseParserRuleCall_1_1_0() { return cRightBitwiseParserRuleCall_1_1_0; }
	}
	public class BitwiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Bitwise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAmpersandKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpVerticalLineKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Bitwise Expression:
		//	Unary ({Bitwise.left=current} op=('&' | '|' | '^' | '<<' | '>>') right=Unary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Unary ({Bitwise.left=current} op=('&' | '|' | '^' | '<<' | '>>') right=Unary)*
		public Group getGroup() { return cGroup; }
		
		//Unary
		public RuleCall getUnaryParserRuleCall_0() { return cUnaryParserRuleCall_0; }
		
		//({Bitwise.left=current} op=('&' | '|' | '^' | '<<' | '>>') right=Unary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Bitwise.left=current}
		public Action getBitwiseLeftAction_1_0() { return cBitwiseLeftAction_1_0; }
		
		//op=('&' | '|' | '^' | '<<' | '>>')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('&' | '|' | '^' | '<<' | '>>')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_1_0_0() { return cOpAmpersandKeyword_1_1_0_0; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_1_0_1() { return cOpVerticalLineKeyword_1_1_0_1; }
		
		//'^'
		public Keyword getOpCircumflexAccentKeyword_1_1_0_2() { return cOpCircumflexAccentKeyword_1_1_0_2; }
		
		//'<<'
		public Keyword getOpLessThanSignLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignLessThanSignKeyword_1_1_0_3; }
		
		//'>>'
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_4() { return cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_4; }
		
		//right=Unary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Unary
		public RuleCall getRightUnaryParserRuleCall_1_2_0() { return cRightUnaryParserRuleCall_1_2_0; }
	}
	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Unary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBitwiseNegateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTildeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cIncrementExpressionAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cDecrementExpressionAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		
		//Unary Expression:
		//	{BitwiseNegate} '~' expression=Primary
		//	| Primary ({Increment.expression=current} '++' | {Decrement.expression=current} '--')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BitwiseNegate} '~' expression=Primary | Primary ({Increment.expression=current} '++' | {Decrement.expression=current}
		//'--')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BitwiseNegate} '~' expression=Primary
		public Group getGroup_0() { return cGroup_0; }
		
		//{BitwiseNegate}
		public Action getBitwiseNegateAction_0_0() { return cBitwiseNegateAction_0_0; }
		
		//'~'
		public Keyword getTildeKeyword_0_1() { return cTildeKeyword_0_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_0_2_0() { return cExpressionPrimaryParserRuleCall_0_2_0; }
		
		//Primary ({Increment.expression=current} '++' | {Decrement.expression=current} '--')?
		public Group getGroup_1() { return cGroup_1; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_1_0() { return cPrimaryParserRuleCall_1_0; }
		
		//({Increment.expression=current} '++' | {Decrement.expression=current} '--')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//{Increment.expression=current} '++'
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{Increment.expression=current}
		public Action getIncrementExpressionAction_1_1_0_0() { return cIncrementExpressionAction_1_1_0_0; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_1_0_1() { return cPlusSignPlusSignKeyword_1_1_0_1; }
		
		//{Decrement.expression=current} '--'
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//{Decrement.expression=current}
		public Action getDecrementExpressionAction_1_1_1_0() { return cDecrementExpressionAction_1_1_1_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1_1_1; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBracketsAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Primary Expression:
		//	Access | Call | {Brackets} '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//Access | Call | {Brackets} '(' expression=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Access
		public RuleCall getAccessParserRuleCall_0() { return cAccessParserRuleCall_0; }
		
		//Call
		public RuleCall getCallParserRuleCall_1() { return cCallParserRuleCall_1; }
		
		//{Brackets} '(' expression=Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Brackets}
		public Action getBracketsAction_2_0() { return cBracketsAction_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0() { return cExpressionExpressionParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	
	public class RelationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.RelationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOverEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOverGreaterThanSignKeyword_0_0 = (Keyword)cOverEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUnderEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUnderLessThanSignKeyword_1_0 = (Keyword)cUnderEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualsSignKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNotequalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNotequalExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNotequalEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOverorequalEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cOverorequalGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cOverorequalEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cUnderorequalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cUnderorequalLessThanSignEqualsSignKeyword_5_0 = (Keyword)cUnderorequalEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationType:
		//	over='>' | under='<' | equal='=' | notequal='!=' | overorequal='>=' | underorequal='<=';
		public EnumRule getRule() { return rule; }
		
		//over='>' | under='<' | equal='=' | notequal='!=' | overorequal='>=' | underorequal='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//over='>'
		public EnumLiteralDeclaration getOverEnumLiteralDeclaration_0() { return cOverEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getOverGreaterThanSignKeyword_0_0() { return cOverGreaterThanSignKeyword_0_0; }
		
		//under='<'
		public EnumLiteralDeclaration getUnderEnumLiteralDeclaration_1() { return cUnderEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getUnderLessThanSignKeyword_1_0() { return cUnderLessThanSignKeyword_1_0; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_2_0() { return cEqualEqualsSignKeyword_2_0; }
		
		//notequal='!='
		public EnumLiteralDeclaration getNotequalEnumLiteralDeclaration_3() { return cNotequalEnumLiteralDeclaration_3; }
		
		//'!='
		public Keyword getNotequalExclamationMarkEqualsSignKeyword_3_0() { return cNotequalExclamationMarkEqualsSignKeyword_3_0; }
		
		//overorequal='>='
		public EnumLiteralDeclaration getOverorequalEnumLiteralDeclaration_4() { return cOverorequalEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getOverorequalGreaterThanSignEqualsSignKeyword_4_0() { return cOverorequalGreaterThanSignEqualsSignKeyword_4_0; }
		
		//underorequal='<='
		public EnumLiteralDeclaration getUnderorequalEnumLiteralDeclaration_5() { return cUnderorequalEnumLiteralDeclaration_5; }
		
		//'<='
		public Keyword getUnderorequalLessThanSignEqualsSignKeyword_5_0() { return cUnderorequalLessThanSignEqualsSignKeyword_5_0; }
	}
	public class AssignmentTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.AssignmentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSetEqualsSignKeyword_0_0 = (Keyword)cSetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIncreaseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIncreasePlusSignEqualsSignKeyword_1_0 = (Keyword)cIncreaseEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDecreaseEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDecreaseHyphenMinusEqualsSignKeyword_2_0 = (Keyword)cDecreaseEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMultiplyAsteriskEqualsSignKeyword_3_0 = (Keyword)cMultiplyEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDivideSolidusEqualsSignKeyword_4_0 = (Keyword)cDivideEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cModulusEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cModulusPercentSignEqualsSignKeyword_5_0 = (Keyword)cModulusEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAndAmpersandEqualsSignKeyword_6_0 = (Keyword)cAndEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cOrVerticalLineEqualsSignKeyword_7_0 = (Keyword)cOrEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cXorEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cXorCircumflexAccentEqualsSignKeyword_8_0 = (Keyword)cXorEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cShiftLeftEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cShiftLeftLessThanSignLessThanSignEqualsSignKeyword_9_0 = (Keyword)cShiftLeftEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cShiftRightEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cShiftRightGreaterThanSignGreaterThanSignEqualsSignKeyword_10_0 = (Keyword)cShiftRightEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum AssignmentType:
		//	set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/=' | modulus='%=' | and='&=' | or='|=' | xor='^=' |
		//	shiftLeft='<<=' | shiftRight='>>=';
		public EnumRule getRule() { return rule; }
		
		//set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/=' | modulus='%=' | and='&=' | or='|=' | xor='^=' |
		//shiftLeft='<<=' | shiftRight='>>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//set='='
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_0() { return cSetEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getSetEqualsSignKeyword_0_0() { return cSetEqualsSignKeyword_0_0; }
		
		//increase='+='
		public EnumLiteralDeclaration getIncreaseEnumLiteralDeclaration_1() { return cIncreaseEnumLiteralDeclaration_1; }
		
		//'+='
		public Keyword getIncreasePlusSignEqualsSignKeyword_1_0() { return cIncreasePlusSignEqualsSignKeyword_1_0; }
		
		//decrease='-='
		public EnumLiteralDeclaration getDecreaseEnumLiteralDeclaration_2() { return cDecreaseEnumLiteralDeclaration_2; }
		
		//'-='
		public Keyword getDecreaseHyphenMinusEqualsSignKeyword_2_0() { return cDecreaseHyphenMinusEqualsSignKeyword_2_0; }
		
		//multiply='*='
		public EnumLiteralDeclaration getMultiplyEnumLiteralDeclaration_3() { return cMultiplyEnumLiteralDeclaration_3; }
		
		//'*='
		public Keyword getMultiplyAsteriskEqualsSignKeyword_3_0() { return cMultiplyAsteriskEqualsSignKeyword_3_0; }
		
		//divide='/='
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_4() { return cDivideEnumLiteralDeclaration_4; }
		
		//'/='
		public Keyword getDivideSolidusEqualsSignKeyword_4_0() { return cDivideSolidusEqualsSignKeyword_4_0; }
		
		//modulus='%='
		public EnumLiteralDeclaration getModulusEnumLiteralDeclaration_5() { return cModulusEnumLiteralDeclaration_5; }
		
		//'%='
		public Keyword getModulusPercentSignEqualsSignKeyword_5_0() { return cModulusPercentSignEqualsSignKeyword_5_0; }
		
		//and='&='
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_6() { return cAndEnumLiteralDeclaration_6; }
		
		//'&='
		public Keyword getAndAmpersandEqualsSignKeyword_6_0() { return cAndAmpersandEqualsSignKeyword_6_0; }
		
		//or='|='
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_7() { return cOrEnumLiteralDeclaration_7; }
		
		//'|='
		public Keyword getOrVerticalLineEqualsSignKeyword_7_0() { return cOrVerticalLineEqualsSignKeyword_7_0; }
		
		//xor='^='
		public EnumLiteralDeclaration getXorEnumLiteralDeclaration_8() { return cXorEnumLiteralDeclaration_8; }
		
		//'^='
		public Keyword getXorCircumflexAccentEqualsSignKeyword_8_0() { return cXorCircumflexAccentEqualsSignKeyword_8_0; }
		
		//shiftLeft='<<='
		public EnumLiteralDeclaration getShiftLeftEnumLiteralDeclaration_9() { return cShiftLeftEnumLiteralDeclaration_9; }
		
		//'<<='
		public Keyword getShiftLeftLessThanSignLessThanSignEqualsSignKeyword_9_0() { return cShiftLeftLessThanSignLessThanSignEqualsSignKeyword_9_0; }
		
		//shiftRight='>>='
		public EnumLiteralDeclaration getShiftRightEnumLiteralDeclaration_10() { return cShiftRightEnumLiteralDeclaration_10; }
		
		//'>>='
		public Keyword getShiftRightGreaterThanSignGreaterThanSignEqualsSignKeyword_10_0() { return cShiftRightGreaterThanSignGreaterThanSignEqualsSignKeyword_10_0; }
	}
	
	private final GameElements pGame;
	private final EntityElements pEntity;
	private final ComponentElements pComponent;
	private final ValueElements pValue;
	private final VectorElements pVector;
	private final WordElements pWord;
	private final SystemElements pSystem;
	private final CommandElements pCommand;
	private final LoopElements pLoop;
	private final BranchElements pBranch;
	private final ConditionElements pCondition;
	private final AssignmentElements pAssignment;
	private final CallElements pCall;
	private final AccessElements pAccess;
	private final ExpressionElements pExpression;
	private final Expression1Elements pExpression1;
	private final PrimaryBElements pPrimaryB;
	private final AtomicBElements pAtomicB;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final BitwiseElements pBitwise;
	private final UnaryElements pUnary;
	private final PrimaryElements pPrimary;
	private final RelationTypeElements eRelationType;
	private final AssignmentTypeElements eAssignmentType;
	private final TerminalRule tWHITE_SPACE;
	private final TerminalRule tID;
	private final TerminalRule tREAL;
	
	private final Grammar grammar;

	@Inject
	public MGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pGame = new GameElements();
		this.pEntity = new EntityElements();
		this.pComponent = new ComponentElements();
		this.pValue = new ValueElements();
		this.pVector = new VectorElements();
		this.pWord = new WordElements();
		this.pSystem = new SystemElements();
		this.pCommand = new CommandElements();
		this.pLoop = new LoopElements();
		this.pBranch = new BranchElements();
		this.pCondition = new ConditionElements();
		this.pAssignment = new AssignmentElements();
		this.pCall = new CallElements();
		this.pAccess = new AccessElements();
		this.pExpression = new ExpressionElements();
		this.pExpression1 = new Expression1Elements();
		this.pPrimaryB = new PrimaryBElements();
		this.pAtomicB = new AtomicBElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pBitwise = new BitwiseElements();
		this.pUnary = new UnaryElements();
		this.pPrimary = new PrimaryElements();
		this.eRelationType = new RelationTypeElements();
		this.eAssignmentType = new AssignmentTypeElements();
		this.tWHITE_SPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.WHITE_SPACE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.ID");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "m.M.REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m.M".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Game:
	//	(entities+=Entity | systems+=System)*;
	public GameElements getGameAccess() {
		return pGame;
	}
	
	public ParserRule getGameRule() {
		return getGameAccess().getRule();
	}
	
	//Entity:
	//	name+=ID+ (':' base+=ID+)?
	//	'{' (components+=Component (',' components+=Component)*)? '}' ('[' entities+=Entity* ']')?;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Component:
	//	name=ID value=Value?;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Value:
	//	Vector | Word;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Vector:
	//	numbers+=REAL+;
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}
	
	//Word:
	//	values+=ID+;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}
	
	//System:
	//	name=ID '{' commands+=Command+ '}';
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Command:
	//	Loop | Branch | Assignment | Call;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Loop:
	//	entity=ID (':' constraints+=ID+)?
	//	'{' commands+=Command+ '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Branch:
	//	'?' if=Condition ('??' elseIfs+=Condition)* ('{' commands+=Command* '}')?;
	public BranchElements getBranchAccess() {
		return pBranch;
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}
	
	//Condition:
	//	condition=Expression '{' commands+=Command* '}';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Assignment:
	//	access=Access type=AssignmentType expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Call:
	//	name=ID '(' parameters+=Expression (',' parameters+=Expression)* ')';
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//Access:
	//	names+=ID ('.' names+=ID)*;
	public AccessElements getAccessAccess() {
		return pAccess;
	}
	
	public ParserRule getAccessRule() {
		return getAccessAccess().getRule();
	}
	
	//Expression:
	//	Expression1 ({Or.left=current} '||' right=Expression1)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expression1 Expression:
	//	PrimaryB ({And.left=current} '&&' right=PrimaryB)*;
	public Expression1Elements getExpression1Access() {
		return pExpression1;
	}
	
	public ParserRule getExpression1Rule() {
		return getExpression1Access().getRule();
	}
	
	//PrimaryB Expression:
	//	AtomicB | {Not} '!' expression=AtomicB;
	public PrimaryBElements getPrimaryBAccess() {
		return pPrimaryB;
	}
	
	public ParserRule getPrimaryBRule() {
		return getPrimaryBAccess().getRule();
	}
	
	//AtomicB Expression:
	//	Addition ({Comparison.left=current} type=RelationType right=Addition)?;
	public AtomicBElements getAtomicBAccess() {
		return pAtomicB;
	}
	
	public ParserRule getAtomicBRule() {
		return getAtomicBAccess().getRule();
	}
	
	//Addition Expression:
	//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Bitwise (({Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%') right=Bitwise)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Bitwise Expression:
	//	Unary ({Bitwise.left=current} op=('&' | '|' | '^' | '<<' | '>>') right=Unary)*;
	public BitwiseElements getBitwiseAccess() {
		return pBitwise;
	}
	
	public ParserRule getBitwiseRule() {
		return getBitwiseAccess().getRule();
	}
	
	//Unary Expression:
	//	{BitwiseNegate} '~' expression=Primary
	//	| Primary ({Increment.expression=current} '++' | {Decrement.expression=current} '--')?;
	public UnaryElements getUnaryAccess() {
		return pUnary;
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}
	
	//Primary Expression:
	//	Access | Call | {Brackets} '(' expression=Expression ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//enum RelationType:
	//	over='>' | under='<' | equal='=' | notequal='!=' | overorequal='>=' | underorequal='<=';
	public RelationTypeElements getRelationTypeAccess() {
		return eRelationType;
	}
	
	public EnumRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}
	
	//enum AssignmentType:
	//	set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/=' | modulus='%=' | and='&=' | or='|=' | xor='^=' |
	//	shiftLeft='<<=' | shiftRight='>>=';
	public AssignmentTypeElements getAssignmentTypeAccess() {
		return eAssignmentType;
	}
	
	public EnumRule getAssignmentTypeRule() {
		return getAssignmentTypeAccess().getRule();
	}
	
	//terminal WHITE_SPACE:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWHITE_SPACERule() {
		return tWHITE_SPACE;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal REAL returns ecore::EFloat:
	//	'-'? '0'..'9'* ('.' '0'..'9'+ ('e' '-'? '0'..'9'+)?)?;
	public TerminalRule getREALRule() {
		return tREAL;
	}
}
