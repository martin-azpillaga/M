/*
 * generated by Xtext
 */
grammar InternalM;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package m.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package m.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import m.services.MGrammarAccess;

}

@parser::members {

 	private MGrammarAccess grammarAccess;

    public InternalMParser(TokenStream input, MGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Game";
   	}

   	@Override
   	protected MGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGame
entryRuleGame returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGameRule()); }
	iv_ruleGame=ruleGame
	{ $current=$iv_ruleGame.current; }
	EOF;

// Rule Game
ruleGame returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGameAccess().getEntitiesEntityParserRuleCall_0_0());
				}
				lv_entities_0_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGameRule());
					}
					add(
						$current,
						"entities",
						lv_entities_0_0,
						"m.M.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getGameAccess().getSystemsSystemParserRuleCall_1_0());
				}
				lv_systems_1_0=ruleSystem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGameRule());
					}
					add(
						$current,
						"systems",
						lv_systems_1_0,
						"m.M.System");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					addWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"m.M.ID");
				}
			)
		)+
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getEntityAccess().getColonKeyword_1_0());
			}
			(
				(
					lv_base_2_0=RULE_ID
					{
						newLeafNode(lv_base_2_0, grammarAccess.getEntityAccess().getBaseIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEntityRule());
						}
						addWithLastConsumed(
							$current,
							"base",
							lv_base_2_0,
							"m.M.ID");
					}
				)
			)+
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEntityAccess().getComponentsComponentParserRuleCall_3_0_0());
					}
					lv_components_4_0=ruleComponent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEntityRule());
						}
						add(
							$current,
							"components",
							lv_components_4_0,
							"m.M.Component");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getEntityAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEntityAccess().getComponentsComponentParserRuleCall_3_1_1_0());
						}
						lv_components_6_0=ruleComponent
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEntityRule());
							}
							add(
								$current,
								"components",
								lv_components_6_0,
								"m.M.Component");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_4());
		}
		(
			otherlv_8='['
			{
				newLeafNode(otherlv_8, grammarAccess.getEntityAccess().getLeftSquareBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEntityAccess().getEntitiesEntityParserRuleCall_5_1_0());
					}
					lv_entities_9_0=ruleEntity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEntityRule());
						}
						add(
							$current,
							"entities",
							lv_entities_9_0,
							"m.M.Entity");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_10=']'
			{
				newLeafNode(otherlv_10, grammarAccess.getEntityAccess().getRightSquareBracketKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	iv_ruleComponent=ruleComponent
	{ $current=$iv_ruleComponent.current; }
	EOF;

// Rule Component
ruleComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"m.M.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentAccess().getValueValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"m.M.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getVectorParserRuleCall_0());
		}
		this_Vector_0=ruleVector
		{
			$current = $this_Vector_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getWordParserRuleCall_1());
		}
		this_Word_1=ruleWord
		{
			$current = $this_Word_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVector
entryRuleVector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVectorRule()); }
	iv_ruleVector=ruleVector
	{ $current=$iv_ruleVector.current; }
	EOF;

// Rule Vector
ruleVector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_numbers_0_0=RULE_REAL
			{
				newLeafNode(lv_numbers_0_0, grammarAccess.getVectorAccess().getNumbersREALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVectorRule());
				}
				addWithLastConsumed(
					$current,
					"numbers",
					lv_numbers_0_0,
					"m.M.REAL");
			}
		)
	)+
;

// Entry rule entryRuleWord
entryRuleWord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWordRule()); }
	iv_ruleWord=ruleWord
	{ $current=$iv_ruleWord.current; }
	EOF;

// Rule Word
ruleWord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_values_0_0=RULE_ID
			{
				newLeafNode(lv_values_0_0, grammarAccess.getWordAccess().getValuesIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getWordRule());
				}
				addWithLastConsumed(
					$current,
					"values",
					lv_values_0_0,
					"m.M.ID");
			}
		)
	)+
;

// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	iv_ruleSystem=ruleSystem
	{ $current=$iv_ruleSystem.current; }
	EOF;

// Rule System
ruleSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"m.M.ID");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getCommandsCommandParserRuleCall_2_0());
				}
				lv_commands_2_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"commands",
						lv_commands_2_0,
						"m.M.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getLoopParserRuleCall_0());
		}
		this_Loop_0=ruleLoop
		{
			$current = $this_Loop_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getBranchParserRuleCall_1());
		}
		this_Branch_1=ruleBranch
		{
			$current = $this_Branch_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getAssignmentParserRuleCall_2());
		}
		this_Assignment_2=ruleAssignment
		{
			$current = $this_Assignment_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getCallParserRuleCall_3());
		}
		this_Call_3=ruleCall
		{
			$current = $this_Call_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleLoop=ruleLoop
	{ $current=$iv_ruleLoop.current; }
	EOF;

// Rule Loop
ruleLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_entity_0_0=RULE_ID
				{
					newLeafNode(lv_entity_0_0, grammarAccess.getLoopAccess().getEntityIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
					setWithLastConsumed(
						$current,
						"entity",
						lv_entity_0_0,
						"m.M.ID");
				}
			)
		)
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getLoopAccess().getColonKeyword_1_0());
			}
			(
				(
					lv_constraints_2_0=RULE_ID
					{
						newLeafNode(lv_constraints_2_0, grammarAccess.getLoopAccess().getConstraintsIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoopRule());
						}
						addWithLastConsumed(
							$current,
							"constraints",
							lv_constraints_2_0,
							"m.M.ID");
					}
				)
			)+
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getCommandsCommandParserRuleCall_3_0());
				}
				lv_commands_4_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					add(
						$current,
						"commands",
						lv_commands_4_0,
						"m.M.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBranch
entryRuleBranch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBranchRule()); }
	iv_ruleBranch=ruleBranch
	{ $current=$iv_ruleBranch.current; }
	EOF;

// Rule Branch
ruleBranch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='?'
		{
			newLeafNode(otherlv_0, grammarAccess.getBranchAccess().getQuestionMarkKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBranchAccess().getIfConditionParserRuleCall_1_0());
				}
				lv_if_1_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBranchRule());
					}
					set(
						$current,
						"if",
						lv_if_1_0,
						"m.M.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='??'
			{
				newLeafNode(otherlv_2, grammarAccess.getBranchAccess().getQuestionMarkQuestionMarkKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBranchAccess().getElseIfsConditionParserRuleCall_2_1_0());
					}
					lv_elseIfs_3_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBranchRule());
						}
						add(
							$current,
							"elseIfs",
							lv_elseIfs_3_0,
							"m.M.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getBranchAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBranchAccess().getCommandsCommandParserRuleCall_3_1_0());
					}
					lv_commands_5_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBranchRule());
						}
						add(
							$current,
							"commands",
							lv_commands_5_0,
							"m.M.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getBranchAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getConditionExpressionParserRuleCall_0_0());
				}
				lv_condition_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_0_0,
						"m.M.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getCommandsCommandParserRuleCall_2_0());
				}
				lv_commands_2_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					add(
						$current,
						"commands",
						lv_commands_2_0,
						"m.M.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getConditionAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getAccessAccessParserRuleCall_0_0());
				}
				lv_access_0_0=ruleAccess
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"access",
						lv_access_0_0,
						"m.M.Access");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getTypeAssignmentTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleAssignmentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"m.M.AssignmentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"m.M.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	iv_ruleCall=ruleCall
	{ $current=$iv_ruleCall.current; }
	EOF;

// Rule Call
ruleCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getCallAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCallRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"m.M.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCallAccess().getParametersExpressionParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCallRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_2_0,
						"m.M.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getCallAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCallAccess().getParametersExpressionParserRuleCall_3_1_0());
					}
					lv_parameters_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCallRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_4_0,
							"m.M.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAccess
entryRuleAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAccessRule()); }
	iv_ruleAccess=ruleAccess
	{ $current=$iv_ruleAccess.current; }
	EOF;

// Rule Access
ruleAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_0=RULE_ID
				{
					newLeafNode(lv_names_0_0, grammarAccess.getAccessAccess().getNamesIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAccessRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_0,
						"m.M.ID");
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getAccessAccess().getFullStopKeyword_1_0());
			}
			(
				(
					lv_names_2_0=RULE_ID
					{
						newLeafNode(lv_names_2_0, grammarAccess.getAccessAccess().getNamesIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccessRule());
						}
						addWithLastConsumed(
							$current,
							"names",
							lv_names_2_0,
							"m.M.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getExpression1ParserRuleCall_0());
		}
		this_Expression1_0=ruleExpression1
		{
			$current = $this_Expression1_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightExpression1ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression1
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"m.M.Expression1");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression1
entryRuleExpression1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression1Rule()); }
	iv_ruleExpression1=ruleExpression1
	{ $current=$iv_ruleExpression1.current; }
	EOF;

// Rule Expression1
ruleExpression1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression1Access().getPrimaryBParserRuleCall_0());
		}
		this_PrimaryB_0=rulePrimaryB
		{
			$current = $this_PrimaryB_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression1Access().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpression1Access().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression1Access().getRightPrimaryBParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryB
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression1Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"m.M.PrimaryB");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryB
entryRulePrimaryB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryBRule()); }
	iv_rulePrimaryB=rulePrimaryB
	{ $current=$iv_rulePrimaryB.current; }
	EOF;

// Rule PrimaryB
rulePrimaryB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryBAccess().getAtomicBParserRuleCall_0());
		}
		this_AtomicB_0=ruleAtomicB
		{
			$current = $this_AtomicB_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryBAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_2='!'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryBAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryBAccess().getExpressionAtomicBParserRuleCall_1_2_0());
					}
					lv_expression_3_0=ruleAtomicB
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryBRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"m.M.AtomicB");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAtomicB
entryRuleAtomicB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicBRule()); }
	iv_ruleAtomicB=ruleAtomicB
	{ $current=$iv_ruleAtomicB.current; }
	EOF;

// Rule AtomicB
ruleAtomicB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomicBAccess().getAdditionParserRuleCall_0());
		}
		this_Addition_0=ruleAddition
		{
			$current = $this_Addition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAtomicBAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicBAccess().getTypeRelationTypeEnumRuleCall_1_1_0());
					}
					lv_type_2_0=ruleRelationType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicBRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"m.M.RelationType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicBAccess().getRightAdditionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicBRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"m.M.Addition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"m.M.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getBitwiseParserRuleCall_0());
		}
		this_Bitwise_0=ruleBitwise
		{
			$current = $this_Bitwise_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationAccess().getTimesLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationAccess().getDivideLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationAccess().getModulusLeftAction_1_0_2_0(),
								$current);
						}
					)
					otherlv_6='%'
					{
						newLeafNode(otherlv_6, grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightBitwiseParserRuleCall_1_1_0());
					}
					lv_right_7_0=ruleBitwise
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_7_0,
							"m.M.Bitwise");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitwise
entryRuleBitwise returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseRule()); }
	iv_ruleBitwise=ruleBitwise
	{ $current=$iv_ruleBitwise.current; }
	EOF;

// Rule Bitwise
ruleBitwise returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitwiseAccess().getUnaryParserRuleCall_0());
		}
		this_Unary_0=ruleUnary
		{
			$current = $this_Unary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitwiseAccess().getBitwiseLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='&'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getBitwiseAccess().getOpAmpersandKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='|'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getBitwiseAccess().getOpVerticalLineKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='^'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getBitwiseAccess().getOpCircumflexAccentKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='<<'
						{
							newLeafNode(lv_op_2_4, grammarAccess.getBitwiseAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
						    |
						lv_op_2_5='>>'
						{
							newLeafNode(lv_op_2_5, grammarAccess.getBitwiseAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_5, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseAccess().getRightUnaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"m.M.Unary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnary
entryRuleUnary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryRule()); }
	iv_ruleUnary=ruleUnary
	{ $current=$iv_ruleUnary.current; }
	EOF;

// Rule Unary
ruleUnary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryAccess().getBitwiseNegateAction_0_0(),
						$current);
				}
			)
			otherlv_1='~'
			{
				newLeafNode(otherlv_1, grammarAccess.getUnaryAccess().getTildeKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryAccess().getExpressionPrimaryParserRuleCall_0_2_0());
					}
					lv_expression_2_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"m.M.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getUnaryAccess().getPrimaryParserRuleCall_1_0());
			}
			this_Primary_3=rulePrimary
			{
				$current = $this_Primary_3.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getUnaryAccess().getIncrementExpressionAction_1_1_0_0(),
								$current);
						}
					)
					otherlv_5='++'
					{
						newLeafNode(otherlv_5, grammarAccess.getUnaryAccess().getPlusSignPlusSignKeyword_1_1_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getUnaryAccess().getDecrementExpressionAction_1_1_1_0(),
								$current);
						}
					)
					otherlv_7='--'
					{
						newLeafNode(otherlv_7, grammarAccess.getUnaryAccess().getHyphenMinusHyphenMinusKeyword_1_1_1_1());
					}
				)
			)?
		)
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAccessParserRuleCall_0());
		}
		this_Access_0=ruleAccess
		{
			$current = $this_Access_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getCallParserRuleCall_1());
		}
		this_Call_1=ruleCall
		{
			$current = $this_Call_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getBracketsAction_2_0(),
						$current);
				}
			)
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionExpressionParserRuleCall_2_2_0());
					}
					lv_expression_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"m.M.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_3());
			}
		)
	)
;

// Rule RelationType
ruleRelationType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getRelationTypeAccess().getOverEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRelationTypeAccess().getOverEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getRelationTypeAccess().getUnderEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRelationTypeAccess().getUnderEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='='
			{
				$current = grammarAccess.getRelationTypeAccess().getEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRelationTypeAccess().getEqualEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='!='
			{
				$current = grammarAccess.getRelationTypeAccess().getNotequalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRelationTypeAccess().getNotequalEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>='
			{
				$current = grammarAccess.getRelationTypeAccess().getOverorequalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRelationTypeAccess().getOverorequalEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='<='
			{
				$current = grammarAccess.getRelationTypeAccess().getUnderorequalEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRelationTypeAccess().getUnderorequalEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule AssignmentType
ruleAssignmentType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getSetEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAssignmentTypeAccess().getSetEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='+='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getIncreaseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAssignmentTypeAccess().getIncreaseEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='-='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getDecreaseEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAssignmentTypeAccess().getDecreaseEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='*='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getMultiplyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAssignmentTypeAccess().getMultiplyEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='/='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getDivideEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAssignmentTypeAccess().getDivideEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='%='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getModulusEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getAssignmentTypeAccess().getModulusEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='&='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getAndEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getAssignmentTypeAccess().getAndEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='|='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getOrEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getAssignmentTypeAccess().getOrEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='^='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getXorEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getAssignmentTypeAccess().getXorEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='<<='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getShiftLeftEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getAssignmentTypeAccess().getShiftLeftEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='>>='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getShiftRightEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getAssignmentTypeAccess().getShiftRightEnumLiteralDeclaration_10());
			}
		)
	)
;

RULE_WHITE_SPACE : (' '|'\t'|'\r'|'\n')+;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_REAL : '-'? ('0'..'9')* ('.' ('0'..'9')+ ('e' '-'? ('0'..'9')+)?)?;
