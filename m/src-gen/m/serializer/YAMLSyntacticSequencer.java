/*
 * generated by Xtext
 */
package m.serializer;

import com.google.inject.Inject;
import java.util.List;
import m.services.YAMLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class YAMLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected YAMLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_File_WSTerminalRuleCall_2_1_q;
	protected AbstractElementAlias match_InlineMap_SPACETerminalRuleCall_2_0_q;
	protected AbstractElementAlias match_InlineMap_SPACETerminalRuleCall_2_3_q;
	protected AbstractElementAlias match_Map_WSTerminalRuleCall_6_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (YAMLGrammarAccess) access;
		match_File_WSTerminalRuleCall_2_1_q = new TokenAlias(false, true, grammarAccess.getFileAccess().getWSTerminalRuleCall_2_1());
		match_InlineMap_SPACETerminalRuleCall_2_0_q = new TokenAlias(false, true, grammarAccess.getInlineMapAccess().getSPACETerminalRuleCall_2_0());
		match_InlineMap_SPACETerminalRuleCall_2_3_q = new TokenAlias(false, true, grammarAccess.getInlineMapAccess().getSPACETerminalRuleCall_2_3());
		match_Map_WSTerminalRuleCall_6_q = new TokenAlias(false, true, grammarAccess.getMapAccess().getWSTerminalRuleCall_6());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSPACERule())
			return getSPACEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * terminal SPACE: ' ';
	 */
	protected String getSPACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	/**
	 * terminal WS: NEWLINE SPACE*;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_File_WSTerminalRuleCall_2_1_q.equals(syntax))
				emit_File_WSTerminalRuleCall_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InlineMap_SPACETerminalRuleCall_2_0_q.equals(syntax))
				emit_InlineMap_SPACETerminalRuleCall_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InlineMap_SPACETerminalRuleCall_2_3_q.equals(syntax))
				emit_InlineMap_SPACETerminalRuleCall_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Map_WSTerminalRuleCall_6_q.equals(syntax))
				emit_Map_WSTerminalRuleCall_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     nodes+=Node (ambiguity) (rule end)
	 *     nodes+=Node (ambiguity) nodes+=Node
	 */
	protected void emit_File_WSTerminalRuleCall_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '{' (ambiguity) values+=KeyValue
	 */
	protected void emit_InlineMap_SPACETerminalRuleCall_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     values+=KeyValue (ambiguity) '}' (rule end)
	 */
	protected void emit_InlineMap_SPACETerminalRuleCall_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     body+=Value (ambiguity) END (rule end)
	 */
	protected void emit_Map_WSTerminalRuleCall_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
