/**
 * generated by Xtext
 */
package m.cs.impl;

import java.lang.String;

import java.util.Collection;

import m.cs.Argument;
import m.cs.CsPackage;
import m.cs.Method;
import m.cs.TypeName;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link m.cs.impl.MethodImpl#isOverride <em>Override</em>}</li>
 *   <li>{@link m.cs.impl.MethodImpl#getType <em>Type</em>}</li>
 *   <li>{@link m.cs.impl.MethodImpl#isImplicit <em>Implicit</em>}</li>
 *   <li>{@link m.cs.impl.MethodImpl#isOperator <em>Operator</em>}</li>
 *   <li>{@link m.cs.impl.MethodImpl#getName <em>Name</em>}</li>
 *   <li>{@link m.cs.impl.MethodImpl#getGenerics <em>Generics</em>}</li>
 *   <li>{@link m.cs.impl.MethodImpl#getArguments <em>Arguments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodImpl extends BlockImpl implements Method
{
  /**
   * The default value of the '{@link #isOverride() <em>Override</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOverride()
   * @generated
   * @ordered
   */
  protected static final boolean OVERRIDE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOverride() <em>Override</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOverride()
   * @generated
   * @ordered
   */
  protected boolean override = OVERRIDE_EDEFAULT;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected TypeName type;

  /**
   * The default value of the '{@link #isImplicit() <em>Implicit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isImplicit()
   * @generated
   * @ordered
   */
  protected static final boolean IMPLICIT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isImplicit() <em>Implicit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isImplicit()
   * @generated
   * @ordered
   */
  protected boolean implicit = IMPLICIT_EDEFAULT;

  /**
   * The default value of the '{@link #isOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOperator()
   * @generated
   * @ordered
   */
  protected static final boolean OPERATOR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOperator()
   * @generated
   * @ordered
   */
  protected boolean operator = OPERATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getGenerics() <em>Generics</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenerics()
   * @generated
   * @ordered
   */
  protected EList<TypeName> generics;

  /**
   * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArguments()
   * @generated
   * @ordered
   */
  protected EList<Argument> arguments;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CsPackage.Literals.METHOD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isOverride()
  {
    return override;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOverride(boolean newOverride)
  {
    boolean oldOverride = override;
    override = newOverride;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.METHOD__OVERRIDE, oldOverride, override));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeName getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(TypeName newType, NotificationChain msgs)
  {
    TypeName oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsPackage.METHOD__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(TypeName newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsPackage.METHOD__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsPackage.METHOD__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.METHOD__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isImplicit()
  {
    return implicit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImplicit(boolean newImplicit)
  {
    boolean oldImplicit = implicit;
    implicit = newImplicit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.METHOD__IMPLICIT, oldImplicit, implicit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(boolean newOperator)
  {
    boolean oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.METHOD__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.METHOD__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeName> getGenerics()
  {
    if (generics == null)
    {
      generics = new EObjectContainmentEList<TypeName>(TypeName.class, this, CsPackage.METHOD__GENERICS);
    }
    return generics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Argument> getArguments()
  {
    if (arguments == null)
    {
      arguments = new EObjectContainmentEList<Argument>(Argument.class, this, CsPackage.METHOD__ARGUMENTS);
    }
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CsPackage.METHOD__TYPE:
        return basicSetType(null, msgs);
      case CsPackage.METHOD__GENERICS:
        return ((InternalEList<?>)getGenerics()).basicRemove(otherEnd, msgs);
      case CsPackage.METHOD__ARGUMENTS:
        return ((InternalEList<?>)getArguments()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CsPackage.METHOD__OVERRIDE:
        return isOverride();
      case CsPackage.METHOD__TYPE:
        return getType();
      case CsPackage.METHOD__IMPLICIT:
        return isImplicit();
      case CsPackage.METHOD__OPERATOR:
        return isOperator();
      case CsPackage.METHOD__NAME:
        return getName();
      case CsPackage.METHOD__GENERICS:
        return getGenerics();
      case CsPackage.METHOD__ARGUMENTS:
        return getArguments();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CsPackage.METHOD__OVERRIDE:
        setOverride((Boolean)newValue);
        return;
      case CsPackage.METHOD__TYPE:
        setType((TypeName)newValue);
        return;
      case CsPackage.METHOD__IMPLICIT:
        setImplicit((Boolean)newValue);
        return;
      case CsPackage.METHOD__OPERATOR:
        setOperator((Boolean)newValue);
        return;
      case CsPackage.METHOD__NAME:
        setName((String)newValue);
        return;
      case CsPackage.METHOD__GENERICS:
        getGenerics().clear();
        getGenerics().addAll((Collection<? extends TypeName>)newValue);
        return;
      case CsPackage.METHOD__ARGUMENTS:
        getArguments().clear();
        getArguments().addAll((Collection<? extends Argument>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CsPackage.METHOD__OVERRIDE:
        setOverride(OVERRIDE_EDEFAULT);
        return;
      case CsPackage.METHOD__TYPE:
        setType((TypeName)null);
        return;
      case CsPackage.METHOD__IMPLICIT:
        setImplicit(IMPLICIT_EDEFAULT);
        return;
      case CsPackage.METHOD__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case CsPackage.METHOD__NAME:
        setName(NAME_EDEFAULT);
        return;
      case CsPackage.METHOD__GENERICS:
        getGenerics().clear();
        return;
      case CsPackage.METHOD__ARGUMENTS:
        getArguments().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CsPackage.METHOD__OVERRIDE:
        return override != OVERRIDE_EDEFAULT;
      case CsPackage.METHOD__TYPE:
        return type != null;
      case CsPackage.METHOD__IMPLICIT:
        return implicit != IMPLICIT_EDEFAULT;
      case CsPackage.METHOD__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
      case CsPackage.METHOD__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case CsPackage.METHOD__GENERICS:
        return generics != null && !generics.isEmpty();
      case CsPackage.METHOD__ARGUMENTS:
        return arguments != null && !arguments.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (override: ");
    result.append(override);
    result.append(", implicit: ");
    result.append(implicit);
    result.append(", operator: ");
    result.append(operator);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MethodImpl
