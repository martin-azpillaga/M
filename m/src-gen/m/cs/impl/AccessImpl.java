/**
 * generated by Xtext
 */
package m.cs.impl;

import java.util.Collection;

import m.cs.Access;
import m.cs.CsPackage;
import m.cs.Portion;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Access</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link m.cs.impl.AccessImpl#isNew <em>New</em>}</li>
 *   <li>{@link m.cs.impl.AccessImpl#isRef <em>Ref</em>}</li>
 *   <li>{@link m.cs.impl.AccessImpl#getPortions <em>Portions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AccessImpl extends ExpressionImpl implements Access
{
  /**
   * The default value of the '{@link #isNew() <em>New</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNew()
   * @generated
   * @ordered
   */
  protected static final boolean NEW_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNew() <em>New</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNew()
   * @generated
   * @ordered
   */
  protected boolean new_ = NEW_EDEFAULT;

  /**
   * The default value of the '{@link #isRef() <em>Ref</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRef()
   * @generated
   * @ordered
   */
  protected static final boolean REF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRef() <em>Ref</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRef()
   * @generated
   * @ordered
   */
  protected boolean ref = REF_EDEFAULT;

  /**
   * The cached value of the '{@link #getPortions() <em>Portions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPortions()
   * @generated
   * @ordered
   */
  protected EList<Portion> portions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AccessImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CsPackage.Literals.ACCESS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNew()
  {
    return new_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNew(boolean newNew)
  {
    boolean oldNew = new_;
    new_ = newNew;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.ACCESS__NEW, oldNew, new_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isRef()
  {
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRef(boolean newRef)
  {
    boolean oldRef = ref;
    ref = newRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.ACCESS__REF, oldRef, ref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Portion> getPortions()
  {
    if (portions == null)
    {
      portions = new EObjectContainmentEList<Portion>(Portion.class, this, CsPackage.ACCESS__PORTIONS);
    }
    return portions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CsPackage.ACCESS__PORTIONS:
        return ((InternalEList<?>)getPortions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CsPackage.ACCESS__NEW:
        return isNew();
      case CsPackage.ACCESS__REF:
        return isRef();
      case CsPackage.ACCESS__PORTIONS:
        return getPortions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CsPackage.ACCESS__NEW:
        setNew((Boolean)newValue);
        return;
      case CsPackage.ACCESS__REF:
        setRef((Boolean)newValue);
        return;
      case CsPackage.ACCESS__PORTIONS:
        getPortions().clear();
        getPortions().addAll((Collection<? extends Portion>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CsPackage.ACCESS__NEW:
        setNew(NEW_EDEFAULT);
        return;
      case CsPackage.ACCESS__REF:
        setRef(REF_EDEFAULT);
        return;
      case CsPackage.ACCESS__PORTIONS:
        getPortions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CsPackage.ACCESS__NEW:
        return new_ != NEW_EDEFAULT;
      case CsPackage.ACCESS__REF:
        return ref != REF_EDEFAULT;
      case CsPackage.ACCESS__PORTIONS:
        return portions != null && !portions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (new: ");
    result.append(new_);
    result.append(", ref: ");
    result.append(ref);
    result.append(')');
    return result.toString();
  }

} //AccessImpl
