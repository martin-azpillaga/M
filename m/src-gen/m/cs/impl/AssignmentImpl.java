/**
 * generated by Xtext
 */
package m.cs.impl;

import m.cs.Access;
import m.cs.Assignment;
import m.cs.AssignmentType;
import m.cs.CsPackage;
import m.cs.TypeName;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link m.cs.impl.AssignmentImpl#isVar <em>Var</em>}</li>
 *   <li>{@link m.cs.impl.AssignmentImpl#getType <em>Type</em>}</li>
 *   <li>{@link m.cs.impl.AssignmentImpl#getAccess <em>Access</em>}</li>
 *   <li>{@link m.cs.impl.AssignmentImpl#getAssignmentType <em>Assignment Type</em>}</li>
 *   <li>{@link m.cs.impl.AssignmentImpl#isIncrement <em>Increment</em>}</li>
 *   <li>{@link m.cs.impl.AssignmentImpl#isDecrement <em>Decrement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssignmentImpl extends CommandImpl implements Assignment
{
  /**
   * The default value of the '{@link #isVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVar()
   * @generated
   * @ordered
   */
  protected static final boolean VAR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVar()
   * @generated
   * @ordered
   */
  protected boolean var = VAR_EDEFAULT;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected TypeName type;

  /**
   * The cached value of the '{@link #getAccess() <em>Access</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccess()
   * @generated
   * @ordered
   */
  protected Access access;

  /**
   * The default value of the '{@link #getAssignmentType() <em>Assignment Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignmentType()
   * @generated
   * @ordered
   */
  protected static final AssignmentType ASSIGNMENT_TYPE_EDEFAULT = AssignmentType.SET;

  /**
   * The cached value of the '{@link #getAssignmentType() <em>Assignment Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignmentType()
   * @generated
   * @ordered
   */
  protected AssignmentType assignmentType = ASSIGNMENT_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isIncrement() <em>Increment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIncrement()
   * @generated
   * @ordered
   */
  protected static final boolean INCREMENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIncrement() <em>Increment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIncrement()
   * @generated
   * @ordered
   */
  protected boolean increment = INCREMENT_EDEFAULT;

  /**
   * The default value of the '{@link #isDecrement() <em>Decrement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDecrement()
   * @generated
   * @ordered
   */
  protected static final boolean DECREMENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDecrement() <em>Decrement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDecrement()
   * @generated
   * @ordered
   */
  protected boolean decrement = DECREMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CsPackage.Literals.ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVar(boolean newVar)
  {
    boolean oldVar = var;
    var = newVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.ASSIGNMENT__VAR, oldVar, var));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeName getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(TypeName newType, NotificationChain msgs)
  {
    TypeName oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsPackage.ASSIGNMENT__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(TypeName newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsPackage.ASSIGNMENT__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsPackage.ASSIGNMENT__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.ASSIGNMENT__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Access getAccess()
  {
    return access;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAccess(Access newAccess, NotificationChain msgs)
  {
    Access oldAccess = access;
    access = newAccess;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsPackage.ASSIGNMENT__ACCESS, oldAccess, newAccess);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAccess(Access newAccess)
  {
    if (newAccess != access)
    {
      NotificationChain msgs = null;
      if (access != null)
        msgs = ((InternalEObject)access).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsPackage.ASSIGNMENT__ACCESS, null, msgs);
      if (newAccess != null)
        msgs = ((InternalEObject)newAccess).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsPackage.ASSIGNMENT__ACCESS, null, msgs);
      msgs = basicSetAccess(newAccess, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.ASSIGNMENT__ACCESS, newAccess, newAccess));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentType getAssignmentType()
  {
    return assignmentType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAssignmentType(AssignmentType newAssignmentType)
  {
    AssignmentType oldAssignmentType = assignmentType;
    assignmentType = newAssignmentType == null ? ASSIGNMENT_TYPE_EDEFAULT : newAssignmentType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.ASSIGNMENT__ASSIGNMENT_TYPE, oldAssignmentType, assignmentType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIncrement()
  {
    return increment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIncrement(boolean newIncrement)
  {
    boolean oldIncrement = increment;
    increment = newIncrement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.ASSIGNMENT__INCREMENT, oldIncrement, increment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isDecrement()
  {
    return decrement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDecrement(boolean newDecrement)
  {
    boolean oldDecrement = decrement;
    decrement = newDecrement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsPackage.ASSIGNMENT__DECREMENT, oldDecrement, decrement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CsPackage.ASSIGNMENT__TYPE:
        return basicSetType(null, msgs);
      case CsPackage.ASSIGNMENT__ACCESS:
        return basicSetAccess(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CsPackage.ASSIGNMENT__VAR:
        return isVar();
      case CsPackage.ASSIGNMENT__TYPE:
        return getType();
      case CsPackage.ASSIGNMENT__ACCESS:
        return getAccess();
      case CsPackage.ASSIGNMENT__ASSIGNMENT_TYPE:
        return getAssignmentType();
      case CsPackage.ASSIGNMENT__INCREMENT:
        return isIncrement();
      case CsPackage.ASSIGNMENT__DECREMENT:
        return isDecrement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CsPackage.ASSIGNMENT__VAR:
        setVar((Boolean)newValue);
        return;
      case CsPackage.ASSIGNMENT__TYPE:
        setType((TypeName)newValue);
        return;
      case CsPackage.ASSIGNMENT__ACCESS:
        setAccess((Access)newValue);
        return;
      case CsPackage.ASSIGNMENT__ASSIGNMENT_TYPE:
        setAssignmentType((AssignmentType)newValue);
        return;
      case CsPackage.ASSIGNMENT__INCREMENT:
        setIncrement((Boolean)newValue);
        return;
      case CsPackage.ASSIGNMENT__DECREMENT:
        setDecrement((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CsPackage.ASSIGNMENT__VAR:
        setVar(VAR_EDEFAULT);
        return;
      case CsPackage.ASSIGNMENT__TYPE:
        setType((TypeName)null);
        return;
      case CsPackage.ASSIGNMENT__ACCESS:
        setAccess((Access)null);
        return;
      case CsPackage.ASSIGNMENT__ASSIGNMENT_TYPE:
        setAssignmentType(ASSIGNMENT_TYPE_EDEFAULT);
        return;
      case CsPackage.ASSIGNMENT__INCREMENT:
        setIncrement(INCREMENT_EDEFAULT);
        return;
      case CsPackage.ASSIGNMENT__DECREMENT:
        setDecrement(DECREMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CsPackage.ASSIGNMENT__VAR:
        return var != VAR_EDEFAULT;
      case CsPackage.ASSIGNMENT__TYPE:
        return type != null;
      case CsPackage.ASSIGNMENT__ACCESS:
        return access != null;
      case CsPackage.ASSIGNMENT__ASSIGNMENT_TYPE:
        return assignmentType != ASSIGNMENT_TYPE_EDEFAULT;
      case CsPackage.ASSIGNMENT__INCREMENT:
        return increment != INCREMENT_EDEFAULT;
      case CsPackage.ASSIGNMENT__DECREMENT:
        return decrement != DECREMENT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (var: ");
    result.append(var);
    result.append(", assignmentType: ");
    result.append(assignmentType);
    result.append(", increment: ");
    result.append(increment);
    result.append(", decrement: ");
    result.append(decrement);
    result.append(')');
    return result.toString();
  }

} //AssignmentImpl
