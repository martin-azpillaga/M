/**
 * generated by Xtext
 */
package m.cs;

import java.lang.String;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Method</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link m.cs.Method#isOverride <em>Override</em>}</li>
 *   <li>{@link m.cs.Method#getType <em>Type</em>}</li>
 *   <li>{@link m.cs.Method#isImplicit <em>Implicit</em>}</li>
 *   <li>{@link m.cs.Method#isOperator <em>Operator</em>}</li>
 *   <li>{@link m.cs.Method#getName <em>Name</em>}</li>
 *   <li>{@link m.cs.Method#getGenerics <em>Generics</em>}</li>
 *   <li>{@link m.cs.Method#getArguments <em>Arguments</em>}</li>
 * </ul>
 *
 * @see m.cs.CsPackage#getMethod()
 * @model
 * @generated
 */
public interface Method extends Block
{
  /**
   * Returns the value of the '<em><b>Override</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Override</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Override</em>' attribute.
   * @see #setOverride(boolean)
   * @see m.cs.CsPackage#getMethod_Override()
   * @model
   * @generated
   */
  boolean isOverride();

  /**
   * Sets the value of the '{@link m.cs.Method#isOverride <em>Override</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Override</em>' attribute.
   * @see #isOverride()
   * @generated
   */
  void setOverride(boolean value);

  /**
   * Returns the value of the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Type</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Type</em>' containment reference.
   * @see #setType(TypeName)
   * @see m.cs.CsPackage#getMethod_Type()
   * @model containment="true"
   * @generated
   */
  TypeName getType();

  /**
   * Sets the value of the '{@link m.cs.Method#getType <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Type</em>' containment reference.
   * @see #getType()
   * @generated
   */
  void setType(TypeName value);

  /**
   * Returns the value of the '<em><b>Implicit</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Implicit</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Implicit</em>' attribute.
   * @see #setImplicit(boolean)
   * @see m.cs.CsPackage#getMethod_Implicit()
   * @model
   * @generated
   */
  boolean isImplicit();

  /**
   * Sets the value of the '{@link m.cs.Method#isImplicit <em>Implicit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Implicit</em>' attribute.
   * @see #isImplicit()
   * @generated
   */
  void setImplicit(boolean value);

  /**
   * Returns the value of the '<em><b>Operator</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Operator</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Operator</em>' attribute.
   * @see #setOperator(boolean)
   * @see m.cs.CsPackage#getMethod_Operator()
   * @model
   * @generated
   */
  boolean isOperator();

  /**
   * Sets the value of the '{@link m.cs.Method#isOperator <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Operator</em>' attribute.
   * @see #isOperator()
   * @generated
   */
  void setOperator(boolean value);

  /**
   * Returns the value of the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Name</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Name</em>' attribute.
   * @see #setName(String)
   * @see m.cs.CsPackage#getMethod_Name()
   * @model
   * @generated
   */
  String getName();

  /**
   * Sets the value of the '{@link m.cs.Method#getName <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Name</em>' attribute.
   * @see #getName()
   * @generated
   */
  void setName(String value);

  /**
   * Returns the value of the '<em><b>Generics</b></em>' containment reference list.
   * The list contents are of type {@link m.cs.TypeName}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Generics</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Generics</em>' containment reference list.
   * @see m.cs.CsPackage#getMethod_Generics()
   * @model containment="true"
   * @generated
   */
  EList<TypeName> getGenerics();

  /**
   * Returns the value of the '<em><b>Arguments</b></em>' containment reference list.
   * The list contents are of type {@link m.cs.Argument}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Arguments</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Arguments</em>' containment reference list.
   * @see m.cs.CsPackage#getMethod_Arguments()
   * @model containment="true"
   * @generated
   */
  EList<Argument> getArguments();

} // Method
