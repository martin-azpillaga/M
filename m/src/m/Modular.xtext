grammar m.Modular with m.Expressions

import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.minim.games/expressions"
generate modular "http://www.minim.games/modular"

Procedure:
	 name=IDENTIFIER 
	 (OPEN ( arguments+=IDENTIFIER (SEPARATOR arguments+=IDENTIFIER)*)? CLOSE)?
	 BEGIN 
	 	statements+=Statement*
	 	('←' return=Expression)?
	 END
;

Statement: Selection|Iteration|Call|Assignment;
Selection:
	 ('→'|'#') branches+=Branch
	( ('⇉'|'##') branches+=Branch)*
	( BEGIN statements+=Statement*  END)?
;

Branch:
	condition=Expression
	 BEGIN statements+=Statement*  END
;

Iteration:
	 ('↺'|'@') condition=Expression
	 BEGIN statements+=Statement*  END
;

Assignment:
	identifier=IDENTIFIER kind=AssignmentKind expression=Expression;


Call: 
	identifier=IDENTIFIER  
	OPEN (parameters+=Ternary ( SEPARATOR parameters+=Ternary)*)?  CLOSE;

@Override
Variable:
	IdentifierLiteral|Call;
	
enum AssignmentKind: 
	set='='|increase='+='|decrease='-='|multiply='*='|divide='/='
	|or ='|='|and='&='|xor='^='|shiftLeft='<<='|shiftRight='>>='
;

terminal OPEN: '(';
terminal CLOSE: ')';
terminal SEPARATOR: ',';
terminal BEGIN: '{';
terminal END: '}';