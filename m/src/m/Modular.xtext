grammar m.Modular with m.Expressions

import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.minim.games/expressions"
generate modular "http://www.minim.games/modular"

Procedure:
	 name=IDENTIFIER 
	 (OPEN ( arguments+=IDENTIFIER (SEPARATOR arguments+=IDENTIFIER)*)? CLOSE)?
	 BEGIN statements+=Statement*  END
;

Statement: Selection|Iteration|Action;
Selection:
	 ('→'|'#') branches+=Branch
	( ('⇉'|'##') branches+=Branch)*
	( BEGIN (statements+=(Selection|Iteration|Call))*  END)?
;

Branch:
	condition=Expression
	 BEGIN (statements+=(Selection|Iteration|Action))*  END
;

Iteration:
	 ('↺'|'@') condition=Expression
	 BEGIN (statements+=(Selection|Iteration|Action))*  END
;

Action:
	Access ({Assignment.access=current} kind=AssignmentKind expression=Expression)?;




Call: 
	identifier=IDENTIFIER  
	OPEN (parameters+=Ternary ( SEPARATOR parameters+=Ternary)*)?  CLOSE;

@Override Variable:
	Call|IdentifierLiteral;
	
Access: variables+=Variable ('.' variables+=Variable)*;

@Override
Primary returns Expression:
  FloatLiteral |
  StringLiteral |
  BooleanLiteral |
  Access |
  OPEN Expression CLOSE;

enum AssignmentKind: set='='|increase='+='|decrease='-='|multiply='*='|divide='/='
					|or ='|='|and='&='|xor='^='|shiftLeft='<<='|shiftRight='>>='
;

terminal OPEN: '(';
terminal CLOSE: ')';
terminal SEPARATOR: ',';
terminal BEGIN: '{';
terminal END: '}';