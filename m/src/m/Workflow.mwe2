module m.Workflow

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow 
{	
	component = XtextGenerator 
	{
		configuration = 
		{
			project = StandardProjectConfig 
			{
				baseName = "m"
				rootPath = rootPath
				genericIde = {enabled = true}
				eclipsePlugin = {enabled = true}
				createEclipseMetaData = true
			}
			code = 
			{
				encoding = "UTF-8"
				lineDelimiter = "\n"
			}
		}
		language = XtextGeneratorLanguage
		{
			name = "m.Expressions"
			fileExtensions = "expressions"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {emfRuntimeVersion="2.12"}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {debugGrammar = true}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.Modular"
			fileExtensions = "modular"
			referencedResource = "platform:/resource/m/src/m/Expressions.xtext"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {emfRuntimeVersion="2.12"}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {debugGrammar = true}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.M"
			fileExtensions = "m"
			referencedResource = "platform:/resource/m/src/m/Expressions.xtext"
			referencedResource = "platform:/resource/m/src/m/Modular.xtext"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {emfRuntimeVersion="2.12"}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {debugGrammar = true}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.Text"
			fileExtensions = "text"
			referencedResource = "platform:/resource/m/src/m/Expressions.xtext"
			referencedResource = "platform:/resource/m/src/m/Modular.xtext"
			referencedResource = "platform:/resource/m/src/m/M.xtext"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {debugGrammar = true}
		    fragment = validation.ValidatorFragment2 { generateStub = true }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.Testua"
			fileExtensions = "testua"
			referencedResource = "platform:/resource/m/src/m/Expressions.xtext"
			referencedResource = "platform:/resource/m/src/m/Modular.xtext"
			referencedResource = "platform:/resource/m/src/m/M.xtext"				
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.CSharp"
			fileExtensions = "cs"
			referencedResource = "platform:/resource/m/src/m/Expressions.xtext"
			referencedResource = "platform:/resource/m/src/m/Modular.xtext"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {emfRuntimeVersion="2.12"}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 { debugGrammar = true }
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.XML"
			fileExtensions = "blocks, xml"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {emfRuntimeVersion="2.12"}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 { debugGrammar = true }
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.YAML"
			fileExtensions = "meta,prefab"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {emfRuntimeVersion="2.12"}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.JSON"
			fileExtensions = "json"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {emfRuntimeVersion="2.12"}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		}
	}
}
