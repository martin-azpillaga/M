grammar m.Structured hidden(WHITE_SPACE)

import "http://www.eclipse.org/emf/2002/Ecore"
generate structured "http://www.minim.games/structured"

Procedure:
	name=IDENTIFIER
	'(' (arguments+=IDENTIFIER (',' arguments+=IDENTIFIER)*)? ')'
	BEGIN	statements+=Statement* END;

Statement:
	Iteration | Selection | Assignment | Call;

Iteration:
	'~' condition=Expression
	BEGIN statements+=Statement* END;

Selection:
	'?' if=Condition
	('??' elseIfs+=Condition)*
	(BEGIN statements+=Statement* END)?;

Condition:
	condition=Expression BEGIN statements+=Statement* END;

Assignment:
	access=Access type=AssignmentKind expression=Expression;

Call:
	name=IDENTIFIER '(' parameters+=Expression (',' parameters+=Expression)* ')';

Expression returns Expression:
	Expression1 ({Or.left=current} '||' right=Expression1)*;

Expression1 returns Expression:
	PrimaryB ({And.left=current} '&&' right=PrimaryB)*;

PrimaryB returns Expression:
	AtomicB | {Not} '!' expression=AtomicB;

AtomicB returns Expression:
	Addition ({Comparison.left=current} type=RelationKind right=Addition)?;

Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;

Multiplication returns Expression:
	Bitwise (({Times.left=current} '*' | {Divide.left=current} '/' | {Modulus.left=current} '%') right=Bitwise)*;

Bitwise returns Expression:
	Unary ({Bitwise.left=current} op=('&' | '|' | '^' | '<<' | '>>') right=Unary)*;

Unary returns Expression:
	{BitwiseNegate} '~' expression=Primary
	| Primary ({Increment.expression=current} '++' | {Decrement.expression=current} '--')?;

Primary returns Expression:
	Access | Call | {Brackets} '(' expression=Expression ')';

Access:
	names+=IDENTIFIER ('.' names+=IDENTIFIER)*;

enum RelationKind:
	over='>' | under='<' | equal='=' | notequal='!=' | overorequal='>=' | underorequal='<=';

enum AssignmentKind:
	set='=' | increase='+=' | decrease='-=' | multiply='*=' | divide='/=' | modulus='%=' | and='&=' | or='|=' | xor='^='
	| shiftLeft='<<=' | shiftRight='>>=';

terminal BEGIN: '{';
terminal END: '}';

terminal WHITE_SPACE:
	(' ' | '\t' | '\r' | '\n')+;

terminal IDENTIFIER:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;