/**
 * generated by Xtext 2.18.0
 */
package m.formatting2;

import com.google.common.base.Objects;
import java.util.Arrays;
import java.util.function.Consumer;
import m.cs.Access;
import m.cs.Annotation;
import m.cs.Argument;
import m.cs.Assignment;
import m.cs.Cast;
import m.cs.Command;
import m.cs.Decrement;
import m.cs.Expression;
import m.cs.Field;
import m.cs.File;
import m.cs.If;
import m.cs.Increment;
import m.cs.Indexing;
import m.cs.Initialization;
import m.cs.InitializeVariable;
import m.cs.Lambda;
import m.cs.Member;
import m.cs.Method;
import m.cs.MethodCall;
import m.cs.Portion;
import m.cs.QualifiedName;
import m.cs.Return;
import m.cs.Type;
import m.cs.TypeName;
import m.cs.Using;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class CSFormatter extends AbstractFormatter2 {
  protected void _format(final File file, @Extension final IFormattableDocument document) {
    EList<Using> _usings = file.getUsings();
    for (final Using using : _usings) {
      {
        Using _head = IterableExtensions.<Using>head(file.getUsings());
        boolean _tripleNotEquals = (using != _head);
        if (_tripleNotEquals) {
          final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
            it.newLine();
          };
          document.<Using>prepend(using, _function);
        }
        document.<Using>format(using);
      }
    }
    EList<Member> _types = file.getTypes();
    for (final Member type : _types) {
      document.<Member>format(type);
    }
  }
  
  protected void _format(final Using using, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(using).keyword(";"), _function);
    document.<QualifiedName>format(using.getName());
  }
  
  protected void _format(final QualifiedName qualifiedName, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.surround(it, _function_1);
    };
    this.textRegionExtensions.regionFor(qualifiedName).keywords(".").forEach(_function);
  }
  
  protected void _format(final Member member, @Extension final IFormattableDocument document) {
    final Consumer<Annotation> _function = (Annotation it) -> {
      document.<Annotation>format(it);
    };
    member.getAnnotations().forEach(_function);
    final Consumer<Annotation> _function_1 = (Annotation it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it_1) -> {
        it_1.newLine();
      };
      document.<Annotation>append(it, _function_2);
    };
    member.getAnnotations().forEach(_function_1);
    EObject container = member.eContainer();
    EObject _value = member.getValue();
    if ((_value instanceof Field)) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<Member>prepend(member, _function_2);
    } else {
      if ((container instanceof Type)) {
        Member _head = IterableExtensions.<Member>head(((Type)container).getMembers());
        boolean _equals = Objects.equal(member, _head);
        if (_equals) {
          final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
            it.newLine();
          };
          document.<Member>prepend(member, _function_3);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
            it.setNewLines(2);
          };
          document.<Member>prepend(member, _function_4);
        }
      } else {
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.setNewLines(2);
        };
        document.<Member>prepend(member, _function_5);
      }
    }
    document.<EObject>format(member.getValue());
  }
  
  protected void _format(final Annotation annotation, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(annotation).keyword("["), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(annotation).keyword("]"), _function_1);
    document.<TypeName>format(annotation.getFunction());
    final Consumer<Expression> _function_2 = (Expression it) -> {
      document.<Expression>format(it);
    };
    annotation.getParameters().forEach(_function_2);
  }
  
  protected void _format(final Type type, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.prepend(it, _function_1);
    };
    this.textRegionExtensions.regionFor(type).keywords(",").forEach(_function);
    final Consumer<TypeName> _function_1 = (TypeName it) -> {
      document.<TypeName>format(it);
    };
    type.getSuperTypes().forEach(_function_1);
    ISemanticRegion open = this.textRegionExtensions.regionFor(type).keyword("{");
    ISemanticRegion close = this.textRegionExtensions.regionFor(type).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(open, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_4);
    final Consumer<Member> _function_5 = (Member it) -> {
      document.<Member>format(it);
    };
    type.getMembers().forEach(_function_5);
  }
  
  protected void _format(final TypeName typeName, @Extension final IFormattableDocument document) {
    document.<QualifiedName>format(typeName.getName());
    final Consumer<QualifiedName> _function = (QualifiedName it) -> {
      document.<QualifiedName>format(it);
    };
    typeName.getGenerics().forEach(_function);
    final Consumer<ISemanticRegion> _function_1 = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.prepend(it, _function_2);
    };
    this.textRegionExtensions.regionFor(typeName).keywords(",").forEach(_function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(typeName).keyword("<"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(typeName).keyword(">"), _function_3);
  }
  
  protected void _format(final Method method, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.prepend(it, _function_1);
    };
    this.textRegionExtensions.regionFor(method).keywords(",").forEach(_function);
    Argument _head = IterableExtensions.<Argument>head(method.getArguments());
    if (_head!=null) {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.<Argument>prepend(_head, _function_1);
    }
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(method).keyword("("), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(method).keyword(")"), _function_3);
    ISemanticRegion open = this.textRegionExtensions.regionFor(method).keyword("{");
    ISemanticRegion close = this.textRegionExtensions.regionFor(method).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(open, _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_6);
    final Consumer<Command> _function_7 = (Command it) -> {
      document.<Command>format(it);
    };
    method.getCommands().forEach(_function_7);
  }
  
  protected void _format(final Argument argument, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final If branch, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<If>prepend(branch, _function);
    document.<Expression>format(branch.getExpression());
    ISemanticRegion open = this.textRegionExtensions.regionFor(branch).keyword("{");
    ISemanticRegion close = this.textRegionExtensions.regionFor(branch).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(open, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_3);
    final Consumer<Command> _function_4 = (Command it) -> {
      document.<Command>format(it);
    };
    branch.getCommands().forEach(_function_4);
  }
  
  protected void _format(final Return r, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Return>prepend(r, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(r).keyword(";"), _function_1);
    document.<Expression>format(r.getExpression());
  }
  
  protected void _format(final Assignment assignment, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Assignment>prepend(assignment, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(assignment).keyword(";"), _function_1);
    TypeName _type = assignment.getType();
    if (_type!=null) {
      document.<TypeName>format(_type);
    }
    document.<Access>format(assignment.getAccess());
    document.<Expression>format(assignment.getExpression());
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(assignment).keyword("++"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(assignment).keyword("--"), _function_3);
  }
  
  protected void _format(final Field field, @Extension final IFormattableDocument document) {
    document.<TypeName>format(field.getType());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(field).keyword(";"), _function);
  }
  
  protected void _format(final Cast cast, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(cast).keyword("("), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(cast).keyword(")"), _function_1);
    document.<Expression>format(cast.getExpression());
  }
  
  protected void _format(final Lambda lambda, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.prepend(it, _function_1);
    };
    this.textRegionExtensions.regionFor(lambda).keywords(",").forEach(_function);
    ISemanticRegion open = this.textRegionExtensions.regionFor(lambda).keyword("{");
    ISemanticRegion close = this.textRegionExtensions.regionFor(lambda).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(open, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_3);
    final Consumer<Command> _function_4 = (Command it) -> {
      document.<Command>format(it);
    };
    lambda.getCommands().forEach(_function_4);
  }
  
  protected void _format(final Increment increment, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(increment).keyword("++"), _function);
    document.<Expression>format(increment.getLeft());
  }
  
  protected void _format(final Decrement decrement, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(decrement).keyword("--"), _function);
    document.<Expression>format(decrement.getLeft());
  }
  
  protected void _format(final Access access, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.surround(it, _function_1);
    };
    this.textRegionExtensions.regionFor(access).keywords(".").forEach(_function);
    final Consumer<Portion> _function_1 = (Portion it) -> {
      document.<Portion>format(it);
    };
    access.getPortions().forEach(_function_1);
  }
  
  protected void _format(final MethodCall methodCall, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(methodCall).keyword("<"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(methodCall).keyword(">"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(methodCall).keyword("("), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(methodCall).keyword(")"), _function_3);
    final Consumer<ISemanticRegion> _function_4 = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.prepend(it, _function_5);
    };
    this.textRegionExtensions.regionFor(methodCall).keywords(",").forEach(_function_4);
    final Consumer<Expression> _function_5 = (Expression it) -> {
      document.<Expression>format(it);
    };
    methodCall.getExpressions().forEach(_function_5);
  }
  
  protected void _format(final Initialization initialization, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.prepend(it, _function_1);
    };
    this.textRegionExtensions.regionFor(initialization).keywords(",").forEach(_function);
    final Consumer<InitializeVariable> _function_1 = (InitializeVariable it) -> {
      document.<InitializeVariable>format(it);
    };
    initialization.getInitializations().forEach(_function_1);
  }
  
  protected void _format(final InitializeVariable initializeVariable, @Extension final IFormattableDocument document) {
    document.<Expression>format(initializeVariable.getExpression());
  }
  
  protected void _format(final Indexing indexing, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(indexing).keyword("["), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(indexing).keyword("]"), _function_1);
    document.<Expression>format(indexing.getIndex());
  }
  
  public void format(final Object branch, final IFormattableDocument document) {
    if (branch instanceof If) {
      _format((If)branch, document);
      return;
    } else if (branch instanceof Lambda) {
      _format((Lambda)branch, document);
      return;
    } else if (branch instanceof Method) {
      _format((Method)branch, document);
      return;
    } else if (branch instanceof XtextResource) {
      _format((XtextResource)branch, document);
      return;
    } else if (branch instanceof Access) {
      _format((Access)branch, document);
      return;
    } else if (branch instanceof Assignment) {
      _format((Assignment)branch, document);
      return;
    } else if (branch instanceof Cast) {
      _format((Cast)branch, document);
      return;
    } else if (branch instanceof Decrement) {
      _format((Decrement)branch, document);
      return;
    } else if (branch instanceof Increment) {
      _format((Increment)branch, document);
      return;
    } else if (branch instanceof Indexing) {
      _format((Indexing)branch, document);
      return;
    } else if (branch instanceof Initialization) {
      _format((Initialization)branch, document);
      return;
    } else if (branch instanceof MethodCall) {
      _format((MethodCall)branch, document);
      return;
    } else if (branch instanceof Return) {
      _format((Return)branch, document);
      return;
    } else if (branch instanceof Annotation) {
      _format((Annotation)branch, document);
      return;
    } else if (branch instanceof Argument) {
      _format((Argument)branch, document);
      return;
    } else if (branch instanceof Field) {
      _format((Field)branch, document);
      return;
    } else if (branch instanceof File) {
      _format((File)branch, document);
      return;
    } else if (branch instanceof InitializeVariable) {
      _format((InitializeVariable)branch, document);
      return;
    } else if (branch instanceof Member) {
      _format((Member)branch, document);
      return;
    } else if (branch instanceof QualifiedName) {
      _format((QualifiedName)branch, document);
      return;
    } else if (branch instanceof Type) {
      _format((Type)branch, document);
      return;
    } else if (branch instanceof TypeName) {
      _format((TypeName)branch, document);
      return;
    } else if (branch instanceof Using) {
      _format((Using)branch, document);
      return;
    } else if (branch instanceof EObject) {
      _format((EObject)branch, document);
      return;
    } else if (branch == null) {
      _format((Void)null, document);
      return;
    } else if (branch != null) {
      _format(branch, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(branch, document).toString());
    }
  }
}
