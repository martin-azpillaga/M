/*
 * generated by Xtext
 */
grammar InternalCS;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package m.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package m.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import m.services.CSGrammarAccess;

}

@parser::members {

 	private CSGrammarAccess grammarAccess;

    public InternalCSParser(TokenStream input, CSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "File";
   	}

   	@Override
   	protected CSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current; }
	EOF;

// Rule File
ruleFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getUsingsUsingParserRuleCall_0_0());
				}
				lv_usings_0_0=ruleUsing
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					add(
						$current,
						"usings",
						lv_usings_0_0,
						"m.CS.Using");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getTypesMemberParserRuleCall_1_0());
				}
				lv_types_1_0=ruleMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"m.CS.Member");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleUsing
entryRuleUsing returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUsingRule()); }
	iv_ruleUsing=ruleUsing
	{ $current=$iv_ruleUsing.current; }
	EOF;

// Rule Using
ruleUsing returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='using'
		{
			newLeafNode(otherlv_0, grammarAccess.getUsingAccess().getUsingKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUsingAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUsingRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"m.CS.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getUsingAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current; }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_0=RULE_ID
				{
					newLeafNode(lv_names_0_0, grammarAccess.getQualifiedNameAccess().getNamesIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQualifiedNameRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_0,
						"m.CS.ID");
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			(
				(
					lv_names_2_0=RULE_ID
					{
						newLeafNode(lv_names_2_0, grammarAccess.getQualifiedNameAccess().getNamesIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQualifiedNameRule());
						}
						addWithLastConsumed(
							$current,
							"names",
							lv_names_2_0,
							"m.CS.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_sealed_0_0='sealed'
				{
					newLeafNode(lv_sealed_0_0, grammarAccess.getTypeAccess().getSealedSealedKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed($current, "sealed", true, "sealed");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTypeTypeEnumEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"m.CS.TypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getNameTypeNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"m.CS.TypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getColonKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getSuperTypesTypeNameParserRuleCall_3_1_0());
					}
					lv_superTypes_4_0=ruleTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						add(
							$current,
							"superTypes",
							lv_superTypes_4_0,
							"m.CS.TypeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeAccess().getSuperTypesTypeNameParserRuleCall_3_2_1_0());
						}
						lv_superTypes_6_0=ruleTypeName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeRule());
							}
							add(
								$current,
								"superTypes",
								lv_superTypes_6_0,
								"m.CS.TypeName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getMembersMemberParserRuleCall_5_0());
				}
				lv_members_8_0=ruleMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					add(
						$current,
						"members",
						lv_members_8_0,
						"m.CS.Member");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	iv_ruleMember=ruleMember
	{ $current=$iv_ruleMember.current; }
	EOF;

// Rule Member
ruleMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMemberAccess().getAnnotationsAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMemberRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"m.CS.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMemberAccess().getVisibilityVisibilityEnumRuleCall_1_0());
				}
				lv_visibility_1_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMemberRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_1_0,
						"m.CS.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_static_2_0='static'
				{
					newLeafNode(lv_static_2_0, grammarAccess.getMemberAccess().getStaticStaticKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMemberRule());
					}
					setWithLastConsumed($current, "static", true, "static");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMemberAccess().getValueTypeParserRuleCall_3_0_0());
					}
					lv_value_3_1=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMemberRule());
						}
						set(
							$current,
							"value",
							lv_value_3_1,
							"m.CS.Type");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getMemberAccess().getValueMethodParserRuleCall_3_0_1());
					}
					lv_value_3_2=ruleMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMemberRule());
						}
						set(
							$current,
							"value",
							lv_value_3_2,
							"m.CS.Method");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getMemberAccess().getValueFieldParserRuleCall_3_0_2());
					}
					lv_value_3_3=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMemberRule());
						}
						set(
							$current,
							"value",
							lv_value_3_3,
							"m.CS.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	iv_ruleAnnotation=ruleAnnotation
	{ $current=$iv_ruleAnnotation.current; }
	EOF;

// Rule Annotation
ruleAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotationAccess().getFunctionTypeNameParserRuleCall_1_0());
				}
				lv_function_1_0=ruleTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotationRule());
					}
					set(
						$current,
						"function",
						lv_function_1_0,
						"m.CS.TypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAnnotationAccess().getParametersExpressionParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnnotationRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"m.CS.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAnnotationAccess().getParametersExpressionParserRuleCall_2_2_1_0());
						}
						lv_parameters_5_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAnnotationRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"m.CS.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		otherlv_7=']'
		{
			newLeafNode(otherlv_7, grammarAccess.getAnnotationAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current; }
	EOF;

// Rule TypeName
ruleTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeNameAccess().getNameQualifiedNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeNameRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"m.CS.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='<'
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeNameAccess().getLessThanSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeNameAccess().getGenericsQualifiedNameParserRuleCall_1_1_0());
					}
					lv_generics_2_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeNameRule());
						}
						add(
							$current,
							"generics",
							lv_generics_2_0,
							"m.CS.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getTypeNameAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeNameAccess().getGenericsQualifiedNameParserRuleCall_1_2_1_0());
						}
						lv_generics_4_0=ruleQualifiedName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeNameRule());
							}
							add(
								$current,
								"generics",
								lv_generics_4_0,
								"m.CS.QualifiedName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5='>'
			{
				newLeafNode(otherlv_5, grammarAccess.getTypeNameAccess().getGreaterThanSignKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getTypeTypeNameParserRuleCall_0_0());
				}
				lv_type_0_0=ruleTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"m.CS.TypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"m.CS.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentAccess().getAnnotationsAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgumentRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"m.CS.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_ref_1_0='ref'
				{
					newLeafNode(lv_ref_1_0, grammarAccess.getArgumentAccess().getRefRefKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRule());
					}
					setWithLastConsumed($current, "ref", true, "ref");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentAccess().getTypeTypeNameParserRuleCall_2_0());
				}
				lv_type_2_0=ruleTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgumentRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"m.CS.TypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"m.CS.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMethodAccess().getMethodAction_0(),
					$current);
			}
		)
		(
			(
				lv_override_1_0='override'
				{
					newLeafNode(lv_override_1_0, grammarAccess.getMethodAccess().getOverrideOverrideKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed($current, "override", true, "override");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getTypeTypeNameParserRuleCall_2_0_0());
					}
					lv_type_2_0=ruleTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"m.CS.TypeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						lv_implicit_3_0='implicit'
						{
							newLeafNode(lv_implicit_3_0, grammarAccess.getMethodAccess().getImplicitImplicitKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMethodRule());
							}
							setWithLastConsumed($current, "implicit", true, "implicit");
						}
					)
				)
				(
					(
						lv_operator_4_0='operator'
						{
							newLeafNode(lv_operator_4_0, grammarAccess.getMethodAccess().getOperatorOperatorKeyword_2_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMethodRule());
							}
							setWithLastConsumed($current, "operator", true, "operator");
						}
					)
				)
			)
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"m.CS.ID");
				}
			)
		)
		(
			otherlv_6='<'
			{
				newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getLessThanSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getGenericsTypeNameParserRuleCall_4_1_0());
					}
					lv_generics_7_0=ruleTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"generics",
							lv_generics_7_0,
							"m.CS.TypeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getMethodAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getGenericsTypeNameParserRuleCall_4_2_1_0());
						}
						lv_generics_9_0=ruleTypeName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"generics",
								lv_generics_9_0,
								"m.CS.TypeName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='>'
			{
				newLeafNode(otherlv_10, grammarAccess.getMethodAccess().getGreaterThanSignKeyword_4_3());
			}
		)?
		otherlv_11='('
		{
			newLeafNode(otherlv_11, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getArgumentsArgumentParserRuleCall_6_0_0());
					}
					lv_arguments_12_0=ruleArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_12_0,
							"m.CS.Argument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getMethodAccess().getCommaKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getArgumentsArgumentParserRuleCall_6_1_1_0());
						}
						lv_arguments_14_0=ruleArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_14_0,
								"m.CS.Argument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_15=')'
		{
			newLeafNode(otherlv_15, grammarAccess.getMethodAccess().getRightParenthesisKeyword_7());
		}
		otherlv_16='{'
		{
			newLeafNode(otherlv_16, grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getCommandsCommandParserRuleCall_9_0());
				}
				lv_commands_17_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					add(
						$current,
						"commands",
						lv_commands_17_0,
						"m.CS.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_18='}'
		{
			newLeafNode(otherlv_18, grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getForParserRuleCall_0());
		}
		this_For_0=ruleFor
		{
			$current = $this_For_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getIfParserRuleCall_1());
		}
		this_If_1=ruleIf
		{
			$current = $this_If_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getWhileParserRuleCall_2());
		}
		this_While_2=ruleWhile
		{
			$current = $this_While_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getCommandAccess().getAssignmentParserRuleCall_3_0());
			}
			this_Assignment_3=ruleAssignment
			{
				$current = $this_Assignment_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getCommandAccess().getSemicolonKeyword_3_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getCommandAccess().getReturnParserRuleCall_4_0());
			}
			this_Return_5=ruleReturn
			{
				$current = $this_Return_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getCommandAccess().getSemicolonKeyword_4_1());
			}
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_var_0_0='var'
					{
						newLeafNode(lv_var_0_0, grammarAccess.getAssignmentAccess().getVarVarKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssignmentRule());
						}
						setWithLastConsumed($current, "var", true, "var");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getTypeTypeNameParserRuleCall_0_1_0());
					}
					lv_type_1_0=ruleTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"m.CS.TypeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getAccessAccessParserRuleCall_1_0());
				}
				lv_access_2_0=ruleAccess
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"access",
						lv_access_2_0,
						"m.CS.Access");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getAssignmentTypeAssignmentTypeEnumRuleCall_2_0_0_0());
						}
						lv_assignmentType_3_0=ruleAssignmentType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssignmentRule());
							}
							set(
								$current,
								"assignmentType",
								lv_assignmentType_3_0,
								"m.CS.AssignmentType");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0_1_0());
						}
						lv_expression_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssignmentRule());
							}
							set(
								$current,
								"expression",
								lv_expression_4_0,
								"m.CS.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					lv_increment_5_0='++'
					{
						newLeafNode(lv_increment_5_0, grammarAccess.getAssignmentAccess().getIncrementPlusSignPlusSignKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssignmentRule());
						}
						setWithLastConsumed($current, "increment", true, "++");
					}
				)
			)
			    |
			(
				(
					lv_decrement_6_0='--'
					{
						newLeafNode(lv_decrement_6_0, grammarAccess.getAssignmentAccess().getDecrementHyphenMinusHyphenMinusKeyword_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssignmentRule());
						}
						setWithLastConsumed($current, "decrement", true, "--");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	iv_ruleReturn=ruleReturn
	{ $current=$iv_ruleReturn.current; }
	EOF;

// Rule Return
ruleReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"m.CS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAccess
entryRuleAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAccessRule()); }
	iv_ruleAccess=ruleAccess
	{ $current=$iv_ruleAccess.current; }
	EOF;

// Rule Access
ruleAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_new_0_0='new'
				{
					newLeafNode(lv_new_0_0, grammarAccess.getAccessAccess().getNewNewKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAccessRule());
					}
					setWithLastConsumed($current, "new", true, "new");
				}
			)
		)?
		(
			(
				lv_ref_1_0='ref'
				{
					newLeafNode(lv_ref_1_0, grammarAccess.getAccessAccess().getRefRefKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAccessRule());
					}
					setWithLastConsumed($current, "ref", true, "ref");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAccessAccess().getPortionsPortionParserRuleCall_2_0());
				}
				lv_portions_2_0=rulePortion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAccessRule());
					}
					add(
						$current,
						"portions",
						lv_portions_2_0,
						"m.CS.Portion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getAccessAccess().getFullStopKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAccessAccess().getPortionsPortionParserRuleCall_3_1_0());
					}
					lv_portions_4_0=rulePortion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAccessRule());
						}
						add(
							$current,
							"portions",
							lv_portions_4_0,
							"m.CS.Portion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePortion
entryRulePortion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortionRule()); }
	iv_rulePortion=rulePortion
	{ $current=$iv_rulePortion.current; }
	EOF;

// Rule Portion
rulePortion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPortionAccess().getLabelAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getPortionAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPortionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"m.CS.ID");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPortionAccess().getMethodCallAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_name_3_0=RULE_ID
					{
						newLeafNode(lv_name_3_0, grammarAccess.getPortionAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPortionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"m.CS.ID");
					}
				)
			)
			(
				otherlv_4='<'
				{
					newLeafNode(otherlv_4, grammarAccess.getPortionAccess().getLessThanSignKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPortionAccess().getGenericsTypeNameParserRuleCall_1_2_1_0());
						}
						lv_generics_5_0=ruleTypeName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPortionRule());
							}
							add(
								$current,
								"generics",
								lv_generics_5_0,
								"m.CS.TypeName");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6='>'
				{
					newLeafNode(otherlv_6, grammarAccess.getPortionAccess().getGreaterThanSignKeyword_1_2_2());
				}
			)?
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getPortionAccess().getLeftParenthesisKeyword_1_3());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPortionAccess().getExpressionsExpressionParserRuleCall_1_4_0_0());
						}
						lv_expressions_8_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPortionRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_8_0,
								"m.CS.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9=','
					{
						newLeafNode(otherlv_9, grammarAccess.getPortionAccess().getCommaKeyword_1_4_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPortionAccess().getExpressionsExpressionParserRuleCall_1_4_1_1_0());
							}
							lv_expressions_10_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPortionRule());
								}
								add(
									$current,
									"expressions",
									lv_expressions_10_0,
									"m.CS.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getPortionAccess().getRightParenthesisKeyword_1_5());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPortionAccess().getInitializationAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_name_13_0=RULE_ID
					{
						newLeafNode(lv_name_13_0, grammarAccess.getPortionAccess().getNameIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPortionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_13_0,
							"m.CS.ID");
					}
				)
			)
			otherlv_14='{'
			{
				newLeafNode(otherlv_14, grammarAccess.getPortionAccess().getLeftCurlyBracketKeyword_2_2());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPortionAccess().getInitializationsInitializeVariableParserRuleCall_2_3_0_0());
						}
						lv_initializations_15_0=ruleInitializeVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPortionRule());
							}
							add(
								$current,
								"initializations",
								lv_initializations_15_0,
								"m.CS.InitializeVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_16=','
					{
						newLeafNode(otherlv_16, grammarAccess.getPortionAccess().getCommaKeyword_2_3_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPortionAccess().getInitializationsInitializeVariableParserRuleCall_2_3_1_1_0());
							}
							lv_initializations_17_0=ruleInitializeVariable
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPortionRule());
								}
								add(
									$current,
									"initializations",
									lv_initializations_17_0,
									"m.CS.InitializeVariable");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_18='}'
			{
				newLeafNode(otherlv_18, grammarAccess.getPortionAccess().getRightCurlyBracketKeyword_2_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPortionAccess().getIndexingAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_name_20_0=RULE_ID
					{
						newLeafNode(lv_name_20_0, grammarAccess.getPortionAccess().getNameIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPortionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_20_0,
							"m.CS.ID");
					}
				)
			)
			otherlv_21='['
			{
				newLeafNode(otherlv_21, grammarAccess.getPortionAccess().getLeftSquareBracketKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPortionAccess().getIndexExpressionParserRuleCall_3_3_0());
					}
					lv_index_22_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPortionRule());
						}
						set(
							$current,
							"index",
							lv_index_22_0,
							"m.CS.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_23=']'
			{
				newLeafNode(otherlv_23, grammarAccess.getPortionAccess().getRightSquareBracketKeyword_3_4());
			}
		)
	)
;

// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForRule()); }
	iv_ruleFor=ruleFor
	{ $current=$iv_ruleFor.current; }
	EOF;

// Rule For
ruleFor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForAccess().getForAction_0(),
					$current);
			}
		)
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getForAccess().getForKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getForAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getInitializationAssignmentParserRuleCall_3_0());
				}
				lv_initialization_3_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"initialization",
						lv_initialization_3_0,
						"m.CS.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getForAccess().getSemicolonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getConditionExpressionParserRuleCall_5_0());
				}
				lv_condition_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"condition",
						lv_condition_5_0,
						"m.CS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getForAccess().getSemicolonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getIncrementAssignmentParserRuleCall_7_0());
				}
				lv_increment_7_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"increment",
						lv_increment_7_0,
						"m.CS.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getForAccess().getRightParenthesisKeyword_8());
		}
		otherlv_9='{'
		{
			newLeafNode(otherlv_9, grammarAccess.getForAccess().getLeftCurlyBracketKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getCommandsCommandParserRuleCall_10_0());
				}
				lv_commands_10_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					add(
						$current,
						"commands",
						lv_commands_10_0,
						"m.CS.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getForAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfAccess().getIfAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getIfKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIfAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"m.CS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getCommandsCommandParserRuleCall_6_0());
				}
				lv_commands_6_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					add(
						$current,
						"commands",
						lv_commands_6_0,
						"m.CS.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getElseIfsElseIfParserRuleCall_8_0());
				}
				lv_elseIfs_8_0=ruleElseIf
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					add(
						$current,
						"elseIfs",
						lv_elseIfs_8_0,
						"m.CS.ElseIf");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getElseElseParserRuleCall_9_0());
				}
				lv_else_9_0=ruleElse
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"else",
						lv_else_9_0,
						"m.CS.Else");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleElseIf
entryRuleElseIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseIfRule()); }
	iv_ruleElseIf=ruleElseIf
	{ $current=$iv_ruleElseIf.current; }
	EOF;

// Rule ElseIf
ruleElseIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getElseIfAccess().getElseIfAction_0(),
					$current);
			}
		)
		otherlv_1='else'
		{
			newLeafNode(otherlv_1, grammarAccess.getElseIfAccess().getElseKeyword_1());
		}
		otherlv_2='if'
		{
			newLeafNode(otherlv_2, grammarAccess.getElseIfAccess().getIfKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getElseIfAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfAccess().getExpressionExpressionParserRuleCall_4_0());
				}
				lv_expression_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfRule());
					}
					set(
						$current,
						"expression",
						lv_expression_4_0,
						"m.CS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getElseIfAccess().getRightParenthesisKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getElseIfAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfAccess().getCommandsCommandParserRuleCall_7_0());
				}
				lv_commands_7_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfRule());
					}
					add(
						$current,
						"commands",
						lv_commands_7_0,
						"m.CS.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getElseIfAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleElse
entryRuleElse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseRule()); }
	iv_ruleElse=ruleElse
	{ $current=$iv_ruleElse.current; }
	EOF;

// Rule Else
ruleElse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getElseAccess().getElseAction_0(),
					$current);
			}
		)
		otherlv_1='else'
		{
			newLeafNode(otherlv_1, grammarAccess.getElseAccess().getElseKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getElseAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseAccess().getCommandsCommandParserRuleCall_3_0());
				}
				lv_commands_3_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseRule());
					}
					add(
						$current,
						"commands",
						lv_commands_3_0,
						"m.CS.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getElseAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"m.CS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getCommandsCommandParserRuleCall_5_0());
				}
				lv_commands_5_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					add(
						$current,
						"commands",
						lv_commands_5_0,
						"m.CS.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getWhileAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getAccessParserRuleCall_0());
		}
		this_Access_0=ruleAccess
		{
			$current = $this_Access_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getLongAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_2_0=RULE_LONG
					{
						newLeafNode(lv_value_2_0, grammarAccess.getAtomicAccess().getValueLONGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"m.CS.LONG");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getFloatAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_4_0=RULE_FLOAT
					{
						newLeafNode(lv_value_4_0, grammarAccess.getAtomicAccess().getValueFLOATTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_4_0,
							"m.CS.FLOAT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getStringAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_value_6_0=RULE_STRING
					{
						newLeafNode(lv_value_6_0, grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_6_0,
							"m.CS.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleInitializeVariable
entryRuleInitializeVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializeVariableRule()); }
	iv_ruleInitializeVariable=ruleInitializeVariable
	{ $current=$iv_ruleInitializeVariable.current; }
	EOF;

// Rule InitializeVariable
ruleInitializeVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getInitializeVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitializeVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"m.CS.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getInitializeVariableAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitializeVariableAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitializeVariableRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"m.CS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLambda
entryRuleLambda returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLambdaRule()); }
	iv_ruleLambda=ruleLambda
	{ $current=$iv_ruleLambda.current; }
	EOF;

// Rule Lambda
ruleLambda returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLambdaAccess().getLambdaAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLambdaAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaAccess().getArgumentsArgumentParserRuleCall_2_0());
				}
				lv_arguments_2_0=ruleArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaRule());
					}
					add(
						$current,
						"arguments",
						lv_arguments_2_0,
						"m.CS.Argument");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getLambdaAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLambdaAccess().getArgumentsArgumentParserRuleCall_3_1_0());
					}
					lv_arguments_4_0=ruleArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLambdaRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_4_0,
							"m.CS.Argument");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getLambdaAccess().getRightParenthesisKeyword_4());
		}
		otherlv_6='=>'
		{
			newLeafNode(otherlv_6, grammarAccess.getLambdaAccess().getEqualsSignGreaterThanSignKeyword_5());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getLambdaAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaAccess().getCommandsCommandParserRuleCall_7_0());
				}
				lv_commands_8_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaRule());
					}
					add(
						$current,
						"commands",
						lv_commands_8_0,
						"m.CS.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getLambdaAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				(
				)
				'('
				(
					(
						ruleTypeName
					)
				)
				')'
				(
					(
						ruleBoolean0
					)
				)
			)
			)=>
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getExpressionAccess().getCastAction_0_0_0(),
							$current);
					}
				)
				otherlv_1='('
				{
					newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_0_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getTypeTypeNameParserRuleCall_0_0_2_0());
						}
						lv_type_2_0=ruleTypeName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							set(
								$current,
								"type",
								lv_type_2_0,
								"m.CS.TypeName");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=')'
				{
					newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_0_0_3());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getExpressionBoolean0ParserRuleCall_0_0_4_0());
						}
						lv_expression_4_0=ruleBoolean0
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							set(
								$current,
								"expression",
								lv_expression_4_0,
								"m.CS.Boolean0");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getLambdaParserRuleCall_1());
		}
		this_Lambda_5=ruleLambda
		{
			$current = $this_Lambda_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBoolean0ParserRuleCall_2());
		}
		this_Boolean0_6=ruleBoolean0
		{
			$current = $this_Boolean0_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolean0
entryRuleBoolean0 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean0Rule()); }
	iv_ruleBoolean0=ruleBoolean0
	{ $current=$iv_ruleBoolean0.current; }
	EOF;

// Rule Boolean0
ruleBoolean0 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolean0Access().getBoolean1ParserRuleCall_0());
		}
		this_Boolean1_0=ruleBoolean1
		{
			$current = $this_Boolean1_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBoolean0Access().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getBoolean0Access().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolean0Access().getRightBoolean1ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBoolean1
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolean0Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"m.CS.Boolean1");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBoolean1
entryRuleBoolean1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean1Rule()); }
	iv_ruleBoolean1=ruleBoolean1
	{ $current=$iv_ruleBoolean1.current; }
	EOF;

// Rule Boolean1
ruleBoolean1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolean1Access().getBoolean2ParserRuleCall_0());
		}
		this_Boolean2_0=ruleBoolean2
		{
			$current = $this_Boolean2_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBoolean1Access().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getBoolean1Access().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolean1Access().getRightBoolean2ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBoolean2
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolean1Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"m.CS.Boolean2");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBoolean2
entryRuleBoolean2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean2Rule()); }
	iv_ruleBoolean2=ruleBoolean2
	{ $current=$iv_ruleBoolean2.current; }
	EOF;

// Rule Boolean2
ruleBoolean2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolean2Access().getBoolean3ParserRuleCall_0());
		}
		this_Boolean3_0=ruleBoolean3
		{
			$current = $this_Boolean3_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBoolean2Access().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_2='!'
			{
				newLeafNode(otherlv_2, grammarAccess.getBoolean2Access().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolean2Access().getExpressionBoolean3ParserRuleCall_1_2_0());
					}
					lv_expression_3_0=ruleBoolean3
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolean2Rule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"m.CS.Boolean3");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBoolean3
entryRuleBoolean3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean3Rule()); }
	iv_ruleBoolean3=ruleBoolean3
	{ $current=$iv_ruleBoolean3.current; }
	EOF;

// Rule Boolean3
ruleBoolean3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBoolean3Access().getBoolean4ParserRuleCall());
	}
	this_Boolean4_0=ruleBoolean4
	{
		$current = $this_Boolean4_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBoolean4
entryRuleBoolean4 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean4Rule()); }
	iv_ruleBoolean4=ruleBoolean4
	{ $current=$iv_ruleBoolean4.current; }
	EOF;

// Rule Boolean4
ruleBoolean4 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolean4Access().getAdditionParserRuleCall_0());
		}
		this_Addition_0=ruleAddition
		{
			$current = $this_Addition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBoolean4Access().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolean4Access().getTypeRelationTypeEnumRuleCall_1_1_0());
					}
					lv_type_2_0=ruleRelationType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolean4Rule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"m.CS.RelationType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolean4Access().getRightAdditionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolean4Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"m.CS.Addition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"m.CS.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getBitwiseParserRuleCall_0());
		}
		this_Bitwise_0=ruleBitwise
		{
			$current = $this_Bitwise_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationAccess().getTimesLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationAccess().getDivideLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationAccess().getModulusLeftAction_1_0_2_0(),
								$current);
						}
					)
					otherlv_6='%'
					{
						newLeafNode(otherlv_6, grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightBitwiseParserRuleCall_1_1_0());
					}
					lv_right_7_0=ruleBitwise
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_7_0,
							"m.CS.Bitwise");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitwise
entryRuleBitwise returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseRule()); }
	iv_ruleBitwise=ruleBitwise
	{ $current=$iv_ruleBitwise.current; }
	EOF;

// Rule Bitwise
ruleBitwise returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitwiseAccess().getUnaryParserRuleCall_0());
		}
		this_Unary_0=ruleUnary
		{
			$current = $this_Unary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitwiseAccess().getBitwiseLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='&'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getBitwiseAccess().getOpAmpersandKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='|'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getBitwiseAccess().getOpVerticalLineKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='~'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getBitwiseAccess().getOpTildeKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseAccess().getRightUnaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"m.CS.Unary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnary
entryRuleUnary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryRule()); }
	iv_ruleUnary=ruleUnary
	{ $current=$iv_ruleUnary.current; }
	EOF;

// Rule Unary
ruleUnary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getUnaryAccess().getIncrementLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='++'
				{
					newLeafNode(otherlv_2, grammarAccess.getUnaryAccess().getPlusSignPlusSignKeyword_1_0_1());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getUnaryAccess().getDecrementLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_4='--'
				{
					newLeafNode(otherlv_4, grammarAccess.getUnaryAccess().getHyphenMinusHyphenMinusKeyword_1_1_1());
				}
			)
		)?
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_0());
		}
		this_Atomic_0=ruleAtomic
		{
			$current = $this_Atomic_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getBracketsAction_1_0(),
						$current);
				}
			)
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionExpressionParserRuleCall_1_2_0());
					}
					lv_expression_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"m.CS.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Rule TypeEnum
ruleTypeEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='class'
			{
				$current = grammarAccess.getTypeEnumAccess().getClassEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeEnumAccess().getClassEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='struct'
			{
				$current = grammarAccess.getTypeEnumAccess().getStructEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeEnumAccess().getStructEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Visibility
ruleVisibility returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='public'
			{
				$current = grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='private'
			{
				$current = grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='protected'
			{
				$current = grammarAccess.getVisibilityAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getVisibilityAccess().getProtectedEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='internal'
			{
				$current = grammarAccess.getVisibilityAccess().getInternalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getVisibilityAccess().getInternalEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule RelationType
ruleRelationType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getRelationTypeAccess().getOverEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRelationTypeAccess().getOverEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getRelationTypeAccess().getUnderEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRelationTypeAccess().getUnderEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='=='
			{
				$current = grammarAccess.getRelationTypeAccess().getEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRelationTypeAccess().getEqualEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='!='
			{
				$current = grammarAccess.getRelationTypeAccess().getNotequalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRelationTypeAccess().getNotequalEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>='
			{
				$current = grammarAccess.getRelationTypeAccess().getOverorequalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRelationTypeAccess().getOverorequalEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='<='
			{
				$current = grammarAccess.getRelationTypeAccess().getUnderorequalEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRelationTypeAccess().getUnderorequalEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule AssignmentType
ruleAssignmentType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getSetEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAssignmentTypeAccess().getSetEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='+='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getIncreaseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAssignmentTypeAccess().getIncreaseEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='-='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getDecreaseEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAssignmentTypeAccess().getDecreaseEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='*='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getMultiplyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAssignmentTypeAccess().getMultiplyEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='/='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getDivideEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAssignmentTypeAccess().getDivideEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='%='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getModulusEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getAssignmentTypeAccess().getModulusEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='&='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getAndEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getAssignmentTypeAccess().getAndEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='|='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getOrEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getAssignmentTypeAccess().getOrEnumLiteralDeclaration_7());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_LONG : '-'? ('0'..'9')+;

RULE_FLOAT : '-'? ('0'..'9')* '.' ('0'..'9')+ ('e' '-'? ('0'..'9')+)?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
