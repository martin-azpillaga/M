/*
 * generated by Xtext
 */
grammar InternalBlocks;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package m.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package m.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import m.services.BlocksGrammarAccess;

}

@parser::members {

 	private BlocksGrammarAccess grammarAccess;

    public InternalBlocksParser(TokenStream input, BlocksGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "File";
   	}

   	@Override
   	protected BlocksGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current; }
	EOF;

// Rule File
ruleFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFileAccess().getElementsElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFileRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"m.Blocks.Element");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getElementAccess().getLessThanSignKeyword_0());
		}
		(
			(
				lv_open_1_0=RULE_ID
				{
					newLeafNode(lv_open_1_0, grammarAccess.getElementAccess().getOpenIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementRule());
					}
					setWithLastConsumed(
						$current,
						"open",
						lv_open_1_0,
						"m.Blocks.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getAttributesAttributeParserRuleCall_2_0());
				}
				lv_attributes_2_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_2_0,
						"m.Blocks.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_3='/>'
			{
				newLeafNode(otherlv_3, grammarAccess.getElementAccess().getSolidusGreaterThanSignKeyword_3_0());
			}
			    |
			(
				otherlv_4='>'
				{
					newLeafNode(otherlv_4, grammarAccess.getElementAccess().getGreaterThanSignKeyword_3_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getElementAccess().getElementsElementParserRuleCall_3_1_1_0_0());
							}
							lv_elements_5_0=ruleElement
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getElementRule());
								}
								add(
									$current,
									"elements",
									lv_elements_5_0,
									"m.Blocks.Element");
								afterParserOrEnumRuleCall();
							}
						)
					)+
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getElementAccess().getTextTextParserRuleCall_3_1_1_1_0());
							}
							lv_text_6_0=ruleText
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getElementRule());
								}
								set(
									$current,
									"text",
									lv_text_6_0,
									"m.Blocks.Text");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
				otherlv_7='</'
				{
					newLeafNode(otherlv_7, grammarAccess.getElementAccess().getLessThanSignSolidusKeyword_3_1_2());
				}
				(
					(
						lv_close_8_0=RULE_ID
						{
							newLeafNode(lv_close_8_0, grammarAccess.getElementAccess().getCloseIDTerminalRuleCall_3_1_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getElementRule());
							}
							setWithLastConsumed(
								$current,
								"close",
								lv_close_8_0,
								"m.Blocks.ID");
						}
					)
				)
				otherlv_9='>'
				{
					newLeafNode(otherlv_9, grammarAccess.getElementAccess().getGreaterThanSignKeyword_3_1_4());
				}
			)
		)
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"m.Blocks.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"m.Blocks.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleText
entryRuleText returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current.getText(); }
	EOF;

// Rule Text
ruleText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_N_0=RULE_N
		{
			$current.merge(this_N_0);
		}
		{
			newLeafNode(this_N_0, grammarAccess.getTextAccess().getNTerminalRuleCall_0());
		}
		    |
		this_WHITE_SPACE_1=RULE_WHITE_SPACE
		{
			$current.merge(this_WHITE_SPACE_1);
		}
		{
			newLeafNode(this_WHITE_SPACE_1, grammarAccess.getTextAccess().getWHITE_SPACETerminalRuleCall_1());
		}
		    |
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getTextAccess().getIDTerminalRuleCall_2());
		}
	)+
;

RULE_N : '-'? ('0'..'9')+ ('.' ('0'..'9')*)?;

RULE_ID : ('_'|'a'..'z'|'A'..'Z') ('_'|'a'..'z'|'A'..'Z'|'0'..'9'|'.'|'-')*;

RULE_WHITE_SPACE : (' '|'\t'|'\r'|'\n');

RULE_STRING : ('"' ( options {greedy=false;} : . )*'"'|'\'' ( options {greedy=false;} : . )*'\'');
