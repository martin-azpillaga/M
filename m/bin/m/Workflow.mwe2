module m.Workflow

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "m"
				rootPath = rootPath
				genericIde = {enabled = true}
				eclipsePlugin = {
					enabled = false
				}
				createEclipseMetaData = true
			}
			code = 
			{
				encoding = "UTF-8"
				lineDelimiter = "\n"
			}
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.M"
			fileExtensions = "m"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = false }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = false }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = true}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.Text"
			fileExtensions = "text"
			referencedResource = "platform:/resource/m/model/generated/M.genmodel"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = true }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=true }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = true }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = true }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = true}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.Testua"
			fileExtensions = "testua"
			referencedResource = "platform:/resource/m/model/generated/M.genmodel"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = false }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = false }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = true}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.Blocks"
			fileExtensions = "blocks"
			referencedResource = "platform:/resource/m/model/generated/M.genmodel"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = false }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = false }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = true}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.YAML"
			fileExtensions = "meta,prefab"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = false }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = false }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = true}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.CS"
			fileExtensions = "cs"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = false }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = false }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = true}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = true }
		}
		language = XtextGeneratorLanguage 
		{
			name = "m.Json"
			fileExtensions = "json"
			fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 { generateStub = false }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = validation.ValidatorFragment2 { generateStub = false }
		    fragment = scoping.ImportNamespacesScopingFragment2 { generateStub = false }
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 { generateStub = true generateJavaMain=false }
		    fragment = formatting.Formatter2Fragment2 { generateStub = true }
		    fragment = ui.labeling.LabelProviderFragment2 { generateStub = false }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 { generateStub = false }
		    fragment = ui.quickfix.QuickfixProviderFragment2 { generateStub = true}
		    fragment = ui.contentAssist.ContentAssistFragment2 { generateStub = true }
		}
	}
}
